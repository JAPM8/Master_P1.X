

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Sat Sep 24 14:07:16 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    17                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 2.40
    40                           ; Generated 17/11/2021 GMT
    41                           ; 
    42                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F887 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0088                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0094                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009E                     	;# 
   136  009F                     	;# 
   137  0105                     	;# 
   138  0107                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  0185                     	;# 
   147  0187                     	;# 
   148  0188                     	;# 
   149  0189                     	;# 
   150  018C                     	;# 
   151  018D                     	;# 
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000E                     	;# 
   168  000F                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0013                     	;# 
   173  0014                     	;# 
   174  0015                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  001D                     	;# 
   185  001E                     	;# 
   186  001F                     	;# 
   187  0081                     	;# 
   188  0085                     	;# 
   189  0086                     	;# 
   190  0087                     	;# 
   191  0088                     	;# 
   192  0089                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  008F                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0093                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0094                     	;# 
   204  0095                     	;# 
   205  0096                     	;# 
   206  0097                     	;# 
   207  0098                     	;# 
   208  0099                     	;# 
   209  009A                     	;# 
   210  009B                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009E                     	;# 
   214  009F                     	;# 
   215  0105                     	;# 
   216  0107                     	;# 
   217  0108                     	;# 
   218  0109                     	;# 
   219  010C                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  010F                     	;# 
   224  0185                     	;# 
   225  0187                     	;# 
   226  0188                     	;# 
   227  0189                     	;# 
   228  018C                     	;# 
   229  018D                     	;# 
   230  0000                     	;# 
   231  0001                     	;# 
   232  0002                     	;# 
   233  0003                     	;# 
   234  0004                     	;# 
   235  0005                     	;# 
   236  0006                     	;# 
   237  0007                     	;# 
   238  0008                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  000E                     	;# 
   246  000F                     	;# 
   247  0010                     	;# 
   248  0011                     	;# 
   249  0012                     	;# 
   250  0013                     	;# 
   251  0014                     	;# 
   252  0015                     	;# 
   253  0015                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001B                     	;# 
   261  001C                     	;# 
   262  001D                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  0081                     	;# 
   266  0085                     	;# 
   267  0086                     	;# 
   268  0087                     	;# 
   269  0088                     	;# 
   270  0089                     	;# 
   271  008C                     	;# 
   272  008D                     	;# 
   273  008E                     	;# 
   274  008F                     	;# 
   275  0090                     	;# 
   276  0091                     	;# 
   277  0092                     	;# 
   278  0093                     	;# 
   279  0093                     	;# 
   280  0093                     	;# 
   281  0094                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009A                     	;# 
   288  009B                     	;# 
   289  009C                     	;# 
   290  009D                     	;# 
   291  009E                     	;# 
   292  009F                     	;# 
   293  0105                     	;# 
   294  0107                     	;# 
   295  0108                     	;# 
   296  0109                     	;# 
   297  010C                     	;# 
   298  010C                     	;# 
   299  010D                     	;# 
   300  010E                     	;# 
   301  010F                     	;# 
   302  0185                     	;# 
   303  0187                     	;# 
   304  0188                     	;# 
   305  0189                     	;# 
   306  018C                     	;# 
   307  018D                     	;# 
   308  0000                     	;# 
   309  0001                     	;# 
   310  0002                     	;# 
   311  0003                     	;# 
   312  0004                     	;# 
   313  0005                     	;# 
   314  0006                     	;# 
   315  0007                     	;# 
   316  0008                     	;# 
   317  0009                     	;# 
   318  000A                     	;# 
   319  000B                     	;# 
   320  000C                     	;# 
   321  000D                     	;# 
   322  000E                     	;# 
   323  000E                     	;# 
   324  000F                     	;# 
   325  0010                     	;# 
   326  0011                     	;# 
   327  0012                     	;# 
   328  0013                     	;# 
   329  0014                     	;# 
   330  0015                     	;# 
   331  0015                     	;# 
   332  0016                     	;# 
   333  0017                     	;# 
   334  0018                     	;# 
   335  0019                     	;# 
   336  001A                     	;# 
   337  001B                     	;# 
   338  001B                     	;# 
   339  001C                     	;# 
   340  001D                     	;# 
   341  001E                     	;# 
   342  001F                     	;# 
   343  0081                     	;# 
   344  0085                     	;# 
   345  0086                     	;# 
   346  0087                     	;# 
   347  0088                     	;# 
   348  0089                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  008F                     	;# 
   353  0090                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0093                     	;# 
   358  0093                     	;# 
   359  0094                     	;# 
   360  0095                     	;# 
   361  0096                     	;# 
   362  0097                     	;# 
   363  0098                     	;# 
   364  0099                     	;# 
   365  009A                     	;# 
   366  009B                     	;# 
   367  009C                     	;# 
   368  009D                     	;# 
   369  009E                     	;# 
   370  009F                     	;# 
   371  0105                     	;# 
   372  0107                     	;# 
   373  0108                     	;# 
   374  0109                     	;# 
   375  010C                     	;# 
   376  010C                     	;# 
   377  010D                     	;# 
   378  010E                     	;# 
   379  010F                     	;# 
   380  0185                     	;# 
   381  0187                     	;# 
   382  0188                     	;# 
   383  0189                     	;# 
   384  018C                     	;# 
   385  018D                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  000E                     	;# 
   402  000F                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0013                     	;# 
   407  0014                     	;# 
   408  0015                     	;# 
   409  0015                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001B                     	;# 
   417  001C                     	;# 
   418  001D                     	;# 
   419  001E                     	;# 
   420  001F                     	;# 
   421  0081                     	;# 
   422  0085                     	;# 
   423  0086                     	;# 
   424  0087                     	;# 
   425  0088                     	;# 
   426  0089                     	;# 
   427  008C                     	;# 
   428  008D                     	;# 
   429  008E                     	;# 
   430  008F                     	;# 
   431  0090                     	;# 
   432  0091                     	;# 
   433  0092                     	;# 
   434  0093                     	;# 
   435  0093                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0095                     	;# 
   439  0096                     	;# 
   440  0097                     	;# 
   441  0098                     	;# 
   442  0099                     	;# 
   443  009A                     	;# 
   444  009B                     	;# 
   445  009C                     	;# 
   446  009D                     	;# 
   447  009E                     	;# 
   448  009F                     	;# 
   449  0105                     	;# 
   450  0107                     	;# 
   451  0108                     	;# 
   452  0109                     	;# 
   453  010C                     	;# 
   454  010C                     	;# 
   455  010D                     	;# 
   456  010E                     	;# 
   457  010F                     	;# 
   458  0185                     	;# 
   459  0187                     	;# 
   460  0188                     	;# 
   461  0189                     	;# 
   462  018C                     	;# 
   463  018D                     	;# 
   464                           
   465                           	psect	idataBANK0
   466  068F                     __pidataBANK0:
   467                           
   468                           ;initializer for _mins
   469  068F  340F               	retlw	15
   470  0690  3400               	retlw	0
   471                           
   472                           ;initializer for _hrs
   473  0691  340F               	retlw	15
   474  0692  3400               	retlw	0
   475                           
   476                           ;initializer for _temp
   477  0693  3418               	retlw	24
   478  0694  3400               	retlw	0
   479                           
   480                           	psect	strings
   481  0563                     __pstrings:
   482  0563                     stringtab:
   483  0563                     __stringtab:
   484  0563                     stringcode:	
   485                           ;	String table - string pointers are 1 byte each
   486                           
   487  0563                     stringdir:
   488  0563  3005               	movlw	high stringdir
   489  0564  008A               	movwf	10
   490  0565  0804               	movf	4,w
   491  0566  0A84               	incf	4,f
   492  0567  0782               	addwf	2,f
   493  0568                     __stringbase:
   494  0568  3400               	retlw	0
   495  0569                     __end_of__stringtab:
   496  0569                     _dpowers:
   497  0569  3401               	retlw	1
   498  056A  3400               	retlw	0
   499  056B  340A               	retlw	10
   500  056C  3400               	retlw	0
   501  056D  3464               	retlw	100
   502  056E  3400               	retlw	0
   503  056F  34E8               	retlw	232
   504  0570  3403               	retlw	3
   505  0571  3410               	retlw	16
   506  0572  3427               	retlw	39
   507  0573                     __end_of_dpowers:
   508  001A                     _RCREG	set	26
   509  0018                     _RCSTAbits	set	24
   510  000B                     _INTCONbits	set	11
   511  0006                     _PORTB	set	6
   512  000C                     _PIR1bits	set	12
   513  0029                     _RA1	set	41
   514  0028                     _RA0	set	40
   515  002D                     _RA5	set	45
   516  002C                     _RA4	set	44
   517  002B                     _RA3	set	43
   518  002A                     _RA2	set	42
   519  008C                     _PIE1bits	set	140
   520  0099                     _SPBRG	set	153
   521  009A                     _SPBRGH	set	154
   522  0098                     _TXSTAbits	set	152
   523  008F                     _OSCCONbits	set	143
   524  0086                     _TRISB	set	134
   525  0085                     _TRISA	set	133
   526  0187                     _BAUDCTLbits	set	391
   527  0189                     _ANSELH	set	393
   528  0188                     _ANSEL	set	392
   529  0573                     STR_1:
   530  0573  3425               	retlw	37	;'%'
   531  0574  3430               	retlw	48	;'0'
   532  0575  3432               	retlw	50	;'2'
   533  0576  3464               	retlw	100	;'d'
   534  0577  343A               	retlw	58	;':'
   535  0578  3425               	retlw	37	;'%'
   536  0579  3430               	retlw	48	;'0'
   537  057A  3432               	retlw	50	;'2'
   538  057B  3464               	retlw	100	;'d'
   539  057C  3420               	retlw	32	;' '
   540  057D  3420               	retlw	32	;' '
   541  057E  3420               	retlw	32	;' '
   542  057F  3420               	retlw	32	;' '
   543  0580  344C               	retlw	76	;'L'
   544  0581  3475               	retlw	117	;'u'
   545  0582  347A               	retlw	122	;'z'
   546  0583  343A               	retlw	58	;':'
   547  0584  3420               	retlw	32	;' '
   548  0585  3425               	retlw	37	;'%'
   549  0586  3430               	retlw	48	;'0'
   550  0587  3432               	retlw	50	;'2'
   551  0588  3464               	retlw	100	;'d'
   552  0589  3400               	retlw	0
   553  058A                     STR_2:
   554  058A  344D               	retlw	77	;'M'
   555  058B  346F               	retlw	111	;'o'
   556  058C  3476               	retlw	118	;'v'
   557  058D  343A               	retlw	58	;':'
   558  058E  3420               	retlw	32	;' '
   559  058F  3425               	retlw	37	;'%'
   560  0590  3464               	retlw	100	;'d'
   561  0591  3420               	retlw	32	;' '
   562  0592  3420               	retlw	32	;' '
   563  0593  3454               	retlw	84	;'T'
   564  0594  3465               	retlw	101	;'e'
   565  0595  346D               	retlw	109	;'m'
   566  0596  3470               	retlw	112	;'p'
   567  0597  343A               	retlw	58	;':'
   568  0598  3420               	retlw	32	;' '
   569  0599  3425               	retlw	37	;'%'
   570  059A  3430               	retlw	48	;'0'
   571  059B  3432               	retlw	50	;'2'
   572  059C  3464               	retlw	100	;'d'
   573  059D  3400               	retlw	0
   574                           
   575                           	psect	cinit
   576  0011                     start_initialization:	
   577                           ; #config settings
   578                           
   579  0011                     __initialization:
   580                           
   581                           ; Initialize objects allocated to BANK0
   582  0011  120A  118A  268F  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   583  0016  00D9               	movwf	__pdataBANK0& (0+127)
   584  0017  120A  118A  2690  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   585  001C  00DA               	movwf	(__pdataBANK0+1)& (0+127)
   586  001D  120A  118A  2691  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   587  0022  00DB               	movwf	(__pdataBANK0+2)& (0+127)
   588  0023  120A  118A  2692  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   589  0028  00DC               	movwf	(__pdataBANK0+3)& (0+127)
   590  0029  120A  118A  2693  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   591  002E  00DD               	movwf	(__pdataBANK0+4)& (0+127)
   592  002F  120A  118A  2694  120A  118A  	fcall	__pidataBANK0+5	;fetch initializer
   593  0034  00DE               	movwf	(__pdataBANK0+5)& (0+127)
   594                           
   595                           ; Clear objects allocated to BANK1
   596  0035  1383               	bcf	3,7	;select IRP bank0
   597  0036  30A0               	movlw	low __pbssBANK1
   598  0037  0084               	movwf	4
   599  0038  30B4               	movlw	low (__pbssBANK1+20)
   600  0039  120A  118A  2687  120A  118A  	fcall	clear_ram0
   601                           
   602                           ; Clear objects allocated to BANK0
   603  003E  3041               	movlw	low __pbssBANK0
   604  003F  0084               	movwf	4
   605  0040  3059               	movlw	low (__pbssBANK0+24)
   606  0041  120A  118A  2687  120A  118A  	fcall	clear_ram0
   607                           
   608                           ; Clear objects allocated to COMMON
   609  0046  01F7               	clrf	__pbssCOMMON& (0+127)
   610  0047                     end_of_initialization:	
   611                           ;End of C runtime variable initialization code
   612                           
   613  0047                     __end_of__initialization:
   614  0047  0183               	clrf	3
   615  0048  120A  118A  2A1F   	ljmp	_main	;jump to C main() function
   616                           
   617                           	psect	bssCOMMON
   618  0077                     __pbssCOMMON:
   619  0077                     _val:
   620  0077                     	ds	1
   621                           
   622                           	psect	bssBANK0
   623  0041                     __pbssBANK0:
   624  0041                     _lux:
   625  0041                     	ds	2
   626  0043                     _mov:
   627  0043                     	ds	2
   628  0045                     _frow:
   629  0045                     	ds	20
   630                           
   631                           	psect	dataBANK0
   632  0059                     __pdataBANK0:
   633  0059                     _mins:
   634  0059                     	ds	2
   635  005B                     _hrs:
   636  005B                     	ds	2
   637  005D                     _temp:
   638  005D                     	ds	2
   639                           
   640                           	psect	bssBANK1
   641  00A0                     __pbssBANK1:
   642  00A0                     _srow:
   643  00A0                     	ds	20
   644                           
   645                           	psect	clrtext
   646  0687                     clear_ram0:	
   647                           ;	Called with FSR containing the base address, and
   648                           ;	W with the last address+1
   649                           
   650  0687  0064               	clrwdt	;clear the watchdog before getting into this loop
   651  0688                     clrloop0:
   652  0688  0180               	clrf	0	;clear RAM location pointed to by FSR
   653  0689  0A84               	incf	4,f	;increment pointer
   654  068A  0604               	xorwf	4,w	;XOR with final address
   655  068B  1903               	btfsc	3,2	;have we reached the end yet?
   656  068C  3400               	retlw	0	;all done for this memory range, return
   657  068D  0604               	xorwf	4,w	;XOR again to restore value
   658  068E  2E88               	goto	clrloop0	;do the next byte
   659                           
   660                           	psect	cstackCOMMON
   661  0070                     __pcstackCOMMON:
   662  0070                     ?_isdigit:
   663  0070                     ?_USART_read:	
   664                           ; 1 bit 
   665                           
   666  0070                     ??_USART_read:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ?_read_red:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ??_read_red:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     ?_setup:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ?_Lcd_Clear:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ?_Lcd_Write_String:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0070                     ?_int_osc_MHz:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0070                     ?_Lcd_Init:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     ?_master:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     ?_main:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     ?_Lcd_Port:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     ?_Lcd_Cmd:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0070                     ?_Lcd_Write_Char:	
   703                           ; 1 bytes @ 0x0
   704                           
   705                           
   706                           ; 1 bytes @ 0x0
   707  0070                     	ds	2
   708  0072                     ??_master:
   709                           
   710                           ; 1 bytes @ 0x2
   711  0072                     	ds	4
   712  0076                     ??_isdigit:
   713  0076                     ??_Lcd_Port:	
   714                           ; 1 bytes @ 0x6
   715                           
   716  0076                     ??___wmul:	
   717                           ; 1 bytes @ 0x6
   718                           
   719  0076                     ??___lldiv:	
   720                           ; 1 bytes @ 0x6
   721                           
   722  0076                     ??___lwdiv:	
   723                           ; 1 bytes @ 0x6
   724                           
   725  0076                     Lcd_Port@a:	
   726                           ; 1 bytes @ 0x6
   727                           
   728  0076                     int_osc_MHz@freq:	
   729                           ; 1 bytes @ 0x6
   730                           
   731                           
   732                           ; 1 bytes @ 0x6
   733  0076                     	ds	1
   734  0077                     ??_setup:
   735  0077                     ??_Lcd_Clear:	
   736                           ; 1 bytes @ 0x7
   737                           
   738                           
   739                           	psect	cstackBANK0
   740  0020                     __pcstackBANK0:	
   741                           ; 1 bytes @ 0x7
   742                           
   743  0020                     ??_int_osc_MHz:
   744  0020                     ??_Lcd_Cmd:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0020                     ??_Lcd_Write_Char:	
   748                           ; 1 bytes @ 0x0
   749                           
   750  0020                     ?___wmul:	
   751                           ; 1 bytes @ 0x0
   752                           
   753  0020                     ?___lwdiv:	
   754                           ; 2 bytes @ 0x0
   755                           
   756  0020                     ?___lldiv:	
   757                           ; 2 bytes @ 0x0
   758                           
   759  0020                     _isdigit$842:	
   760                           ; 4 bytes @ 0x0
   761                           
   762  0020                     ___wmul@multiplier:	
   763                           ; 1 bytes @ 0x0
   764                           
   765  0020                     ___lwdiv@divisor:	
   766                           ; 2 bytes @ 0x0
   767                           
   768  0020                     ___lldiv@divisor:	
   769                           ; 2 bytes @ 0x0
   770                           
   771                           
   772                           ; 4 bytes @ 0x0
   773  0020                     	ds	1
   774  0021                     Lcd_Cmd@a:
   775  0021                     Lcd_Write_Char@temp:	
   776                           ; 1 bytes @ 0x1
   777                           
   778  0021                     isdigit@c:	
   779                           ; 1 bytes @ 0x1
   780                           
   781                           
   782                           ; 1 bytes @ 0x1
   783  0021                     	ds	1
   784  0022                     ?_Lcd_Set_Cursor:
   785  0022                     ??_Lcd_Init:	
   786                           ; 1 bytes @ 0x2
   787                           
   788  0022                     Lcd_Set_Cursor@b:	
   789                           ; 1 bytes @ 0x2
   790                           
   791  0022                     Lcd_Write_Char@y:	
   792                           ; 1 bytes @ 0x2
   793                           
   794  0022                     ___wmul@multiplicand:	
   795                           ; 1 bytes @ 0x2
   796                           
   797  0022                     ___lwdiv@dividend:	
   798                           ; 2 bytes @ 0x2
   799                           
   800                           
   801                           ; 2 bytes @ 0x2
   802  0022                     	ds	1
   803  0023                     ??_Lcd_Set_Cursor:
   804  0023                     Lcd_Write_Char@a:	
   805                           ; 1 bytes @ 0x3
   806                           
   807                           
   808                           ; 1 bytes @ 0x3
   809  0023                     	ds	1
   810  0024                     ??_Lcd_Write_String:
   811  0024                     ___wmul@product:	
   812                           ; 1 bytes @ 0x4
   813                           
   814  0024                     ___lwdiv@quotient:	
   815                           ; 2 bytes @ 0x4
   816                           
   817  0024                     ___lldiv@dividend:	
   818                           ; 2 bytes @ 0x4
   819                           
   820                           
   821                           ; 4 bytes @ 0x4
   822  0024                     	ds	1
   823  0025                     Lcd_Set_Cursor@a:
   824  0025                     Lcd_Write_String@i:	
   825                           ; 1 bytes @ 0x5
   826                           
   827                           
   828                           ; 2 bytes @ 0x5
   829  0025                     	ds	1
   830  0026                     Lcd_Set_Cursor@z:
   831  0026                     ___lwdiv@counter:	
   832                           ; 1 bytes @ 0x6
   833                           
   834                           
   835                           ; 1 bytes @ 0x6
   836  0026                     	ds	1
   837  0027                     ?___lwmod:
   838  0027                     Lcd_Set_Cursor@y:	
   839                           ; 2 bytes @ 0x7
   840                           
   841  0027                     Lcd_Write_String@a:	
   842                           ; 1 bytes @ 0x7
   843                           
   844  0027                     ___lwmod@divisor:	
   845                           ; 1 bytes @ 0x7
   846                           
   847                           
   848                           ; 2 bytes @ 0x7
   849  0027                     	ds	1
   850  0028                     Lcd_Set_Cursor@temp:
   851  0028                     ___lldiv@quotient:	
   852                           ; 1 bytes @ 0x8
   853                           
   854                           
   855                           ; 4 bytes @ 0x8
   856  0028                     	ds	1
   857  0029                     ___lwmod@dividend:
   858                           
   859                           ; 2 bytes @ 0x9
   860  0029                     	ds	2
   861  002B                     ??___lwmod:
   862                           
   863                           ; 1 bytes @ 0xB
   864  002B                     	ds	1
   865  002C                     ___lldiv@counter:
   866  002C                     ___lwmod@counter:	
   867                           ; 1 bytes @ 0xC
   868                           
   869                           
   870                           ; 1 bytes @ 0xC
   871  002C                     	ds	1
   872  002D                     ?_USART_set:
   873  002D                     ?_sprintf:	
   874                           ; 1 bytes @ 0xD
   875                           
   876  002D                     sprintf@f:	
   877                           ; 2 bytes @ 0xD
   878                           
   879  002D                     USART_set@baudrate:	
   880                           ; 1 bytes @ 0xD
   881                           
   882                           
   883                           ; 4 bytes @ 0xD
   884  002D                     	ds	4
   885  0031                     ??_USART_set:
   886                           
   887                           ; 1 bytes @ 0x11
   888  0031                     	ds	3
   889  0034                     ??_sprintf:
   890                           
   891                           ; 1 bytes @ 0x14
   892  0034                     	ds	3
   893  0037                     sprintf@ap:
   894                           
   895                           ; 1 bytes @ 0x17
   896  0037                     	ds	1
   897  0038                     sprintf@prec:
   898                           
   899                           ; 1 bytes @ 0x18
   900  0038                     	ds	1
   901  0039                     sprintf@val:
   902                           
   903                           ; 2 bytes @ 0x19
   904  0039                     	ds	2
   905  003B                     sprintf@flag:
   906                           
   907                           ; 1 bytes @ 0x1B
   908  003B                     	ds	1
   909  003C                     sprintf@width:
   910                           
   911                           ; 2 bytes @ 0x1C
   912  003C                     	ds	2
   913  003E                     sprintf@sp:
   914                           
   915                           ; 1 bytes @ 0x1E
   916  003E                     	ds	1
   917  003F                     sprintf@c:
   918                           
   919                           ; 1 bytes @ 0x1F
   920  003F                     	ds	1
   921  0040                     ??_main:
   922                           
   923                           ; 1 bytes @ 0x20
   924  0040                     	ds	1
   925                           
   926                           	psect	maintext
   927  021F                     __pmaintext:	
   928 ;;
   929 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   930 ;;
   931 ;; *************** function _main *****************
   932 ;; Defined at:
   933 ;;		line 83 in file "main_master_p1.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;		None
   936 ;; Auto vars:     Size  Location     Type
   937 ;;		None
   938 ;; Return value:  Size  Location     Type
   939 ;;                  1    wreg      void 
   940 ;; Registers used:
   941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   942 ;; Tracked objects:
   943 ;;		On entry : B00/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   947 ;;      Params:         0       0       0       0       0
   948 ;;      Locals:         0       0       0       0       0
   949 ;;      Temps:          0       1       0       0       0
   950 ;;      Totals:         0       1       0       0       0
   951 ;;Total ram usage:        1 bytes
   952 ;; Hardware stack levels required when called: 6
   953 ;; This function calls:
   954 ;;		_Lcd_Clear
   955 ;;		_Lcd_Set_Cursor
   956 ;;		_Lcd_Write_String
   957 ;;		_setup
   958 ;;		_sprintf
   959 ;; This function is called by:
   960 ;;		Startup code after reset
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964  021F                     _main:	
   965                           ;psect for function _main
   966                           
   967  021F                     l2122:	
   968                           ;incstack = 0
   969                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   970                           
   971                           
   972                           ;main_master_p1.c: 84:     setup();
   973  021F  120A  118A  25C5  120A  118A  	fcall	_setup
   974  0224                     l2124:
   975                           
   976                           ;main_master_p1.c: 85:     Lcd_Clear();
   977  0224  120A  118A  267A  120A  118A  	fcall	_Lcd_Clear
   978  0229                     l2126:
   979                           
   980                           ;main_master_p1.c: 87:         sprintf(frow, "%02d:%02d    Luz: %02d", hrs,mins,lux);
   981  0229  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   982  022A  1283               	bcf	3,5	;RP0=0, select bank0
   983  022B  1303               	bcf	3,6	;RP1=0, select bank0
   984  022C  00C0               	movwf	??_main
   985  022D  0840               	movf	??_main,w
   986  022E  00AD               	movwf	sprintf@f
   987  022F  085C               	movf	_hrs+1,w
   988  0230  00AF               	movwf	?_sprintf+2
   989  0231  085B               	movf	_hrs,w
   990  0232  00AE               	movwf	?_sprintf+1
   991  0233  085A               	movf	_mins+1,w
   992  0234  00B1               	movwf	?_sprintf+4
   993  0235  0859               	movf	_mins,w
   994  0236  00B0               	movwf	?_sprintf+3
   995  0237  0842               	movf	_lux+1,w
   996  0238  00B3               	movwf	?_sprintf+6
   997  0239  0841               	movf	_lux,w
   998  023A  00B2               	movwf	?_sprintf+5
   999  023B  3045               	movlw	(low (_frow| 0))& (0+255)
  1000  023C  120A  118A  204B  120A  118A  	fcall	_sprintf
  1001  0241                     l2128:
  1002                           
  1003                           ;main_master_p1.c: 88:         sprintf(srow, "Mov: %d  Temp: %02d",mov,temp);
  1004  0241  3022               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1005  0242  1283               	bcf	3,5	;RP0=0, select bank0
  1006  0243  1303               	bcf	3,6	;RP1=0, select bank0
  1007  0244  00C0               	movwf	??_main
  1008  0245  0840               	movf	??_main,w
  1009  0246  00AD               	movwf	sprintf@f
  1010  0247  0844               	movf	_mov+1,w
  1011  0248  00AF               	movwf	?_sprintf+2
  1012  0249  0843               	movf	_mov,w
  1013  024A  00AE               	movwf	?_sprintf+1
  1014  024B  085E               	movf	_temp+1,w
  1015  024C  00B1               	movwf	?_sprintf+4
  1016  024D  085D               	movf	_temp,w
  1017  024E  00B0               	movwf	?_sprintf+3
  1018  024F  30A0               	movlw	(low (_srow| 0))& (0+255)
  1019  0250  120A  118A  204B  120A  118A  	fcall	_sprintf
  1020  0255                     l2130:
  1021                           
  1022                           ;main_master_p1.c: 89:         Lcd_Set_Cursor(1,1);
  1023  0255  1283               	bcf	3,5	;RP0=0, select bank0
  1024  0256  1303               	bcf	3,6	;RP1=0, select bank0
  1025  0257  01A2               	clrf	Lcd_Set_Cursor@b
  1026  0258  0AA2               	incf	Lcd_Set_Cursor@b,f
  1027  0259  3001               	movlw	1
  1028  025A  120A  118A  2368  120A  118A  	fcall	_Lcd_Set_Cursor
  1029                           
  1030                           ;main_master_p1.c: 90:         Lcd_Write_String(frow);
  1031  025F  3045               	movlw	(low (_frow| 0))& (0+255)
  1032  0260  120A  118A  25EA  120A  118A  	fcall	_Lcd_Write_String
  1033  0265                     l2132:
  1034                           
  1035                           ;main_master_p1.c: 91:         Lcd_Set_Cursor(2,1);
  1036  0265  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0266  1303               	bcf	3,6	;RP1=0, select bank0
  1038  0267  01A2               	clrf	Lcd_Set_Cursor@b
  1039  0268  0AA2               	incf	Lcd_Set_Cursor@b,f
  1040  0269  3002               	movlw	2
  1041  026A  120A  118A  2368  120A  118A  	fcall	_Lcd_Set_Cursor
  1042  026F                     l2134:
  1043                           
  1044                           ;main_master_p1.c: 92:         Lcd_Write_String(srow);
  1045  026F  30A0               	movlw	(low (_srow| 0))& (0+255)
  1046  0270  120A  118A  25EA  120A  118A  	fcall	_Lcd_Write_String
  1047  0275                     l2136:
  1048                           
  1049                           ;main_master_p1.c: 94:         if(lux <= 6)
  1050  0275  1283               	bcf	3,5	;RP0=0, select bank0
  1051  0276  1303               	bcf	3,6	;RP1=0, select bank0
  1052  0277  0842               	movf	_lux+1,w
  1053  0278  3A80               	xorlw	128
  1054  0279  00FF               	movwf	btemp+1
  1055  027A  3080               	movlw	128
  1056  027B  027F               	subwf	btemp+1,w
  1057  027C  1D03               	skipz
  1058  027D  2A80               	goto	u1555
  1059  027E  3007               	movlw	7
  1060  027F  0241               	subwf	_lux,w
  1061  0280                     u1555:
  1062  0280  1803               	skipnc
  1063  0281  2A83               	goto	u1551
  1064  0282  2A84               	goto	u1550
  1065  0283                     u1551:
  1066  0283  2A89               	goto	l2140
  1067  0284                     u1550:
  1068  0284                     l2138:
  1069                           
  1070                           ;main_master_p1.c: 95:             PORTB = 0xFF;
  1071  0284  30FF               	movlw	255
  1072  0285  1283               	bcf	3,5	;RP0=0, select bank0
  1073  0286  1303               	bcf	3,6	;RP1=0, select bank0
  1074  0287  0086               	movwf	6	;volatile
  1075  0288  2A29               	goto	l2126
  1076  0289                     l2140:
  1077                           
  1078                           ;main_master_p1.c: 97:             PORTB = 0x00;
  1079  0289  1283               	bcf	3,5	;RP0=0, select bank0
  1080  028A  1303               	bcf	3,6	;RP1=0, select bank0
  1081  028B  0186               	clrf	6	;volatile
  1082  028C  2A29               	goto	l2126
  1083  028D  120A  118A  280E   	ljmp	start
  1084  0290                     __end_of_main:
  1085                           
  1086                           	psect	text1
  1087  004B                     __ptext1:	
  1088 ;; *************** function _sprintf *****************
  1089 ;; Defined at:
  1090 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;  sp              1    wreg     PTR unsigned char 
  1093 ;;		 -> srow(20), frow(20), 
  1094 ;;  f               1   13[BANK0 ] PTR const unsigned char 
  1095 ;;		 -> STR_2(20), STR_1(23), 
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  1098 ;;		 -> srow(20), frow(20), 
  1099 ;;  tmpval          4    0        struct .
  1100 ;;  width           2   28[BANK0 ] int 
  1101 ;;  val             2   25[BANK0 ] unsigned int 
  1102 ;;  cp              2    0        PTR const unsigned char 
  1103 ;;  len             2    0        unsigned int 
  1104 ;;  c               1   31[BANK0 ] unsigned char 
  1105 ;;  flag            1   27[BANK0 ] unsigned char 
  1106 ;;  prec            1   24[BANK0 ] char 
  1107 ;;  ap              1   23[BANK0 ] PTR void [1]
  1108 ;;		 -> ?_sprintf(2), 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  2   13[BANK0 ] int 
  1111 ;; Registers used:
  1112 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1118 ;;      Params:         0       7       0       0       0
  1119 ;;      Locals:         0       9       0       0       0
  1120 ;;      Temps:          0       3       0       0       0
  1121 ;;      Totals:         0      19       0       0       0
  1122 ;;Total ram usage:       19 bytes
  1123 ;; Hardware stack levels used: 1
  1124 ;; Hardware stack levels required when called: 3
  1125 ;; This function calls:
  1126 ;;		___lwdiv
  1127 ;;		___lwmod
  1128 ;;		___wmul
  1129 ;;		_isdigit
  1130 ;; This function is called by:
  1131 ;;		_main
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135  004B                     _sprintf:	
  1136                           ;psect for function _sprintf
  1137                           
  1138                           
  1139                           ;incstack = 0
  1140                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1141                           ;sprintf@sp stored from wreg
  1142  004B  1283               	bcf	3,5	;RP0=0, select bank0
  1143  004C  1303               	bcf	3,6	;RP1=0, select bank0
  1144  004D  00BE               	movwf	sprintf@sp
  1145  004E                     l1976:
  1146                           
  1147                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1148  004E  302E               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1149  004F  00B4               	movwf	??_sprintf
  1150  0050  0834               	movf	??_sprintf,w
  1151  0051  00B7               	movwf	sprintf@ap
  1152                           
  1153                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1154  0052  2A08               	goto	l2080
  1155  0053                     l1978:
  1156                           
  1157                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1158  0053  3025               	movlw	37
  1159  0054  063F               	xorwf	sprintf@c,w
  1160  0055  1903               	btfsc	3,2
  1161  0056  2858               	goto	u1321
  1162  0057  2859               	goto	u1320
  1163  0058                     u1321:
  1164  0058  2865               	goto	l1984
  1165  0059                     u1320:
  1166  0059                     l1980:
  1167                           
  1168                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1169  0059  083F               	movf	sprintf@c,w
  1170  005A  00B4               	movwf	??_sprintf
  1171  005B  083E               	movf	sprintf@sp,w
  1172  005C  0084               	movwf	4
  1173  005D  0834               	movf	??_sprintf,w
  1174  005E  1383               	bcf	3,7	;select IRP bank0
  1175  005F  0080               	movwf	0
  1176  0060                     l1982:
  1177  0060  3001               	movlw	1
  1178  0061  00B4               	movwf	??_sprintf
  1179  0062  0834               	movf	??_sprintf,w
  1180  0063  07BE               	addwf	sprintf@sp,f
  1181                           
  1182                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 559:    continue;
  1183  0064  2A08               	goto	l2080
  1184  0065                     l1984:
  1185                           
  1186                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1187  0065  01BC               	clrf	sprintf@width
  1188  0066  01BD               	clrf	sprintf@width+1
  1189                           
  1190                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1191  0067  01BB               	clrf	sprintf@flag
  1192  0068  286E               	goto	l1990
  1193  0069                     l264:	
  1194                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 596:    case '0':
  1195                           
  1196                           
  1197                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  1198  0069  153B               	bsf	sprintf@flag,2
  1199  006A                     l1986:
  1200                           
  1201                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 598:     f++;
  1202  006A  3001               	movlw	1
  1203  006B  00B4               	movwf	??_sprintf
  1204  006C  0834               	movf	??_sprintf,w
  1205  006D  07AD               	addwf	sprintf@f,f
  1206  006E                     l1990:	
  1207                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  1208                           
  1209  006E  082D               	movf	sprintf@f,w
  1210  006F  0084               	movwf	4
  1211  0070  120A  118A  2563  120A  118A  	fcall	stringdir
  1212  0075  00B4               	movwf	??_sprintf
  1213  0076  01B5               	clrf	??_sprintf+1
  1214                           
  1215                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1216                           ; Switch size 1, requested type "simple"
  1217                           ; Number of cases is 1, Range of values is 0 to 0
  1218                           ; switch strategies available:
  1219                           ; Name         Instructions Cycles
  1220                           ; simple_byte            4     3 (average)
  1221                           ; direct_byte           11     8 (fixed)
  1222                           ; jumptable            260     6 (fixed)
  1223                           ;	Chosen strategy is simple_byte
  1224  0077  0835               	movf	??_sprintf+1,w
  1225  0078  3A00               	xorlw	0	; case 0
  1226  0079  1903               	skipnz
  1227  007A  287C               	goto	l2226
  1228  007B  2881               	goto	l1992
  1229  007C                     l2226:
  1230                           
  1231                           ; Switch size 1, requested type "simple"
  1232                           ; Number of cases is 1, Range of values is 48 to 48
  1233                           ; switch strategies available:
  1234                           ; Name         Instructions Cycles
  1235                           ; simple_byte            4     3 (average)
  1236                           ; direct_byte           14    11 (fixed)
  1237                           ; jumptable            263     9 (fixed)
  1238                           ;	Chosen strategy is simple_byte
  1239  007C  0834               	movf	??_sprintf,w
  1240  007D  3A30               	xorlw	48	; case 48
  1241  007E  1903               	skipnz
  1242  007F  2869               	goto	l264
  1243  0080  2881               	goto	l1992
  1244  0081                     l1992:
  1245                           
  1246                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1247  0081  082D               	movf	sprintf@f,w
  1248  0082  0084               	movwf	4
  1249  0083  120A  118A  2563  120A  118A  	fcall	stringdir
  1250  0088  120A  118A  2666  120A  118A  	fcall	_isdigit
  1251  008D  1C03               	btfss	3,0
  1252  008E  2890               	goto	u1331
  1253  008F  2891               	goto	u1330
  1254  0090                     u1331:
  1255  0090  28D1               	goto	l2006
  1256  0091                     u1330:
  1257  0091                     l1994:
  1258                           
  1259                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1260  0091  1283               	bcf	3,5	;RP0=0, select bank0
  1261  0092  1303               	bcf	3,6	;RP1=0, select bank0
  1262  0093  01BC               	clrf	sprintf@width
  1263  0094  01BD               	clrf	sprintf@width+1
  1264  0095                     l1996:
  1265                           
  1266                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1267  0095  300A               	movlw	10
  1268  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1269  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1270  0098  00A0               	movwf	___wmul@multiplier
  1271  0099  3000               	movlw	0
  1272  009A  00A1               	movwf	___wmul@multiplier+1
  1273  009B  083D               	movf	sprintf@width+1,w
  1274  009C  00A3               	movwf	___wmul@multiplicand+1
  1275  009D  083C               	movf	sprintf@width,w
  1276  009E  00A2               	movwf	___wmul@multiplicand
  1277  009F  120A  118A  259E  120A  118A  	fcall	___wmul
  1278  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1279  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1280  00A6  0821               	movf	?___wmul+1,w
  1281  00A7  00BD               	movwf	sprintf@width+1
  1282  00A8  0820               	movf	?___wmul,w
  1283  00A9  00BC               	movwf	sprintf@width
  1284  00AA                     l1998:
  1285                           
  1286                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1287  00AA  082D               	movf	sprintf@f,w
  1288  00AB  0084               	movwf	4
  1289  00AC  120A  118A  2563  120A  118A  	fcall	stringdir
  1290  00B1  3ED0               	addlw	208
  1291  00B2  00B4               	movwf	??_sprintf
  1292  00B3  30FF               	movlw	255
  1293  00B4  1803               	skipnc
  1294  00B5  3000               	movlw	0
  1295  00B6  00B5               	movwf	??_sprintf+1
  1296  00B7  0834               	movf	??_sprintf,w
  1297  00B8  07BC               	addwf	sprintf@width,f
  1298  00B9  1803               	skipnc
  1299  00BA  0ABD               	incf	sprintf@width+1,f
  1300  00BB  0835               	movf	??_sprintf+1,w
  1301  00BC  07BD               	addwf	sprintf@width+1,f
  1302  00BD                     l2000:
  1303  00BD  3001               	movlw	1
  1304  00BE  00B4               	movwf	??_sprintf
  1305  00BF  0834               	movf	??_sprintf,w
  1306  00C0  07AD               	addwf	sprintf@f,f
  1307  00C1                     l2002:
  1308                           
  1309                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1310  00C1  082D               	movf	sprintf@f,w
  1311  00C2  0084               	movwf	4
  1312  00C3  120A  118A  2563  120A  118A  	fcall	stringdir
  1313  00C8  120A  118A  2666  120A  118A  	fcall	_isdigit
  1314  00CD  1803               	btfsc	3,0
  1315  00CE  28D0               	goto	u1341
  1316  00CF  28D1               	goto	u1340
  1317  00D0                     u1341:
  1318  00D0  2895               	goto	l1996
  1319  00D1                     u1340:
  1320  00D1                     l2006:
  1321  00D1  3001               	movlw	1
  1322  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1323  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1324  00D4  07AD               	addwf	sprintf@f,f
  1325  00D5  30FF               	movlw	-1
  1326  00D6  072D               	addwf	sprintf@f,w
  1327  00D7  0084               	movwf	4
  1328  00D8  120A  118A  2563  120A  118A  	fcall	stringdir
  1329  00DD  00BF               	movwf	sprintf@c
  1330  00DE  00B4               	movwf	??_sprintf
  1331  00DF  01B5               	clrf	??_sprintf+1
  1332                           
  1333                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1334                           ; Switch size 1, requested type "simple"
  1335                           ; Number of cases is 1, Range of values is 0 to 0
  1336                           ; switch strategies available:
  1337                           ; Name         Instructions Cycles
  1338                           ; simple_byte            4     3 (average)
  1339                           ; direct_byte           11     8 (fixed)
  1340                           ; jumptable            260     6 (fixed)
  1341                           ;	Chosen strategy is simple_byte
  1342  00E0  0835               	movf	??_sprintf+1,w
  1343  00E1  3A00               	xorlw	0	; case 0
  1344  00E2  1903               	skipnz
  1345  00E3  28E5               	goto	l2228
  1346  00E4  2A08               	goto	l2080
  1347  00E5                     l2228:
  1348                           
  1349                           ; Switch size 1, requested type "simple"
  1350                           ; Number of cases is 3, Range of values is 0 to 105
  1351                           ; switch strategies available:
  1352                           ; Name         Instructions Cycles
  1353                           ; simple_byte           10     6 (average)
  1354                           ; jumptable            260     6 (fixed)
  1355                           ;	Chosen strategy is simple_byte
  1356  00E5  0834               	movf	??_sprintf,w
  1357  00E6  3A00               	xorlw	0	; case 0
  1358  00E7  1903               	skipnz
  1359  00E8  2A1A               	goto	l2082
  1360  00E9  3A64               	xorlw	100	; case 100
  1361  00EA  1903               	skipnz
  1362  00EB  28F0               	goto	l2008
  1363  00EC  3A0D               	xorlw	13	; case 105
  1364  00ED  1903               	skipnz
  1365  00EE  28F0               	goto	l2008
  1366  00EF  2A08               	goto	l2080
  1367  00F0                     l2008:
  1368                           
  1369                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1370  00F0  0837               	movf	sprintf@ap,w
  1371  00F1  0084               	movwf	4
  1372  00F2  1383               	bcf	3,7	;select IRP bank0
  1373  00F3  0800               	movf	0,w
  1374  00F4  00B9               	movwf	sprintf@val
  1375  00F5  0A84               	incf	4,f
  1376  00F6  0800               	movf	0,w
  1377  00F7  00BA               	movwf	sprintf@val+1
  1378  00F8                     l2010:
  1379  00F8  3002               	movlw	2
  1380  00F9  00B4               	movwf	??_sprintf
  1381  00FA  0834               	movf	??_sprintf,w
  1382  00FB  07B7               	addwf	sprintf@ap,f
  1383  00FC                     l2012:
  1384                           
  1385                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1386  00FC  1FBA               	btfss	sprintf@val+1,7
  1387  00FD  28FF               	goto	u1351
  1388  00FE  2900               	goto	u1350
  1389  00FF                     u1351:
  1390  00FF  2909               	goto	l2018
  1391  0100                     u1350:
  1392  0100                     l2014:
  1393                           
  1394                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1395  0100  3003               	movlw	3
  1396  0101  00B4               	movwf	??_sprintf
  1397  0102  0834               	movf	??_sprintf,w
  1398  0103  04BB               	iorwf	sprintf@flag,f
  1399  0104                     l2016:
  1400                           
  1401                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1402  0104  09B9               	comf	sprintf@val,f
  1403  0105  09BA               	comf	sprintf@val+1,f
  1404  0106  0AB9               	incf	sprintf@val,f
  1405  0107  1903               	skipnz
  1406  0108  0ABA               	incf	sprintf@val+1,f
  1407  0109                     l2018:
  1408                           
  1409                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1410  0109  01BF               	clrf	sprintf@c
  1411  010A  0ABF               	incf	sprintf@c,f
  1412  010B                     l2024:
  1413                           
  1414                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1415  010B  083F               	movf	sprintf@c,w
  1416  010C  00B4               	movwf	??_sprintf
  1417  010D  0734               	addwf	??_sprintf,w
  1418  010E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1419  010F  0084               	movwf	4
  1420  0110  120A  118A  2563  120A  118A  	fcall	stringdir
  1421  0115  00B5               	movwf	??_sprintf+1
  1422  0116  120A  118A  2563  120A  118A  	fcall	stringdir
  1423  011B  00B6               	movwf	??_sprintf+2
  1424  011C  0836               	movf	??_sprintf+2,w
  1425  011D  023A               	subwf	sprintf@val+1,w
  1426  011E  1D03               	skipz
  1427  011F  2922               	goto	u1365
  1428  0120  0835               	movf	??_sprintf+1,w
  1429  0121  0239               	subwf	sprintf@val,w
  1430  0122                     u1365:
  1431  0122  1803               	skipnc
  1432  0123  2925               	goto	u1361
  1433  0124  2926               	goto	u1360
  1434  0125                     u1361:
  1435  0125  2927               	goto	l2028
  1436  0126                     u1360:
  1437  0126  2931               	goto	l2030
  1438  0127                     l2028:
  1439  0127  3001               	movlw	1
  1440  0128  00B4               	movwf	??_sprintf
  1441  0129  0834               	movf	??_sprintf,w
  1442  012A  07BF               	addwf	sprintf@c,f
  1443  012B  3005               	movlw	5
  1444  012C  063F               	xorwf	sprintf@c,w
  1445  012D  1D03               	btfss	3,2
  1446  012E  2930               	goto	u1371
  1447  012F  2931               	goto	u1370
  1448  0130                     u1371:
  1449  0130  290B               	goto	l2024
  1450  0131                     u1370:
  1451  0131                     l2030:
  1452                           
  1453                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1454  0131  083C               	movf	sprintf@width,w
  1455  0132  043D               	iorwf	sprintf@width+1,w
  1456  0133  1903               	btfsc	3,2
  1457  0134  2936               	goto	u1381
  1458  0135  2937               	goto	u1380
  1459  0136                     u1381:
  1460  0136  2943               	goto	l282
  1461  0137                     u1380:
  1462  0137                     l2032:
  1463  0137  083B               	movf	sprintf@flag,w
  1464  0138  3903               	andlw	3
  1465  0139  1903               	btfsc	3,2
  1466  013A  293C               	goto	u1391
  1467  013B  293D               	goto	u1390
  1468  013C                     u1391:
  1469  013C  2943               	goto	l282
  1470  013D                     u1390:
  1471  013D                     l2034:
  1472                           
  1473                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1474  013D  30FF               	movlw	255
  1475  013E  07BC               	addwf	sprintf@width,f
  1476  013F  1803               	skipnc
  1477  0140  0ABD               	incf	sprintf@width+1,f
  1478  0141  30FF               	movlw	255
  1479  0142  07BD               	addwf	sprintf@width+1,f
  1480  0143                     l282:
  1481                           
  1482                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1483  0143  083D               	movf	sprintf@width+1,w
  1484  0144  3A80               	xorlw	128
  1485  0145  3C80               	sublw	128
  1486  0146  1D03               	skipz
  1487  0147  294A               	goto	u1405
  1488  0148  083C               	movf	sprintf@width,w
  1489  0149  023F               	subwf	sprintf@c,w
  1490  014A                     u1405:
  1491  014A  1803               	skipnc
  1492  014B  294D               	goto	u1401
  1493  014C  294E               	goto	u1400
  1494  014D                     u1401:
  1495  014D  295A               	goto	l2038
  1496  014E                     u1400:
  1497  014E                     l2036:
  1498                           
  1499                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1500  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1501  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1502  0150  083F               	movf	sprintf@c,w
  1503  0151  00B4               	movwf	??_sprintf
  1504  0152  01B5               	clrf	??_sprintf+1
  1505  0153  0834               	movf	??_sprintf,w
  1506  0154  02BC               	subwf	sprintf@width,f
  1507  0155  0835               	movf	??_sprintf+1,w
  1508  0156  1C03               	skipc
  1509  0157  03BD               	decf	sprintf@width+1,f
  1510  0158  02BD               	subwf	sprintf@width+1,f
  1511  0159  295E               	goto	l2040
  1512  015A                     l2038:
  1513                           
  1514                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1515  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1516  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1517  015C  01BC               	clrf	sprintf@width
  1518  015D  01BD               	clrf	sprintf@width+1
  1519  015E                     l2040:
  1520                           
  1521                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1522  015E  1D3B               	btfss	sprintf@flag,2
  1523  015F  2961               	goto	u1411
  1524  0160  2962               	goto	u1410
  1525  0161                     u1411:
  1526  0161  2991               	goto	l2056
  1527  0162                     u1410:
  1528  0162                     l2042:
  1529                           
  1530                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1531  0162  083B               	movf	sprintf@flag,w
  1532  0163  3903               	andlw	3
  1533  0164  1903               	btfsc	3,2
  1534  0165  2967               	goto	u1421
  1535  0166  2968               	goto	u1420
  1536  0167                     u1421:
  1537  0167  2973               	goto	l2048
  1538  0168                     u1420:
  1539  0168                     l2044:
  1540                           
  1541                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1542  0168  302D               	movlw	45
  1543  0169  00B4               	movwf	??_sprintf
  1544  016A  083E               	movf	sprintf@sp,w
  1545  016B  0084               	movwf	4
  1546  016C  0834               	movf	??_sprintf,w
  1547  016D  1383               	bcf	3,7	;select IRP bank0
  1548  016E  0080               	movwf	0
  1549  016F                     l2046:
  1550  016F  3001               	movlw	1
  1551  0170  00B4               	movwf	??_sprintf
  1552  0171  0834               	movf	??_sprintf,w
  1553  0172  07BE               	addwf	sprintf@sp,f
  1554  0173                     l2048:
  1555                           
  1556                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1557  0173  083C               	movf	sprintf@width,w
  1558  0174  043D               	iorwf	sprintf@width+1,w
  1559  0175  1903               	btfsc	3,2
  1560  0176  2978               	goto	u1431
  1561  0177  2979               	goto	u1430
  1562  0178                     u1431:
  1563  0178  29BF               	goto	l2070
  1564  0179                     u1430:
  1565  0179                     l2050:
  1566                           
  1567                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1568  0179  3030               	movlw	48
  1569  017A  00B4               	movwf	??_sprintf
  1570  017B  083E               	movf	sprintf@sp,w
  1571  017C  0084               	movwf	4
  1572  017D  0834               	movf	??_sprintf,w
  1573  017E  1383               	bcf	3,7	;select IRP bank0
  1574  017F  0080               	movwf	0
  1575  0180                     l2052:
  1576  0180  3001               	movlw	1
  1577  0181  00B4               	movwf	??_sprintf
  1578  0182  0834               	movf	??_sprintf,w
  1579  0183  07BE               	addwf	sprintf@sp,f
  1580  0184                     l2054:
  1581  0184  30FF               	movlw	255
  1582  0185  07BC               	addwf	sprintf@width,f
  1583  0186  1803               	skipnc
  1584  0187  0ABD               	incf	sprintf@width+1,f
  1585  0188  30FF               	movlw	255
  1586  0189  07BD               	addwf	sprintf@width+1,f
  1587  018A  083C               	movf	sprintf@width,w
  1588  018B  043D               	iorwf	sprintf@width+1,w
  1589  018C  1D03               	btfss	3,2
  1590  018D  298F               	goto	u1441
  1591  018E  2990               	goto	u1440
  1592  018F                     u1441:
  1593  018F  2979               	goto	l2050
  1594  0190                     u1440:
  1595  0190  29BF               	goto	l2070
  1596  0191                     l2056:
  1597                           
  1598                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1599  0191  083C               	movf	sprintf@width,w
  1600  0192  043D               	iorwf	sprintf@width+1,w
  1601  0193  1903               	btfsc	3,2
  1602  0194  2996               	goto	u1451
  1603  0195  2997               	goto	u1450
  1604  0196                     u1451:
  1605  0196  29AE               	goto	l2064
  1606  0197                     u1450:
  1607  0197                     l2058:
  1608                           
  1609                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1610  0197  3020               	movlw	32
  1611  0198  00B4               	movwf	??_sprintf
  1612  0199  083E               	movf	sprintf@sp,w
  1613  019A  0084               	movwf	4
  1614  019B  0834               	movf	??_sprintf,w
  1615  019C  1383               	bcf	3,7	;select IRP bank0
  1616  019D  0080               	movwf	0
  1617  019E                     l2060:
  1618  019E  3001               	movlw	1
  1619  019F  00B4               	movwf	??_sprintf
  1620  01A0  0834               	movf	??_sprintf,w
  1621  01A1  07BE               	addwf	sprintf@sp,f
  1622  01A2                     l2062:
  1623  01A2  30FF               	movlw	255
  1624  01A3  07BC               	addwf	sprintf@width,f
  1625  01A4  1803               	skipnc
  1626  01A5  0ABD               	incf	sprintf@width+1,f
  1627  01A6  30FF               	movlw	255
  1628  01A7  07BD               	addwf	sprintf@width+1,f
  1629  01A8  083C               	movf	sprintf@width,w
  1630  01A9  043D               	iorwf	sprintf@width+1,w
  1631  01AA  1D03               	btfss	3,2
  1632  01AB  29AD               	goto	u1461
  1633  01AC  29AE               	goto	u1460
  1634  01AD                     u1461:
  1635  01AD  2997               	goto	l2058
  1636  01AE                     u1460:
  1637  01AE                     l2064:
  1638                           
  1639                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1640  01AE  083B               	movf	sprintf@flag,w
  1641  01AF  3903               	andlw	3
  1642  01B0  1903               	btfsc	3,2
  1643  01B1  29B3               	goto	u1471
  1644  01B2  29B4               	goto	u1470
  1645  01B3                     u1471:
  1646  01B3  29BF               	goto	l2070
  1647  01B4                     u1470:
  1648  01B4                     l2066:
  1649                           
  1650                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1651  01B4  302D               	movlw	45
  1652  01B5  00B4               	movwf	??_sprintf
  1653  01B6  083E               	movf	sprintf@sp,w
  1654  01B7  0084               	movwf	4
  1655  01B8  0834               	movf	??_sprintf,w
  1656  01B9  1383               	bcf	3,7	;select IRP bank0
  1657  01BA  0080               	movwf	0
  1658  01BB                     l2068:
  1659  01BB  3001               	movlw	1
  1660  01BC  00B4               	movwf	??_sprintf
  1661  01BD  0834               	movf	??_sprintf,w
  1662  01BE  07BE               	addwf	sprintf@sp,f
  1663  01BF                     l2070:
  1664                           
  1665                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1666  01BF  083F               	movf	sprintf@c,w
  1667  01C0  00B4               	movwf	??_sprintf
  1668  01C1  0834               	movf	??_sprintf,w
  1669  01C2  00B8               	movwf	sprintf@prec
  1670                           
  1671                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1672  01C3  29FF               	goto	l2078
  1673  01C4                     l2072:
  1674                           
  1675                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1676  01C4  300A               	movlw	10
  1677  01C5  00A7               	movwf	___lwmod@divisor
  1678  01C6  3000               	movlw	0
  1679  01C7  00A8               	movwf	___lwmod@divisor+1
  1680  01C8  0838               	movf	sprintf@prec,w
  1681  01C9  00B4               	movwf	??_sprintf
  1682  01CA  0734               	addwf	??_sprintf,w
  1683  01CB  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1684  01CC  0084               	movwf	4
  1685  01CD  120A  118A  2563  120A  118A  	fcall	stringdir
  1686  01D2  00A0               	movwf	___lwdiv@divisor
  1687  01D3  120A  118A  2563  120A  118A  	fcall	stringdir
  1688  01D8  00A1               	movwf	___lwdiv@divisor+1
  1689  01D9  083A               	movf	sprintf@val+1,w
  1690  01DA  00A3               	movwf	___lwdiv@dividend+1
  1691  01DB  0839               	movf	sprintf@val,w
  1692  01DC  00A2               	movwf	___lwdiv@dividend
  1693  01DD  120A  118A  2467  120A  118A  	fcall	___lwdiv
  1694  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  1695  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  1696  01E4  0821               	movf	?___lwdiv+1,w
  1697  01E5  00AA               	movwf	___lwmod@dividend+1
  1698  01E6  0820               	movf	?___lwdiv,w
  1699  01E7  00A9               	movwf	___lwmod@dividend
  1700  01E8  120A  118A  2527  120A  118A  	fcall	___lwmod
  1701  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  1702  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  1703  01EF  0827               	movf	?___lwmod,w
  1704  01F0  3E30               	addlw	48
  1705  01F1  00B5               	movwf	??_sprintf+1
  1706  01F2  0835               	movf	??_sprintf+1,w
  1707  01F3  00BF               	movwf	sprintf@c
  1708  01F4                     l2074:
  1709                           
  1710                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1711  01F4  083F               	movf	sprintf@c,w
  1712  01F5  00B4               	movwf	??_sprintf
  1713  01F6  083E               	movf	sprintf@sp,w
  1714  01F7  0084               	movwf	4
  1715  01F8  0834               	movf	??_sprintf,w
  1716  01F9  1383               	bcf	3,7	;select IRP bank0
  1717  01FA  0080               	movwf	0
  1718  01FB                     l2076:
  1719  01FB  3001               	movlw	1
  1720  01FC  00B4               	movwf	??_sprintf
  1721  01FD  0834               	movf	??_sprintf,w
  1722  01FE  07BE               	addwf	sprintf@sp,f
  1723  01FF                     l2078:
  1724                           
  1725                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1726  01FF  30FF               	movlw	255
  1727  0200  00B4               	movwf	??_sprintf
  1728  0201  0834               	movf	??_sprintf,w
  1729  0202  07B8               	addwf	sprintf@prec,f
  1730  0203  0A38               	incf	sprintf@prec,w
  1731  0204  1D03               	btfss	3,2
  1732  0205  2A07               	goto	u1481
  1733  0206  2A08               	goto	u1480
  1734  0207                     u1481:
  1735  0207  29C4               	goto	l2072
  1736  0208                     u1480:
  1737  0208                     l2080:
  1738                           
  1739                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1740  0208  3001               	movlw	1
  1741  0209  07AD               	addwf	sprintf@f,f
  1742  020A  30FF               	movlw	-1
  1743  020B  072D               	addwf	sprintf@f,w
  1744  020C  0084               	movwf	4
  1745  020D  120A  118A  2563  120A  118A  	fcall	stringdir
  1746  0212  00B4               	movwf	??_sprintf
  1747  0213  0834               	movf	??_sprintf,w
  1748  0214  00BF               	movwf	sprintf@c
  1749  0215  083F               	movf	sprintf@c,w
  1750  0216  1D03               	btfss	3,2
  1751  0217  2A19               	goto	u1491
  1752  0218  2A1A               	goto	u1490
  1753  0219                     u1491:
  1754  0219  2853               	goto	l1978
  1755  021A                     u1490:
  1756  021A                     l2082:
  1757                           
  1758                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1759  021A  083E               	movf	sprintf@sp,w
  1760  021B  0084               	movwf	4
  1761  021C  1383               	bcf	3,7	;select IRP bank0
  1762  021D  0180               	clrf	0
  1763  021E                     l299:
  1764  021E  0008               	return
  1765  021F                     __end_of_sprintf:
  1766                           
  1767                           	psect	text2
  1768  0666                     __ptext2:	
  1769 ;; *************** function _isdigit *****************
  1770 ;; Defined at:
  1771 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\isdigit.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;  c               1    wreg     unsigned char 
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  c               1    1[BANK0 ] unsigned char 
  1776 ;; Return value:  Size  Location     Type
  1777 ;;		None               void
  1778 ;; Registers used:
  1779 ;;		wreg, status,2, status,0
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1785 ;;      Params:         0       0       0       0       0
  1786 ;;      Locals:         0       2       0       0       0
  1787 ;;      Temps:          0       0       0       0       0
  1788 ;;      Totals:         0       2       0       0       0
  1789 ;;Total ram usage:        2 bytes
  1790 ;; Hardware stack levels used: 1
  1791 ;; Hardware stack levels required when called: 2
  1792 ;; This function calls:
  1793 ;;		Nothing
  1794 ;; This function is called by:
  1795 ;;		_sprintf
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799  0666                     _isdigit:	
  1800                           ;psect for function _isdigit
  1801                           
  1802                           
  1803                           ;incstack = 0
  1804                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1805                           ;isdigit@c stored from wreg
  1806  0666  1283               	bcf	3,5	;RP0=0, select bank0
  1807  0667  1303               	bcf	3,6	;RP1=0, select bank0
  1808  0668  00A1               	movwf	isdigit@c
  1809  0669                     l1906:
  1810  0669  01A0               	clrf	_isdigit$842
  1811  066A                     l1908:
  1812  066A  303A               	movlw	58
  1813  066B  0221               	subwf	isdigit@c,w
  1814  066C  1803               	skipnc
  1815  066D  2E6F               	goto	u1201
  1816  066E  2E70               	goto	u1200
  1817  066F                     u1201:
  1818  066F  2E78               	goto	l1914
  1819  0670                     u1200:
  1820  0670                     l1910:
  1821  0670  3030               	movlw	48
  1822  0671  0221               	subwf	isdigit@c,w
  1823  0672  1C03               	skipc
  1824  0673  2E75               	goto	u1211
  1825  0674  2E76               	goto	u1210
  1826  0675                     u1211:
  1827  0675  2E78               	goto	l1914
  1828  0676                     u1210:
  1829  0676                     l1912:
  1830  0676  01A0               	clrf	_isdigit$842
  1831  0677  0AA0               	incf	_isdigit$842,f
  1832  0678                     l1914:
  1833  0678  0C20               	rrf	_isdigit$842,w
  1834  0679                     l756:
  1835  0679  0008               	return
  1836  067A                     __end_of_isdigit:
  1837                           
  1838                           	psect	text3
  1839  059E                     __ptext3:	
  1840 ;; *************** function ___wmul *****************
  1841 ;; Defined at:
  1842 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1845 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  product         2    4[BANK0 ] unsigned int 
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  2    0[BANK0 ] unsigned int 
  1850 ;; Registers used:
  1851 ;;		wreg, status,2, status,0
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1857 ;;      Params:         0       4       0       0       0
  1858 ;;      Locals:         0       2       0       0       0
  1859 ;;      Temps:          0       0       0       0       0
  1860 ;;      Totals:         0       6       0       0       0
  1861 ;;Total ram usage:        6 bytes
  1862 ;; Hardware stack levels used: 1
  1863 ;; Hardware stack levels required when called: 2
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_sprintf
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871  059E                     ___wmul:	
  1872                           ;psect for function ___wmul
  1873                           
  1874  059E                     l1918:	
  1875                           ;incstack = 0
  1876                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1877                           
  1878  059E  1283               	bcf	3,5	;RP0=0, select bank0
  1879  059F  1303               	bcf	3,6	;RP1=0, select bank0
  1880  05A0  01A4               	clrf	___wmul@product
  1881  05A1  01A5               	clrf	___wmul@product+1
  1882  05A2                     l1920:
  1883  05A2  1C20               	btfss	___wmul@multiplier,0
  1884  05A3  2DA5               	goto	u1221
  1885  05A4  2DA6               	goto	u1220
  1886  05A5                     u1221:
  1887  05A5  2DAC               	goto	l303
  1888  05A6                     u1220:
  1889  05A6                     l1922:
  1890  05A6  0822               	movf	___wmul@multiplicand,w
  1891  05A7  07A4               	addwf	___wmul@product,f
  1892  05A8  1803               	skipnc
  1893  05A9  0AA5               	incf	___wmul@product+1,f
  1894  05AA  0823               	movf	___wmul@multiplicand+1,w
  1895  05AB  07A5               	addwf	___wmul@product+1,f
  1896  05AC                     l303:
  1897  05AC  3001               	movlw	1
  1898  05AD                     u1235:
  1899  05AD  1003               	clrc
  1900  05AE  0DA2               	rlf	___wmul@multiplicand,f
  1901  05AF  0DA3               	rlf	___wmul@multiplicand+1,f
  1902  05B0  3EFF               	addlw	-1
  1903  05B1  1D03               	skipz
  1904  05B2  2DAD               	goto	u1235
  1905  05B3                     l1924:
  1906  05B3  3001               	movlw	1
  1907  05B4                     u1245:
  1908  05B4  1003               	clrc
  1909  05B5  0CA1               	rrf	___wmul@multiplier+1,f
  1910  05B6  0CA0               	rrf	___wmul@multiplier,f
  1911  05B7  3EFF               	addlw	-1
  1912  05B8  1D03               	skipz
  1913  05B9  2DB4               	goto	u1245
  1914  05BA                     l1926:
  1915  05BA  0820               	movf	___wmul@multiplier,w
  1916  05BB  0421               	iorwf	___wmul@multiplier+1,w
  1917  05BC  1D03               	btfss	3,2
  1918  05BD  2DBF               	goto	u1251
  1919  05BE  2DC0               	goto	u1250
  1920  05BF                     u1251:
  1921  05BF  2DA2               	goto	l1920
  1922  05C0                     u1250:
  1923  05C0                     l1928:
  1924  05C0  0825               	movf	___wmul@product+1,w
  1925  05C1  00A1               	movwf	?___wmul+1
  1926  05C2  0824               	movf	___wmul@product,w
  1927  05C3  00A0               	movwf	?___wmul
  1928  05C4                     l305:
  1929  05C4  0008               	return
  1930  05C5                     __end_of___wmul:
  1931                           
  1932                           	psect	text4
  1933  0527                     __ptext4:	
  1934 ;; *************** function ___lwmod *****************
  1935 ;; Defined at:
  1936 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwmod.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;  divisor         2    7[BANK0 ] unsigned int 
  1939 ;;  dividend        2    9[BANK0 ] unsigned int 
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  counter         1   12[BANK0 ] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  2    7[BANK0 ] unsigned int 
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, status,0
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1951 ;;      Params:         0       4       0       0       0
  1952 ;;      Locals:         0       1       0       0       0
  1953 ;;      Temps:          0       1       0       0       0
  1954 ;;      Totals:         0       6       0       0       0
  1955 ;;Total ram usage:        6 bytes
  1956 ;; Hardware stack levels used: 1
  1957 ;; Hardware stack levels required when called: 2
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_sprintf
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965  0527                     ___lwmod:	
  1966                           ;psect for function ___lwmod
  1967                           
  1968  0527                     l1932:	
  1969                           ;incstack = 0
  1970                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1971                           
  1972  0527  1283               	bcf	3,5	;RP0=0, select bank0
  1973  0528  1303               	bcf	3,6	;RP1=0, select bank0
  1974  0529  0827               	movf	___lwmod@divisor,w
  1975  052A  0428               	iorwf	___lwmod@divisor+1,w
  1976  052B  1903               	btfsc	3,2
  1977  052C  2D2E               	goto	u1261
  1978  052D  2D2F               	goto	u1260
  1979  052E                     u1261:
  1980  052E  2D5E               	goto	l1950
  1981  052F                     u1260:
  1982  052F                     l1934:
  1983  052F  01AC               	clrf	___lwmod@counter
  1984  0530  0AAC               	incf	___lwmod@counter,f
  1985  0531  2D3D               	goto	l1940
  1986  0532                     l1936:
  1987  0532  3001               	movlw	1
  1988  0533                     u1275:
  1989  0533  1003               	clrc
  1990  0534  0DA7               	rlf	___lwmod@divisor,f
  1991  0535  0DA8               	rlf	___lwmod@divisor+1,f
  1992  0536  3EFF               	addlw	-1
  1993  0537  1D03               	skipz
  1994  0538  2D33               	goto	u1275
  1995  0539                     l1938:
  1996  0539  3001               	movlw	1
  1997  053A  00AB               	movwf	??___lwmod
  1998  053B  082B               	movf	??___lwmod,w
  1999  053C  07AC               	addwf	___lwmod@counter,f
  2000  053D                     l1940:
  2001  053D  1FA8               	btfss	___lwmod@divisor+1,7
  2002  053E  2D40               	goto	u1281
  2003  053F  2D41               	goto	u1280
  2004  0540                     u1281:
  2005  0540  2D32               	goto	l1936
  2006  0541                     u1280:
  2007  0541                     l1942:
  2008  0541  0828               	movf	___lwmod@divisor+1,w
  2009  0542  022A               	subwf	___lwmod@dividend+1,w
  2010  0543  1D03               	skipz
  2011  0544  2D47               	goto	u1295
  2012  0545  0827               	movf	___lwmod@divisor,w
  2013  0546  0229               	subwf	___lwmod@dividend,w
  2014  0547                     u1295:
  2015  0547  1C03               	skipc
  2016  0548  2D4A               	goto	u1291
  2017  0549  2D4B               	goto	u1290
  2018  054A                     u1291:
  2019  054A  2D51               	goto	l1946
  2020  054B                     u1290:
  2021  054B                     l1944:
  2022  054B  0827               	movf	___lwmod@divisor,w
  2023  054C  02A9               	subwf	___lwmod@dividend,f
  2024  054D  0828               	movf	___lwmod@divisor+1,w
  2025  054E  1C03               	skipc
  2026  054F  03AA               	decf	___lwmod@dividend+1,f
  2027  0550  02AA               	subwf	___lwmod@dividend+1,f
  2028  0551                     l1946:
  2029  0551  3001               	movlw	1
  2030  0552                     u1305:
  2031  0552  1003               	clrc
  2032  0553  0CA8               	rrf	___lwmod@divisor+1,f
  2033  0554  0CA7               	rrf	___lwmod@divisor,f
  2034  0555  3EFF               	addlw	-1
  2035  0556  1D03               	skipz
  2036  0557  2D52               	goto	u1305
  2037  0558                     l1948:
  2038  0558  3001               	movlw	1
  2039  0559  02AC               	subwf	___lwmod@counter,f
  2040  055A  1D03               	btfss	3,2
  2041  055B  2D5D               	goto	u1311
  2042  055C  2D5E               	goto	u1310
  2043  055D                     u1311:
  2044  055D  2D41               	goto	l1942
  2045  055E                     u1310:
  2046  055E                     l1950:
  2047  055E  082A               	movf	___lwmod@dividend+1,w
  2048  055F  00A8               	movwf	?___lwmod+1
  2049  0560  0829               	movf	___lwmod@dividend,w
  2050  0561  00A7               	movwf	?___lwmod
  2051  0562                     l585:
  2052  0562  0008               	return
  2053  0563                     __end_of___lwmod:
  2054                           
  2055                           	psect	text5
  2056  0467                     __ptext5:	
  2057 ;; *************** function ___lwdiv *****************
  2058 ;; Defined at:
  2059 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;  divisor         2    0[BANK0 ] unsigned int 
  2062 ;;  dividend        2    2[BANK0 ] unsigned int 
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;  quotient        2    4[BANK0 ] unsigned int 
  2065 ;;  counter         1    6[BANK0 ] unsigned char 
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  2    0[BANK0 ] unsigned int 
  2068 ;; Registers used:
  2069 ;;		wreg, status,2, status,0
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2075 ;;      Params:         0       4       0       0       0
  2076 ;;      Locals:         0       3       0       0       0
  2077 ;;      Temps:          1       0       0       0       0
  2078 ;;      Totals:         1       7       0       0       0
  2079 ;;Total ram usage:        8 bytes
  2080 ;; Hardware stack levels used: 1
  2081 ;; Hardware stack levels required when called: 2
  2082 ;; This function calls:
  2083 ;;		Nothing
  2084 ;; This function is called by:
  2085 ;;		_sprintf
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089  0467                     ___lwdiv:	
  2090                           ;psect for function ___lwdiv
  2091                           
  2092  0467                     l1472:	
  2093                           ;incstack = 0
  2094                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2095                           
  2096  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2097  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2098  0469  01A4               	clrf	___lwdiv@quotient
  2099  046A  01A5               	clrf	___lwdiv@quotient+1
  2100  046B                     l1474:
  2101  046B  0820               	movf	___lwdiv@divisor,w
  2102  046C  0421               	iorwf	___lwdiv@divisor+1,w
  2103  046D  1903               	btfsc	3,2
  2104  046E  2C70               	goto	u811
  2105  046F  2C71               	goto	u810
  2106  0470                     u811:
  2107  0470  2CA8               	goto	l1494
  2108  0471                     u810:
  2109  0471                     l1476:
  2110  0471  01A6               	clrf	___lwdiv@counter
  2111  0472  0AA6               	incf	___lwdiv@counter,f
  2112  0473  2C7F               	goto	l1482
  2113  0474                     l1478:
  2114  0474  3001               	movlw	1
  2115  0475                     u825:
  2116  0475  1003               	clrc
  2117  0476  0DA0               	rlf	___lwdiv@divisor,f
  2118  0477  0DA1               	rlf	___lwdiv@divisor+1,f
  2119  0478  3EFF               	addlw	-1
  2120  0479  1D03               	skipz
  2121  047A  2C75               	goto	u825
  2122  047B                     l1480:
  2123  047B  3001               	movlw	1
  2124  047C  00F6               	movwf	??___lwdiv
  2125  047D  0876               	movf	??___lwdiv,w
  2126  047E  07A6               	addwf	___lwdiv@counter,f
  2127  047F                     l1482:
  2128  047F  1FA1               	btfss	___lwdiv@divisor+1,7
  2129  0480  2C82               	goto	u831
  2130  0481  2C83               	goto	u830
  2131  0482                     u831:
  2132  0482  2C74               	goto	l1478
  2133  0483                     u830:
  2134  0483                     l1484:
  2135  0483  3001               	movlw	1
  2136  0484                     u845:
  2137  0484  1003               	clrc
  2138  0485  0DA4               	rlf	___lwdiv@quotient,f
  2139  0486  0DA5               	rlf	___lwdiv@quotient+1,f
  2140  0487  3EFF               	addlw	-1
  2141  0488  1D03               	skipz
  2142  0489  2C84               	goto	u845
  2143  048A  0821               	movf	___lwdiv@divisor+1,w
  2144  048B  0223               	subwf	___lwdiv@dividend+1,w
  2145  048C  1D03               	skipz
  2146  048D  2C90               	goto	u855
  2147  048E  0820               	movf	___lwdiv@divisor,w
  2148  048F  0222               	subwf	___lwdiv@dividend,w
  2149  0490                     u855:
  2150  0490  1C03               	skipc
  2151  0491  2C93               	goto	u851
  2152  0492  2C94               	goto	u850
  2153  0493                     u851:
  2154  0493  2C9B               	goto	l1490
  2155  0494                     u850:
  2156  0494                     l1486:
  2157  0494  0820               	movf	___lwdiv@divisor,w
  2158  0495  02A2               	subwf	___lwdiv@dividend,f
  2159  0496  0821               	movf	___lwdiv@divisor+1,w
  2160  0497  1C03               	skipc
  2161  0498  03A3               	decf	___lwdiv@dividend+1,f
  2162  0499  02A3               	subwf	___lwdiv@dividend+1,f
  2163  049A                     l1488:
  2164  049A  1424               	bsf	___lwdiv@quotient,0
  2165  049B                     l1490:
  2166  049B  3001               	movlw	1
  2167  049C                     u865:
  2168  049C  1003               	clrc
  2169  049D  0CA1               	rrf	___lwdiv@divisor+1,f
  2170  049E  0CA0               	rrf	___lwdiv@divisor,f
  2171  049F  3EFF               	addlw	-1
  2172  04A0  1D03               	skipz
  2173  04A1  2C9C               	goto	u865
  2174  04A2                     l1492:
  2175  04A2  3001               	movlw	1
  2176  04A3  02A6               	subwf	___lwdiv@counter,f
  2177  04A4  1D03               	btfss	3,2
  2178  04A5  2CA7               	goto	u871
  2179  04A6  2CA8               	goto	u870
  2180  04A7                     u871:
  2181  04A7  2C83               	goto	l1484
  2182  04A8                     u870:
  2183  04A8                     l1494:
  2184  04A8  0825               	movf	___lwdiv@quotient+1,w
  2185  04A9  00A1               	movwf	?___lwdiv+1
  2186  04AA  0824               	movf	___lwdiv@quotient,w
  2187  04AB  00A0               	movwf	?___lwdiv
  2188  04AC                     l575:
  2189  04AC  0008               	return
  2190  04AD                     __end_of___lwdiv:
  2191                           
  2192                           	psect	text6
  2193  05C5                     __ptext6:	
  2194 ;; *************** function _setup *****************
  2195 ;; Defined at:
  2196 ;;		line 130 in file "main_master_p1.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;		None
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;		None
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2210 ;;      Params:         0       0       0       0       0
  2211 ;;      Locals:         0       0       0       0       0
  2212 ;;      Temps:          0       0       0       0       0
  2213 ;;      Totals:         0       0       0       0       0
  2214 ;;Total ram usage:        0 bytes
  2215 ;; Hardware stack levels used: 1
  2216 ;; Hardware stack levels required when called: 5
  2217 ;; This function calls:
  2218 ;;		_Lcd_Init
  2219 ;;		_USART_set
  2220 ;;		_int_osc_MHz
  2221 ;; This function is called by:
  2222 ;;		_main
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226  05C5                     _setup:	
  2227                           ;psect for function _setup
  2228                           
  2229  05C5                     l1954:	
  2230                           ;incstack = 0
  2231                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2232                           
  2233                           
  2234                           ;main_master_p1.c: 131:     int_osc_MHz(1);
  2235  05C5  3001               	movlw	1
  2236  05C6  120A  118A  24AD  120A  118A  	fcall	_int_osc_MHz
  2237  05CB                     l1956:
  2238                           
  2239                           ;main_master_p1.c: 134:     ANSEL = 0;
  2240  05CB  1683               	bsf	3,5	;RP0=1, select bank3
  2241  05CC  1703               	bsf	3,6	;RP1=1, select bank3
  2242  05CD  0188               	clrf	8	;volatile
  2243  05CE                     l1958:
  2244                           
  2245                           ;main_master_p1.c: 135:     ANSELH = 0;
  2246  05CE  0189               	clrf	9	;volatile
  2247  05CF                     l1960:
  2248                           
  2249                           ;main_master_p1.c: 137:     TRISA = 0;
  2250  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  2251  05D0  1303               	bcf	3,6	;RP1=0, select bank1
  2252  05D1  0185               	clrf	5	;volatile
  2253  05D2                     l1962:
  2254                           
  2255                           ;main_master_p1.c: 138:     TRISB = 0;
  2256  05D2  0186               	clrf	6	;volatile
  2257  05D3                     l1964:
  2258                           
  2259                           ;main_master_p1.c: 140:     Lcd_Init();
  2260  05D3  120A  118A  23C0  120A  118A  	fcall	_Lcd_Init
  2261  05D8                     l1966:
  2262                           
  2263                           ;main_master_p1.c: 141:     USART_set(9600);
  2264  05D8  3000               	movlw	0
  2265  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  2266  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  2267  05DB  00B0               	movwf	USART_set@baudrate+3
  2268  05DC  3000               	movlw	0
  2269  05DD  00AF               	movwf	USART_set@baudrate+2
  2270  05DE  3025               	movlw	37
  2271  05DF  00AE               	movwf	USART_set@baudrate+1
  2272  05E0  3080               	movlw	128
  2273  05E1  00AD               	movwf	USART_set@baudrate
  2274  05E2  120A  118A  2290  120A  118A  	fcall	_USART_set
  2275  05E7                     l1968:
  2276                           
  2277                           ;main_master_p1.c: 144:     INTCONbits.GIE = 1;
  2278  05E7  178B               	bsf	11,7	;volatile
  2279  05E8                     l1970:
  2280                           
  2281                           ;main_master_p1.c: 145:     INTCONbits.PEIE = 1;
  2282  05E8  170B               	bsf	11,6	;volatile
  2283  05E9                     l79:
  2284  05E9  0008               	return
  2285  05EA                     __end_of_setup:
  2286                           
  2287                           	psect	text7
  2288  04AD                     __ptext7:	
  2289 ;; *************** function _int_osc_MHz *****************
  2290 ;; Defined at:
  2291 ;;		line 13 in file "osc.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;  freq            1    wreg     unsigned char 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  freq            1    6[COMMON] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2305 ;;      Params:         0       0       0       0       0
  2306 ;;      Locals:         1       0       0       0       0
  2307 ;;      Temps:          0       2       0       0       0
  2308 ;;      Totals:         1       2       0       0       0
  2309 ;;Total ram usage:        3 bytes
  2310 ;; Hardware stack levels used: 1
  2311 ;; Hardware stack levels required when called: 2
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_setup
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319  04AD                     _int_osc_MHz:	
  2320                           ;psect for function _int_osc_MHz
  2321                           
  2322                           
  2323                           ;incstack = 0
  2324                           ; Regs used in _int_osc_MHz: [wreg-fsr0h+status,2+status,0]
  2325                           ;int_osc_MHz@freq stored from wreg
  2326  04AD  00F6               	movwf	int_osc_MHz@freq
  2327  04AE                     l1840:
  2328                           
  2329                           ;osc.c: 14:     switch(freq){
  2330  04AE  2CD0               	goto	l1854
  2331  04AF                     l1842:
  2332                           
  2333                           ;osc.c: 16:             OSCCONbits.IRCF = 0b100;
  2334  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  2335  04B0  1303               	bcf	3,6	;RP1=0, select bank1
  2336  04B1  080F               	movf	15,w	;volatile
  2337  04B2  398F               	andlw	-113
  2338  04B3  3840               	iorlw	64
  2339  04B4  008F               	movwf	15	;volatile
  2340                           
  2341                           ;osc.c: 17:             break;
  2342  04B5  2CE8               	goto	l141
  2343  04B6                     l1844:
  2344                           
  2345                           ;osc.c: 19:             OSCCONbits.IRCF = 0b101;
  2346  04B6  1683               	bsf	3,5	;RP0=1, select bank1
  2347  04B7  1303               	bcf	3,6	;RP1=0, select bank1
  2348  04B8  080F               	movf	15,w	;volatile
  2349  04B9  398F               	andlw	-113
  2350  04BA  3850               	iorlw	80
  2351  04BB  008F               	movwf	15	;volatile
  2352                           
  2353                           ;osc.c: 20:             break;
  2354  04BC  2CE8               	goto	l141
  2355  04BD                     l1846:
  2356                           
  2357                           ;osc.c: 22:             OSCCONbits.IRCF = 0b110;
  2358  04BD  1683               	bsf	3,5	;RP0=1, select bank1
  2359  04BE  1303               	bcf	3,6	;RP1=0, select bank1
  2360  04BF  080F               	movf	15,w	;volatile
  2361  04C0  398F               	andlw	-113
  2362  04C1  3860               	iorlw	96
  2363  04C2  008F               	movwf	15	;volatile
  2364                           
  2365                           ;osc.c: 23:             break;
  2366  04C3  2CE8               	goto	l141
  2367  04C4                     l1848:
  2368                           
  2369                           ;osc.c: 25:             OSCCONbits.IRCF = 0b111;
  2370  04C4  3070               	movlw	112
  2371  04C5  1683               	bsf	3,5	;RP0=1, select bank1
  2372  04C6  1303               	bcf	3,6	;RP1=0, select bank1
  2373  04C7  048F               	iorwf	15,f	;volatile
  2374                           
  2375                           ;osc.c: 26:             break;
  2376  04C8  2CE8               	goto	l141
  2377  04C9                     l1850:
  2378                           
  2379                           ;osc.c: 28:             OSCCONbits.IRCF = 0b110;
  2380  04C9  1683               	bsf	3,5	;RP0=1, select bank1
  2381  04CA  1303               	bcf	3,6	;RP1=0, select bank1
  2382  04CB  080F               	movf	15,w	;volatile
  2383  04CC  398F               	andlw	-113
  2384  04CD  3860               	iorlw	96
  2385  04CE  008F               	movwf	15	;volatile
  2386                           
  2387                           ;osc.c: 29:             break;
  2388  04CF  2CE8               	goto	l141
  2389  04D0                     l1854:
  2390  04D0  0876               	movf	int_osc_MHz@freq,w
  2391  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  2392  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  2393  04D3  00A0               	movwf	??_int_osc_MHz
  2394  04D4  01A1               	clrf	??_int_osc_MHz+1
  2395                           
  2396                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2397                           ; Switch size 1, requested type "simple"
  2398                           ; Number of cases is 1, Range of values is 0 to 0
  2399                           ; switch strategies available:
  2400                           ; Name         Instructions Cycles
  2401                           ; simple_byte            4     3 (average)
  2402                           ; direct_byte           11     8 (fixed)
  2403                           ; jumptable            260     6 (fixed)
  2404                           ;	Chosen strategy is simple_byte
  2405  04D5  0821               	movf	??_int_osc_MHz+1,w
  2406  04D6  3A00               	xorlw	0	; case 0
  2407  04D7  1903               	skipnz
  2408  04D8  2CDA               	goto	l2230
  2409  04D9  2CC9               	goto	l1850
  2410  04DA                     l2230:
  2411                           
  2412                           ; Switch size 1, requested type "simple"
  2413                           ; Number of cases is 4, Range of values is 1 to 8
  2414                           ; switch strategies available:
  2415                           ; Name         Instructions Cycles
  2416                           ; simple_byte           13     7 (average)
  2417                           ; direct_byte           35    11 (fixed)
  2418                           ; jumptable            263     9 (fixed)
  2419                           ;	Chosen strategy is simple_byte
  2420  04DA  0820               	movf	??_int_osc_MHz,w
  2421  04DB  3A01               	xorlw	1	; case 1
  2422  04DC  1903               	skipnz
  2423  04DD  2CAF               	goto	l1842
  2424  04DE  3A03               	xorlw	3	; case 2
  2425  04DF  1903               	skipnz
  2426  04E0  2CB6               	goto	l1844
  2427  04E1  3A06               	xorlw	6	; case 4
  2428  04E2  1903               	skipnz
  2429  04E3  2CBD               	goto	l1846
  2430  04E4  3A0C               	xorlw	12	; case 8
  2431  04E5  1903               	skipnz
  2432  04E6  2CC4               	goto	l1848
  2433  04E7  2CC9               	goto	l1850
  2434  04E8                     l141:
  2435                           
  2436                           ;osc.c: 31:     OSCCONbits.SCS = 1;
  2437  04E8  140F               	bsf	15,0	;volatile
  2438  04E9                     l146:
  2439  04E9  0008               	return
  2440  04EA                     __end_of_int_osc_MHz:
  2441                           
  2442                           	psect	text8
  2443  0290                     __ptext8:	
  2444 ;; *************** function _USART_set *****************
  2445 ;; Defined at:
  2446 ;;		line 12 in file "USART.c"
  2447 ;; Parameters:    Size  Location     Type
  2448 ;;  baudrate        4   13[BANK0 ] const unsigned long 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;		None
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  1    wreg      void 
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0, pclath, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2460 ;;      Params:         0       4       0       0       0
  2461 ;;      Locals:         0       0       0       0       0
  2462 ;;      Temps:          0      12       0       0       0
  2463 ;;      Totals:         0      16       0       0       0
  2464 ;;Total ram usage:       16 bytes
  2465 ;; Hardware stack levels used: 1
  2466 ;; Hardware stack levels required when called: 3
  2467 ;; This function calls:
  2468 ;;		___lldiv
  2469 ;; This function is called by:
  2470 ;;		_setup
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474  0290                     _USART_set:	
  2475                           ;psect for function _USART_set
  2476                           
  2477  0290                     l1410:	
  2478                           ;incstack = 0
  2479                           ; Regs used in _USART_set: [wreg+status,2+status,0+pclath+cstack]
  2480                           
  2481                           
  2482                           ;USART.c: 12: void USART_set(const unsigned long int baudrate);USART.c: 13: {;USART.c: 1
      +                          5:     TXSTAbits.BRGH = 1;
  2483  0290  1683               	bsf	3,5	;RP0=1, select bank1
  2484  0291  1303               	bcf	3,6	;RP1=0, select bank1
  2485  0292  1518               	bsf	24,2	;volatile
  2486                           
  2487                           ;USART.c: 16:     BAUDCTLbits.BRG16 = 1;
  2488  0293  1683               	bsf	3,5	;RP0=1, select bank3
  2489  0294  1703               	bsf	3,6	;RP1=1, select bank3
  2490  0295  1587               	bsf	7,3	;volatile
  2491  0296                     l1412:
  2492                           
  2493                           ;USART.c: 17:     SPBRGH = 0;
  2494  0296  1683               	bsf	3,5	;RP0=1, select bank1
  2495  0297  1303               	bcf	3,6	;RP1=0, select bank1
  2496  0298  019A               	clrf	26	;volatile
  2497  0299                     l1414:
  2498                           
  2499                           ;USART.c: 18:     SPBRG = (1000000 - baudrate * 4) / (baudrate * 4);
  2500  0299  1283               	bcf	3,5	;RP0=0, select bank0
  2501  029A  1303               	bcf	3,6	;RP1=0, select bank0
  2502  029B  082D               	movf	USART_set@baudrate,w
  2503  029C  00B1               	movwf	??_USART_set
  2504  029D  082E               	movf	USART_set@baudrate+1,w
  2505  029E  00B2               	movwf	??_USART_set+1
  2506  029F  082F               	movf	USART_set@baudrate+2,w
  2507  02A0  00B3               	movwf	??_USART_set+2
  2508  02A1  0830               	movf	USART_set@baudrate+3,w
  2509  02A2  00B4               	movwf	??_USART_set+3
  2510  02A3  3002               	movlw	2
  2511  02A4                     u715:
  2512  02A4  1003               	clrc
  2513  02A5  0DB1               	rlf	??_USART_set,f
  2514  02A6  0DB2               	rlf	??_USART_set+1,f
  2515  02A7  0DB3               	rlf	??_USART_set+2,f
  2516  02A8  0DB4               	rlf	??_USART_set+3,f
  2517  02A9                     u710:
  2518  02A9  3EFF               	addlw	-1
  2519  02AA  1D03               	skipz
  2520  02AB  2AA4               	goto	u715
  2521  02AC  0834               	movf	??_USART_set+3,w
  2522  02AD  00A3               	movwf	___lldiv@divisor+3
  2523  02AE  0833               	movf	??_USART_set+2,w
  2524  02AF  00A2               	movwf	___lldiv@divisor+2
  2525  02B0  0832               	movf	??_USART_set+1,w
  2526  02B1  00A1               	movwf	___lldiv@divisor+1
  2527  02B2  0831               	movf	??_USART_set,w
  2528  02B3  00A0               	movwf	___lldiv@divisor
  2529  02B4  082D               	movf	USART_set@baudrate,w
  2530  02B5  00B5               	movwf	??_USART_set+4
  2531  02B6  082E               	movf	USART_set@baudrate+1,w
  2532  02B7  00B6               	movwf	??_USART_set+5
  2533  02B8  082F               	movf	USART_set@baudrate+2,w
  2534  02B9  00B7               	movwf	??_USART_set+6
  2535  02BA  0830               	movf	USART_set@baudrate+3,w
  2536  02BB  00B8               	movwf	??_USART_set+7
  2537  02BC  3002               	movlw	2
  2538  02BD                     u725:
  2539  02BD  1003               	clrc
  2540  02BE  0DB5               	rlf	??_USART_set+4,f
  2541  02BF  0DB6               	rlf	??_USART_set+5,f
  2542  02C0  0DB7               	rlf	??_USART_set+6,f
  2543  02C1  0DB8               	rlf	??_USART_set+7,f
  2544  02C2                     u720:
  2545  02C2  3EFF               	addlw	-1
  2546  02C3  1D03               	skipz
  2547  02C4  2ABD               	goto	u725
  2548  02C5  3040               	movlw	64
  2549  02C6  00B9               	movwf	??_USART_set+8
  2550  02C7  3042               	movlw	66
  2551  02C8  00BA               	movwf	??_USART_set+9
  2552  02C9  300F               	movlw	15
  2553  02CA  00BB               	movwf	??_USART_set+10
  2554  02CB  3000               	movlw	0
  2555  02CC  00BC               	movwf	??_USART_set+11
  2556  02CD  0835               	movf	??_USART_set+4,w
  2557  02CE  02B9               	subwf	??_USART_set+8,f
  2558  02CF  0836               	movf	??_USART_set+5,w
  2559  02D0  1C03               	skipc
  2560  02D1  0F36               	incfsz	??_USART_set+5,w
  2561  02D2  2AD4               	goto	u731
  2562  02D3  2AD5               	goto	u732
  2563  02D4                     u731:
  2564  02D4  02BA               	subwf	??_USART_set+9,f
  2565  02D5                     u732:
  2566  02D5  0837               	movf	??_USART_set+6,w
  2567  02D6  1C03               	skipc
  2568  02D7  0F37               	incfsz	??_USART_set+6,w
  2569  02D8  2ADA               	goto	u733
  2570  02D9  2ADB               	goto	u734
  2571  02DA                     u733:
  2572  02DA  02BB               	subwf	??_USART_set+10,f
  2573  02DB                     u734:
  2574  02DB  0838               	movf	??_USART_set+7,w
  2575  02DC  1C03               	skipc
  2576  02DD  0F38               	incfsz	??_USART_set+7,w
  2577  02DE  2AE0               	goto	u735
  2578  02DF  2AE1               	goto	u736
  2579  02E0                     u735:
  2580  02E0  02BC               	subwf	??_USART_set+11,f
  2581  02E1                     u736:
  2582  02E1  083C               	movf	??_USART_set+11,w
  2583  02E2  00A7               	movwf	___lldiv@dividend+3
  2584  02E3  083B               	movf	??_USART_set+10,w
  2585  02E4  00A6               	movwf	___lldiv@dividend+2
  2586  02E5  083A               	movf	??_USART_set+9,w
  2587  02E6  00A5               	movwf	___lldiv@dividend+1
  2588  02E7  0839               	movf	??_USART_set+8,w
  2589  02E8  00A4               	movwf	___lldiv@dividend
  2590  02E9  120A  118A  2300  120A  118A  	fcall	___lldiv
  2591  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  2592  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  2593  02F0  0820               	movf	?___lldiv,w
  2594  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  2595  02F2  1303               	bcf	3,6	;RP1=0, select bank1
  2596  02F3  0099               	movwf	25	;volatile
  2597  02F4                     l1416:
  2598                           
  2599                           ;USART.c: 19:     TXSTAbits.SYNC = 0;
  2600  02F4  1218               	bcf	24,4	;volatile
  2601  02F5                     l1418:
  2602                           
  2603                           ;USART.c: 20:     RCSTAbits.SPEN = 1;
  2604  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  2605  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  2606  02F7  1798               	bsf	24,7	;volatile
  2607  02F8                     l1420:
  2608                           
  2609                           ;USART.c: 22:     PIE1bits.RCIE = 1;
  2610  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  2611  02F9  1303               	bcf	3,6	;RP1=0, select bank1
  2612  02FA  168C               	bsf	12,5	;volatile
  2613  02FB                     l1422:
  2614                           
  2615                           ;USART.c: 25:     RCSTAbits.RX9 = 0;
  2616  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  2617  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  2618  02FD  1318               	bcf	24,6	;volatile
  2619  02FE                     l1424:
  2620                           
  2621                           ;USART.c: 27:     RCSTAbits.CREN = 1;
  2622  02FE  1618               	bsf	24,4	;volatile
  2623  02FF                     l163:
  2624  02FF  0008               	return
  2625  0300                     __end_of_USART_set:
  2626                           
  2627                           	psect	text9
  2628  0300                     __ptext9:	
  2629 ;; *************** function ___lldiv *****************
  2630 ;; Defined at:
  2631 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\__lldiv.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  divisor         4    0[BANK0 ] unsigned long 
  2634 ;;  dividend        4    4[BANK0 ] unsigned long 
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;  quotient        4    8[BANK0 ] unsigned long 
  2637 ;;  counter         1   12[BANK0 ] unsigned char 
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  4    0[BANK0 ] unsigned long 
  2640 ;; Registers used:
  2641 ;;		wreg, status,2, status,0
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2647 ;;      Params:         0       8       0       0       0
  2648 ;;      Locals:         0       5       0       0       0
  2649 ;;      Temps:          1       0       0       0       0
  2650 ;;      Totals:         1      13       0       0       0
  2651 ;;Total ram usage:       14 bytes
  2652 ;; Hardware stack levels used: 1
  2653 ;; Hardware stack levels required when called: 2
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_USART_set
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661  0300                     ___lldiv:	
  2662                           ;psect for function ___lldiv
  2663                           
  2664  0300                     l1338:	
  2665                           ;incstack = 0
  2666                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2667                           
  2668  0300  3000               	movlw	0
  2669  0301  1283               	bcf	3,5	;RP0=0, select bank0
  2670  0302  1303               	bcf	3,6	;RP1=0, select bank0
  2671  0303  00AB               	movwf	___lldiv@quotient+3
  2672  0304  3000               	movlw	0
  2673  0305  00AA               	movwf	___lldiv@quotient+2
  2674  0306  3000               	movlw	0
  2675  0307  00A9               	movwf	___lldiv@quotient+1
  2676  0308  3000               	movlw	0
  2677  0309  00A8               	movwf	___lldiv@quotient
  2678  030A  0823               	movf	___lldiv@divisor+3,w
  2679  030B  0422               	iorwf	___lldiv@divisor+2,w
  2680  030C  0421               	iorwf	___lldiv@divisor+1,w
  2681  030D  0420               	iorwf	___lldiv@divisor,w
  2682  030E  1903               	skipnz
  2683  030F  2B11               	goto	u641
  2684  0310  2B12               	goto	u640
  2685  0311                     u641:
  2686  0311  2B5F               	goto	l1358
  2687  0312                     u640:
  2688  0312                     l1340:
  2689  0312  01AC               	clrf	___lldiv@counter
  2690  0313  0AAC               	incf	___lldiv@counter,f
  2691  0314  2B22               	goto	l1344
  2692  0315                     l1342:
  2693  0315  3001               	movlw	1
  2694  0316  00F6               	movwf	??___lldiv
  2695  0317                     u655:
  2696  0317  1003               	clrc
  2697  0318  0DA0               	rlf	___lldiv@divisor,f
  2698  0319  0DA1               	rlf	___lldiv@divisor+1,f
  2699  031A  0DA2               	rlf	___lldiv@divisor+2,f
  2700  031B  0DA3               	rlf	___lldiv@divisor+3,f
  2701  031C  0BF6               	decfsz	??___lldiv,f
  2702  031D  2B17               	goto	u655
  2703  031E  3001               	movlw	1
  2704  031F  00F6               	movwf	??___lldiv
  2705  0320  0876               	movf	??___lldiv,w
  2706  0321  07AC               	addwf	___lldiv@counter,f
  2707  0322                     l1344:
  2708  0322  1FA3               	btfss	___lldiv@divisor+3,7
  2709  0323  2B25               	goto	u661
  2710  0324  2B26               	goto	u660
  2711  0325                     u661:
  2712  0325  2B15               	goto	l1342
  2713  0326                     u660:
  2714  0326                     l1346:
  2715  0326  3001               	movlw	1
  2716  0327  00F6               	movwf	??___lldiv
  2717  0328                     u675:
  2718  0328  1003               	clrc
  2719  0329  0DA8               	rlf	___lldiv@quotient,f
  2720  032A  0DA9               	rlf	___lldiv@quotient+1,f
  2721  032B  0DAA               	rlf	___lldiv@quotient+2,f
  2722  032C  0DAB               	rlf	___lldiv@quotient+3,f
  2723  032D  0BF6               	decfsz	??___lldiv,f
  2724  032E  2B28               	goto	u675
  2725  032F                     l1348:
  2726  032F  0823               	movf	___lldiv@divisor+3,w
  2727  0330  0227               	subwf	___lldiv@dividend+3,w
  2728  0331  1D03               	skipz
  2729  0332  2B3D               	goto	u685
  2730  0333  0822               	movf	___lldiv@divisor+2,w
  2731  0334  0226               	subwf	___lldiv@dividend+2,w
  2732  0335  1D03               	skipz
  2733  0336  2B3D               	goto	u685
  2734  0337  0821               	movf	___lldiv@divisor+1,w
  2735  0338  0225               	subwf	___lldiv@dividend+1,w
  2736  0339  1D03               	skipz
  2737  033A  2B3D               	goto	u685
  2738  033B  0820               	movf	___lldiv@divisor,w
  2739  033C  0224               	subwf	___lldiv@dividend,w
  2740  033D                     u685:
  2741  033D  1C03               	skipc
  2742  033E  2B40               	goto	u681
  2743  033F  2B41               	goto	u680
  2744  0340                     u681:
  2745  0340  2B50               	goto	l1354
  2746  0341                     u680:
  2747  0341                     l1350:
  2748  0341  0820               	movf	___lldiv@divisor,w
  2749  0342  02A4               	subwf	___lldiv@dividend,f
  2750  0343  0821               	movf	___lldiv@divisor+1,w
  2751  0344  1C03               	skipc
  2752  0345  0F21               	incfsz	___lldiv@divisor+1,w
  2753  0346  02A5               	subwf	___lldiv@dividend+1,f
  2754  0347  0822               	movf	___lldiv@divisor+2,w
  2755  0348  1C03               	skipc
  2756  0349  0F22               	incfsz	___lldiv@divisor+2,w
  2757  034A  02A6               	subwf	___lldiv@dividend+2,f
  2758  034B  0823               	movf	___lldiv@divisor+3,w
  2759  034C  1C03               	skipc
  2760  034D  0F23               	incfsz	___lldiv@divisor+3,w
  2761  034E  02A7               	subwf	___lldiv@dividend+3,f
  2762  034F                     l1352:
  2763  034F  1428               	bsf	___lldiv@quotient,0
  2764  0350                     l1354:
  2765  0350  3001               	movlw	1
  2766  0351                     u695:
  2767  0351  1003               	clrc
  2768  0352  0CA3               	rrf	___lldiv@divisor+3,f
  2769  0353  0CA2               	rrf	___lldiv@divisor+2,f
  2770  0354  0CA1               	rrf	___lldiv@divisor+1,f
  2771  0355  0CA0               	rrf	___lldiv@divisor,f
  2772  0356  3EFF               	addlw	-1
  2773  0357  1D03               	skipz
  2774  0358  2B51               	goto	u695
  2775  0359                     l1356:
  2776  0359  3001               	movlw	1
  2777  035A  02AC               	subwf	___lldiv@counter,f
  2778  035B  1D03               	btfss	3,2
  2779  035C  2B5E               	goto	u701
  2780  035D  2B5F               	goto	u700
  2781  035E                     u701:
  2782  035E  2B26               	goto	l1346
  2783  035F                     u700:
  2784  035F                     l1358:
  2785  035F  082B               	movf	___lldiv@quotient+3,w
  2786  0360  00A3               	movwf	?___lldiv+3
  2787  0361  082A               	movf	___lldiv@quotient+2,w
  2788  0362  00A2               	movwf	?___lldiv+2
  2789  0363  0829               	movf	___lldiv@quotient+1,w
  2790  0364  00A1               	movwf	?___lldiv+1
  2791  0365  0828               	movf	___lldiv@quotient,w
  2792  0366  00A0               	movwf	?___lldiv
  2793  0367                     l339:
  2794  0367  0008               	return
  2795  0368                     __end_of___lldiv:
  2796                           
  2797                           	psect	text10
  2798  03C0                     __ptext10:	
  2799 ;; *************** function _Lcd_Init *****************
  2800 ;; Defined at:
  2801 ;;		line 68 in file "LCD.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;		None
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;		None
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  1    wreg      void 
  2808 ;; Registers used:
  2809 ;;		wreg, status,2, status,0, pclath, cstack
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2815 ;;      Params:         0       0       0       0       0
  2816 ;;      Locals:         0       0       0       0       0
  2817 ;;      Temps:          0       2       0       0       0
  2818 ;;      Totals:         0       2       0       0       0
  2819 ;;Total ram usage:        2 bytes
  2820 ;; Hardware stack levels used: 1
  2821 ;; Hardware stack levels required when called: 4
  2822 ;; This function calls:
  2823 ;;		_Lcd_Cmd
  2824 ;;		_Lcd_Port
  2825 ;; This function is called by:
  2826 ;;		_setup
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830  03C0                     _Lcd_Init:	
  2831                           ;psect for function _Lcd_Init
  2832                           
  2833  03C0                     l1860:	
  2834                           ;incstack = 0
  2835                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2836                           
  2837                           
  2838                           ;LCD.c: 69:     Lcd_Port(0x00);
  2839  03C0  3000               	movlw	0
  2840  03C1  120A  118A  260F  120A  118A  	fcall	_Lcd_Port
  2841  03C6                     l1862:
  2842                           
  2843                           ;LCD.c: 70:     _delay((unsigned long)((20)*(1000000/4000.0)));
  2844  03C6  3007               	movlw	7
  2845  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  2846  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  2847  03C9  00A3               	movwf	??_Lcd_Init+1
  2848  03CA  307C               	movlw	124
  2849  03CB  00A2               	movwf	??_Lcd_Init
  2850  03CC                     u1567:
  2851  03CC  0BA2               	decfsz	??_Lcd_Init,f
  2852  03CD  2BCC               	goto	u1567
  2853  03CE  0BA3               	decfsz	??_Lcd_Init+1,f
  2854  03CF  2BCC               	goto	u1567
  2855  03D0  0000               	nop
  2856  03D1                     l1864:
  2857                           
  2858                           ;LCD.c: 71:     Lcd_Cmd(0x03);
  2859  03D1  3003               	movlw	3
  2860  03D2  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  2861                           
  2862                           ;LCD.c: 72:     _delay((unsigned long)((5)*(1000000/4000.0)));
  2863  03D7  30F9               	movlw	249
  2864  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2865  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  2866  03DA  00A2               	movwf	??_Lcd_Init
  2867  03DB                     u1577:
  2868  03DB  2BDC               	nop2
  2869  03DC  0BA2               	decfsz	??_Lcd_Init,f
  2870  03DD  2BDB               	goto	u1577
  2871  03DE  2BDF               	nop2
  2872  03DF                     l1866:
  2873                           
  2874                           ;LCD.c: 73:     Lcd_Cmd(0x03);
  2875  03DF  3003               	movlw	3
  2876  03E0  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  2877  03E5                     l1868:
  2878                           
  2879                           ;LCD.c: 74:     _delay((unsigned long)((11)*(1000000/4000000.0)));
  2880  03E5  2BE6               	nop2	;2 cycle nop
  2881  03E6                     l1870:
  2882                           
  2883                           ;LCD.c: 75:     Lcd_Cmd(0x03);
  2884  03E6  3003               	movlw	3
  2885  03E7  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  2886  03EC                     l1872:
  2887                           
  2888                           ;LCD.c: 77:     Lcd_Cmd(0x02);
  2889  03EC  3002               	movlw	2
  2890  03ED  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  2891  03F2                     l1874:
  2892                           
  2893                           ;LCD.c: 78:     Lcd_Cmd(0x02);
  2894  03F2  3002               	movlw	2
  2895  03F3  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  2896  03F8                     l1876:
  2897                           
  2898                           ;LCD.c: 79:     Lcd_Cmd(0x08);
  2899  03F8  3008               	movlw	8
  2900  03F9  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  2901  03FE                     l1878:
  2902                           
  2903                           ;LCD.c: 80:     Lcd_Cmd(0x00);
  2904  03FE  3000               	movlw	0
  2905  03FF  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  2906  0404                     l1880:
  2907                           
  2908                           ;LCD.c: 81:     Lcd_Cmd(0x0C);
  2909  0404  300C               	movlw	12
  2910  0405  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  2911  040A                     l1882:
  2912                           
  2913                           ;LCD.c: 82:     Lcd_Cmd(0x00);
  2914  040A  3000               	movlw	0
  2915  040B  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  2916  0410                     l1884:
  2917                           
  2918                           ;LCD.c: 83:     Lcd_Cmd(0x06);
  2919  0410  3006               	movlw	6
  2920  0411  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  2921  0416                     l119:
  2922  0416  0008               	return
  2923  0417                     __end_of_Lcd_Init:
  2924                           
  2925                           	psect	text11
  2926  05EA                     __ptext11:	
  2927 ;; *************** function _Lcd_Write_String *****************
  2928 ;; Defined at:
  2929 ;;		line 101 in file "LCD.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  a               1    wreg     PTR unsigned char 
  2932 ;;		 -> srow(20), frow(20), 
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;  a               1    7[BANK0 ] PTR unsigned char 
  2935 ;;		 -> srow(20), frow(20), 
  2936 ;;  i               2    5[BANK0 ] int 
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2946 ;;      Params:         0       0       0       0       0
  2947 ;;      Locals:         0       3       0       0       0
  2948 ;;      Temps:          0       1       0       0       0
  2949 ;;      Totals:         0       4       0       0       0
  2950 ;;Total ram usage:        4 bytes
  2951 ;; Hardware stack levels used: 1
  2952 ;; Hardware stack levels required when called: 4
  2953 ;; This function calls:
  2954 ;;		_Lcd_Write_Char
  2955 ;; This function is called by:
  2956 ;;		_main
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960  05EA                     _Lcd_Write_String:	
  2961                           ;psect for function _Lcd_Write_String
  2962                           
  2963                           
  2964                           ;incstack = 0
  2965                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2966                           ;Lcd_Write_String@a stored from wreg
  2967  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  2968  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  2969  05EC  00A7               	movwf	Lcd_Write_String@a
  2970  05ED                     l2114:
  2971                           
  2972                           ;LCD.c: 102:     int i;;LCD.c: 103:     for (i = 0; a[i] != '\0'; i++)
  2973  05ED  01A5               	clrf	Lcd_Write_String@i
  2974  05EE  01A6               	clrf	Lcd_Write_String@i+1
  2975  05EF  2E03               	goto	l2120
  2976  05F0                     l2116:
  2977                           
  2978                           ;LCD.c: 104:         Lcd_Write_Char(a[i]);
  2979  05F0  0825               	movf	Lcd_Write_String@i,w
  2980  05F1  0727               	addwf	Lcd_Write_String@a,w
  2981  05F2  00A4               	movwf	??_Lcd_Write_String
  2982  05F3  0824               	movf	??_Lcd_Write_String,w
  2983  05F4  0084               	movwf	4
  2984  05F5  0800               	movf	0,w
  2985  05F6  120A  118A  24EA  120A  118A  	fcall	_Lcd_Write_Char
  2986  05FB                     l2118:
  2987  05FB  3001               	movlw	1
  2988  05FC  1283               	bcf	3,5	;RP0=0, select bank0
  2989  05FD  1303               	bcf	3,6	;RP1=0, select bank0
  2990  05FE  07A5               	addwf	Lcd_Write_String@i,f
  2991  05FF  1803               	skipnc
  2992  0600  0AA6               	incf	Lcd_Write_String@i+1,f
  2993  0601  3000               	movlw	0
  2994  0602  07A6               	addwf	Lcd_Write_String@i+1,f
  2995  0603                     l2120:
  2996  0603  0825               	movf	Lcd_Write_String@i,w
  2997  0604  0727               	addwf	Lcd_Write_String@a,w
  2998  0605  00A4               	movwf	??_Lcd_Write_String
  2999  0606  0824               	movf	??_Lcd_Write_String,w
  3000  0607  0084               	movwf	4
  3001  0608  1383               	bcf	3,7	;select IRP bank0
  3002  0609  0800               	movf	0,w
  3003  060A  1D03               	btfss	3,2
  3004  060B  2E0D               	goto	u1541
  3005  060C  2E0E               	goto	u1540
  3006  060D                     u1541:
  3007  060D  2DF0               	goto	l2116
  3008  060E                     u1540:
  3009  060E                     l128:
  3010  060E  0008               	return
  3011  060F                     __end_of_Lcd_Write_String:
  3012                           
  3013                           	psect	text12
  3014  04EA                     __ptext12:	
  3015 ;; *************** function _Lcd_Write_Char *****************
  3016 ;; Defined at:
  3017 ;;		line 86 in file "LCD.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  a               1    wreg     unsigned char 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  a               1    3[BANK0 ] unsigned char 
  3022 ;;  y               1    2[BANK0 ] unsigned char 
  3023 ;;  temp            1    1[BANK0 ] unsigned char 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg, status,2, status,0, pclath, cstack
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3033 ;;      Params:         0       0       0       0       0
  3034 ;;      Locals:         0       3       0       0       0
  3035 ;;      Temps:          0       1       0       0       0
  3036 ;;      Totals:         0       4       0       0       0
  3037 ;;Total ram usage:        4 bytes
  3038 ;; Hardware stack levels used: 1
  3039 ;; Hardware stack levels required when called: 3
  3040 ;; This function calls:
  3041 ;;		_Lcd_Port
  3042 ;; This function is called by:
  3043 ;;		_Lcd_Write_String
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047  04EA                     _Lcd_Write_Char:	
  3048                           ;psect for function _Lcd_Write_Char
  3049                           
  3050                           
  3051                           ;incstack = 0
  3052                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3053                           ;Lcd_Write_Char@a stored from wreg
  3054  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  3055  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  3056  04EC  00A3               	movwf	Lcd_Write_Char@a
  3057  04ED                     l1886:
  3058                           
  3059                           ;LCD.c: 87:     char temp, y;;LCD.c: 88:     temp = a & 0x0F;
  3060  04ED  0823               	movf	Lcd_Write_Char@a,w
  3061  04EE  390F               	andlw	15
  3062  04EF  00A0               	movwf	??_Lcd_Write_Char
  3063  04F0  0820               	movf	??_Lcd_Write_Char,w
  3064  04F1  00A1               	movwf	Lcd_Write_Char@temp
  3065                           
  3066                           ;LCD.c: 89:     y = a & 0xF0;
  3067  04F2  0823               	movf	Lcd_Write_Char@a,w
  3068  04F3  39F0               	andlw	240
  3069  04F4  00A0               	movwf	??_Lcd_Write_Char
  3070  04F5  0820               	movf	??_Lcd_Write_Char,w
  3071  04F6  00A2               	movwf	Lcd_Write_Char@y
  3072  04F7                     l1888:
  3073                           
  3074                           ;LCD.c: 90:     RA0 = 1;
  3075  04F7  1405               	bsf	5,0	;volatile
  3076  04F8                     l1890:
  3077                           
  3078                           ;LCD.c: 91:     Lcd_Port(y >> 4);
  3079  04F8  0822               	movf	Lcd_Write_Char@y,w
  3080  04F9  00A0               	movwf	??_Lcd_Write_Char
  3081  04FA  3004               	movlw	4
  3082  04FB                     u1195:
  3083  04FB  1003               	clrc
  3084  04FC  0CA0               	rrf	??_Lcd_Write_Char,f
  3085  04FD  3EFF               	addlw	-1
  3086  04FE  1D03               	skipz
  3087  04FF  2CFB               	goto	u1195
  3088  0500  0820               	movf	??_Lcd_Write_Char,w
  3089  0501  120A  118A  260F  120A  118A  	fcall	_Lcd_Port
  3090  0506                     l1892:
  3091                           
  3092                           ;LCD.c: 92:     RA1 = 1;
  3093  0506  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0507  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0508  1485               	bsf	5,1	;volatile
  3096  0509                     l1894:
  3097                           
  3098                           ;LCD.c: 93:     _delay((unsigned long)((40)*(1000000/4000000.0)));
  3099  0509  3002               	movlw	2
  3100  050A  1283               	bcf	3,5	;RP0=0, select bank0
  3101  050B  1303               	bcf	3,6	;RP1=0, select bank0
  3102  050C  00A0               	movwf	??_Lcd_Write_Char
  3103  050D                     u1587:
  3104  050D  0BA0               	decfsz	??_Lcd_Write_Char,f
  3105  050E  2D0D               	goto	u1587
  3106  050F  0000               	nop
  3107  0510                     l1896:
  3108                           
  3109                           ;LCD.c: 94:     RA1 = 0;
  3110  0510  1283               	bcf	3,5	;RP0=0, select bank0
  3111  0511  1303               	bcf	3,6	;RP1=0, select bank0
  3112  0512  1085               	bcf	5,1	;volatile
  3113  0513                     l1898:
  3114                           
  3115                           ;LCD.c: 95:     Lcd_Port(temp);
  3116  0513  0821               	movf	Lcd_Write_Char@temp,w
  3117  0514  120A  118A  260F  120A  118A  	fcall	_Lcd_Port
  3118  0519                     l1900:
  3119                           
  3120                           ;LCD.c: 96:     RA1 = 1;
  3121  0519  1283               	bcf	3,5	;RP0=0, select bank0
  3122  051A  1303               	bcf	3,6	;RP1=0, select bank0
  3123  051B  1485               	bsf	5,1	;volatile
  3124  051C                     l1902:
  3125                           
  3126                           ;LCD.c: 97:     _delay((unsigned long)((40)*(1000000/4000000.0)));
  3127  051C  3002               	movlw	2
  3128  051D  1283               	bcf	3,5	;RP0=0, select bank0
  3129  051E  1303               	bcf	3,6	;RP1=0, select bank0
  3130  051F  00A0               	movwf	??_Lcd_Write_Char
  3131  0520                     u1597:
  3132  0520  0BA0               	decfsz	??_Lcd_Write_Char,f
  3133  0521  2D20               	goto	u1597
  3134  0522  0000               	nop
  3135  0523                     l1904:
  3136                           
  3137                           ;LCD.c: 98:     RA1 = 0;
  3138  0523  1283               	bcf	3,5	;RP0=0, select bank0
  3139  0524  1303               	bcf	3,6	;RP1=0, select bank0
  3140  0525  1085               	bcf	5,1	;volatile
  3141  0526                     l122:
  3142  0526  0008               	return
  3143  0527                     __end_of_Lcd_Write_Char:
  3144                           
  3145                           	psect	text13
  3146  0368                     __ptext13:	
  3147 ;; *************** function _Lcd_Set_Cursor *****************
  3148 ;; Defined at:
  3149 ;;		line 50 in file "LCD.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;  a               1    wreg     unsigned char 
  3152 ;;  b               1    2[BANK0 ] unsigned char 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;  a               1    5[BANK0 ] unsigned char 
  3155 ;;  temp            1    8[BANK0 ] unsigned char 
  3156 ;;  y               1    7[BANK0 ] unsigned char 
  3157 ;;  z               1    6[BANK0 ] unsigned char 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		wreg, status,2, status,0, pclath, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3167 ;;      Params:         0       1       0       0       0
  3168 ;;      Locals:         0       4       0       0       0
  3169 ;;      Temps:          0       2       0       0       0
  3170 ;;      Totals:         0       7       0       0       0
  3171 ;;Total ram usage:        7 bytes
  3172 ;; Hardware stack levels used: 1
  3173 ;; Hardware stack levels required when called: 4
  3174 ;; This function calls:
  3175 ;;		_Lcd_Cmd
  3176 ;; This function is called by:
  3177 ;;		_main
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181  0368                     _Lcd_Set_Cursor:	
  3182                           ;psect for function _Lcd_Set_Cursor
  3183                           
  3184                           
  3185                           ;incstack = 0
  3186                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3187                           ;Lcd_Set_Cursor@a stored from wreg
  3188  0368  1283               	bcf	3,5	;RP0=0, select bank0
  3189  0369  1303               	bcf	3,6	;RP1=0, select bank0
  3190  036A  00A5               	movwf	Lcd_Set_Cursor@a
  3191  036B                     l2094:
  3192                           
  3193                           ;LCD.c: 50: void Lcd_Set_Cursor(char a, char b);LCD.c: 51: {;LCD.c: 52:     char temp, z
      +                          , y;;LCD.c: 53:     if (a == 1) {
  3194  036B  0325               	decf	Lcd_Set_Cursor@a,w
  3195  036C  1D03               	btfss	3,2
  3196  036D  2B6F               	goto	u1501
  3197  036E  2B70               	goto	u1500
  3198  036F                     u1501:
  3199  036F  2B95               	goto	l2104
  3200  0370                     u1500:
  3201  0370                     l2096:
  3202                           
  3203                           ;LCD.c: 54:         temp = 0x80 + b - 1;
  3204  0370  0822               	movf	Lcd_Set_Cursor@b,w
  3205  0371  3E7F               	addlw	127
  3206  0372  00A3               	movwf	??_Lcd_Set_Cursor
  3207  0373  0823               	movf	??_Lcd_Set_Cursor,w
  3208  0374  00A8               	movwf	Lcd_Set_Cursor@temp
  3209                           
  3210                           ;LCD.c: 55:         z = temp >> 4;
  3211  0375  0828               	movf	Lcd_Set_Cursor@temp,w
  3212  0376  00A3               	movwf	??_Lcd_Set_Cursor
  3213  0377  3004               	movlw	4
  3214  0378                     u1515:
  3215  0378  1003               	clrc
  3216  0379  0CA3               	rrf	??_Lcd_Set_Cursor,f
  3217  037A  3EFF               	addlw	-1
  3218  037B  1D03               	skipz
  3219  037C  2B78               	goto	u1515
  3220  037D  0823               	movf	??_Lcd_Set_Cursor,w
  3221  037E  00A4               	movwf	??_Lcd_Set_Cursor+1
  3222  037F  0824               	movf	??_Lcd_Set_Cursor+1,w
  3223  0380  00A6               	movwf	Lcd_Set_Cursor@z
  3224  0381                     l2098:
  3225                           
  3226                           ;LCD.c: 56:         y = temp & 0x0F;
  3227  0381  0828               	movf	Lcd_Set_Cursor@temp,w
  3228  0382  390F               	andlw	15
  3229  0383  00A3               	movwf	??_Lcd_Set_Cursor
  3230  0384  0823               	movf	??_Lcd_Set_Cursor,w
  3231  0385  00A7               	movwf	Lcd_Set_Cursor@y
  3232  0386                     l2100:
  3233                           
  3234                           ;LCD.c: 57:         Lcd_Cmd(z);
  3235  0386  0826               	movf	Lcd_Set_Cursor@z,w
  3236  0387  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  3237  038C                     l2102:
  3238                           
  3239                           ;LCD.c: 58:         Lcd_Cmd(y);
  3240  038C  1283               	bcf	3,5	;RP0=0, select bank0
  3241  038D  1303               	bcf	3,6	;RP1=0, select bank0
  3242  038E  0827               	movf	Lcd_Set_Cursor@y,w
  3243  038F  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  3244                           
  3245                           ;LCD.c: 59:     } else if (a == 2) {
  3246  0394  2BBF               	goto	l116
  3247  0395                     l2104:
  3248  0395  3002               	movlw	2
  3249  0396  0625               	xorwf	Lcd_Set_Cursor@a,w
  3250  0397  1D03               	btfss	3,2
  3251  0398  2B9A               	goto	u1521
  3252  0399  2B9B               	goto	u1520
  3253  039A                     u1521:
  3254  039A  2BBF               	goto	l116
  3255  039B                     u1520:
  3256  039B                     l2106:
  3257                           
  3258                           ;LCD.c: 60:         temp = 0xC0 + b - 1;
  3259  039B  0822               	movf	Lcd_Set_Cursor@b,w
  3260  039C  3EBF               	addlw	191
  3261  039D  00A3               	movwf	??_Lcd_Set_Cursor
  3262  039E  0823               	movf	??_Lcd_Set_Cursor,w
  3263  039F  00A8               	movwf	Lcd_Set_Cursor@temp
  3264                           
  3265                           ;LCD.c: 61:         z = temp >> 4;
  3266  03A0  0828               	movf	Lcd_Set_Cursor@temp,w
  3267  03A1  00A3               	movwf	??_Lcd_Set_Cursor
  3268  03A2  3004               	movlw	4
  3269  03A3                     u1535:
  3270  03A3  1003               	clrc
  3271  03A4  0CA3               	rrf	??_Lcd_Set_Cursor,f
  3272  03A5  3EFF               	addlw	-1
  3273  03A6  1D03               	skipz
  3274  03A7  2BA3               	goto	u1535
  3275  03A8  0823               	movf	??_Lcd_Set_Cursor,w
  3276  03A9  00A4               	movwf	??_Lcd_Set_Cursor+1
  3277  03AA  0824               	movf	??_Lcd_Set_Cursor+1,w
  3278  03AB  00A6               	movwf	Lcd_Set_Cursor@z
  3279  03AC                     l2108:
  3280                           
  3281                           ;LCD.c: 62:         y = temp & 0x0F;
  3282  03AC  0828               	movf	Lcd_Set_Cursor@temp,w
  3283  03AD  390F               	andlw	15
  3284  03AE  00A3               	movwf	??_Lcd_Set_Cursor
  3285  03AF  0823               	movf	??_Lcd_Set_Cursor,w
  3286  03B0  00A7               	movwf	Lcd_Set_Cursor@y
  3287  03B1                     l2110:
  3288                           
  3289                           ;LCD.c: 63:         Lcd_Cmd(z);
  3290  03B1  0826               	movf	Lcd_Set_Cursor@z,w
  3291  03B2  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  3292  03B7                     l2112:
  3293                           
  3294                           ;LCD.c: 64:         Lcd_Cmd(y);
  3295  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  3296  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  3297  03B9  0827               	movf	Lcd_Set_Cursor@y,w
  3298  03BA  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  3299  03BF                     l116:
  3300  03BF  0008               	return
  3301  03C0                     __end_of_Lcd_Set_Cursor:
  3302                           
  3303                           	psect	text14
  3304  067A                     __ptext14:	
  3305 ;; *************** function _Lcd_Clear *****************
  3306 ;; Defined at:
  3307 ;;		line 45 in file "LCD.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;		None
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;		None
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  1    wreg      void 
  3314 ;; Registers used:
  3315 ;;		wreg, status,2, status,0, pclath, cstack
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3321 ;;      Params:         0       0       0       0       0
  3322 ;;      Locals:         0       0       0       0       0
  3323 ;;      Temps:          0       0       0       0       0
  3324 ;;      Totals:         0       0       0       0       0
  3325 ;;Total ram usage:        0 bytes
  3326 ;; Hardware stack levels used: 1
  3327 ;; Hardware stack levels required when called: 4
  3328 ;; This function calls:
  3329 ;;		_Lcd_Cmd
  3330 ;; This function is called by:
  3331 ;;		_main
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335  067A                     _Lcd_Clear:	
  3336                           ;psect for function _Lcd_Clear
  3337                           
  3338  067A                     l1974:	
  3339                           ;incstack = 0
  3340                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3341                           
  3342                           
  3343                           ;LCD.c: 46:     Lcd_Cmd(0);
  3344  067A  3000               	movlw	0
  3345  067B  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  3346                           
  3347                           ;LCD.c: 47:     Lcd_Cmd(1);
  3348  0680  3001               	movlw	1
  3349  0681  120A  118A  264D  120A  118A  	fcall	_Lcd_Cmd
  3350  0686                     l110:
  3351  0686  0008               	return
  3352  0687                     __end_of_Lcd_Clear:
  3353                           
  3354                           	psect	text15
  3355  064D                     __ptext15:	
  3356 ;; *************** function _Lcd_Cmd *****************
  3357 ;; Defined at:
  3358 ;;		line 36 in file "LCD.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  a               1    wreg     unsigned char 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  a               1    1[BANK0 ] unsigned char 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0, pclath, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3372 ;;      Params:         0       0       0       0       0
  3373 ;;      Locals:         0       1       0       0       0
  3374 ;;      Temps:          0       1       0       0       0
  3375 ;;      Totals:         0       2       0       0       0
  3376 ;;Total ram usage:        2 bytes
  3377 ;; Hardware stack levels used: 1
  3378 ;; Hardware stack levels required when called: 3
  3379 ;; This function calls:
  3380 ;;		_Lcd_Port
  3381 ;; This function is called by:
  3382 ;;		_Lcd_Clear
  3383 ;;		_Lcd_Set_Cursor
  3384 ;;		_Lcd_Init
  3385 ;;		_Lcd_Shift_Right
  3386 ;;		_Lcd_Shift_Left
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390  064D                     _Lcd_Cmd:	
  3391                           ;psect for function _Lcd_Cmd
  3392                           
  3393                           
  3394                           ;incstack = 0
  3395                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3396                           ;Lcd_Cmd@a stored from wreg
  3397  064D  1283               	bcf	3,5	;RP0=0, select bank0
  3398  064E  1303               	bcf	3,6	;RP1=0, select bank0
  3399  064F  00A1               	movwf	Lcd_Cmd@a
  3400  0650                     l1830:
  3401                           
  3402                           ;LCD.c: 36: void Lcd_Cmd(char a);LCD.c: 37: {;LCD.c: 38:     RA0 = 0;
  3403  0650  1005               	bcf	5,0	;volatile
  3404  0651                     l1832:
  3405                           
  3406                           ;LCD.c: 39:     Lcd_Port(a);
  3407  0651  0821               	movf	Lcd_Cmd@a,w
  3408  0652  120A  118A  260F  120A  118A  	fcall	_Lcd_Port
  3409  0657                     l1834:
  3410                           
  3411                           ;LCD.c: 40:     RA1 = 1;
  3412  0657  1283               	bcf	3,5	;RP0=0, select bank0
  3413  0658  1303               	bcf	3,6	;RP1=0, select bank0
  3414  0659  1485               	bsf	5,1	;volatile
  3415  065A                     l1836:
  3416                           
  3417                           ;LCD.c: 41:     _delay((unsigned long)((4)*(1000000/4000.0)));
  3418  065A  30C7               	movlw	199
  3419  065B  1283               	bcf	3,5	;RP0=0, select bank0
  3420  065C  1303               	bcf	3,6	;RP1=0, select bank0
  3421  065D  00A0               	movwf	??_Lcd_Cmd
  3422  065E                     u1607:
  3423  065E  2E5F               	nop2
  3424  065F  0BA0               	decfsz	??_Lcd_Cmd,f
  3425  0660  2E5E               	goto	u1607
  3426  0661  2E62               	nop2
  3427  0662                     l1838:
  3428                           
  3429                           ;LCD.c: 42:     RA1 = 0;
  3430  0662  1283               	bcf	3,5	;RP0=0, select bank0
  3431  0663  1303               	bcf	3,6	;RP1=0, select bank0
  3432  0664  1085               	bcf	5,1	;volatile
  3433  0665                     l107:
  3434  0665  0008               	return
  3435  0666                     __end_of_Lcd_Cmd:
  3436                           
  3437                           	psect	text16
  3438  060F                     __ptext16:	
  3439 ;; *************** function _Lcd_Port *****************
  3440 ;; Defined at:
  3441 ;;		line 13 in file "LCD.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;  a               1    wreg     unsigned char 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  a               1    6[COMMON] unsigned char 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3455 ;;      Params:         0       0       0       0       0
  3456 ;;      Locals:         1       0       0       0       0
  3457 ;;      Temps:          0       0       0       0       0
  3458 ;;      Totals:         1       0       0       0       0
  3459 ;;Total ram usage:        1 bytes
  3460 ;; Hardware stack levels used: 1
  3461 ;; Hardware stack levels required when called: 2
  3462 ;; This function calls:
  3463 ;;		Nothing
  3464 ;; This function is called by:
  3465 ;;		_Lcd_Cmd
  3466 ;;		_Lcd_Init
  3467 ;;		_Lcd_Write_Char
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471  060F                     _Lcd_Port:	
  3472                           ;psect for function _Lcd_Port
  3473                           
  3474                           
  3475                           ;incstack = 0
  3476                           ; Regs used in _Lcd_Port: [wreg]
  3477                           ;Lcd_Port@a stored from wreg
  3478  060F  00F6               	movwf	Lcd_Port@a
  3479  0610                     l1318:
  3480                           
  3481                           ;LCD.c: 13: void Lcd_Port(char a);LCD.c: 14: {;LCD.c: 15:     if (a & 1)
  3482  0610  1C76               	btfss	Lcd_Port@a,0
  3483  0611  2E13               	goto	u601
  3484  0612  2E14               	goto	u600
  3485  0613                     u601:
  3486  0613  2E18               	goto	l96
  3487  0614                     u600:
  3488  0614                     l1320:
  3489                           
  3490                           ;LCD.c: 16:         RA2 = 1;
  3491  0614  1283               	bcf	3,5	;RP0=0, select bank0
  3492  0615  1303               	bcf	3,6	;RP1=0, select bank0
  3493  0616  1505               	bsf	5,2	;volatile
  3494  0617  2E1B               	goto	l97
  3495  0618                     l96:	
  3496                           ;LCD.c: 17:     else
  3497                           
  3498                           
  3499                           ;LCD.c: 18:         RA2 = 0;
  3500  0618  1283               	bcf	3,5	;RP0=0, select bank0
  3501  0619  1303               	bcf	3,6	;RP1=0, select bank0
  3502  061A  1105               	bcf	5,2	;volatile
  3503  061B                     l97:
  3504                           
  3505                           ;LCD.c: 20:     if (a & 2)
  3506  061B  1CF6               	btfss	Lcd_Port@a,1
  3507  061C  2E1E               	goto	u611
  3508  061D  2E1F               	goto	u610
  3509  061E                     u611:
  3510  061E  2E21               	goto	l98
  3511  061F                     u610:
  3512  061F                     l1322:
  3513                           
  3514                           ;LCD.c: 21:         RA3 = 1;
  3515  061F  1585               	bsf	5,3	;volatile
  3516  0620  2E22               	goto	l99
  3517  0621                     l98:	
  3518                           ;LCD.c: 22:     else
  3519                           
  3520                           
  3521                           ;LCD.c: 23:         RA3 = 0;
  3522  0621  1185               	bcf	5,3	;volatile
  3523  0622                     l99:
  3524                           
  3525                           ;LCD.c: 25:     if (a & 4)
  3526  0622  1D76               	btfss	Lcd_Port@a,2
  3527  0623  2E25               	goto	u621
  3528  0624  2E26               	goto	u620
  3529  0625                     u621:
  3530  0625  2E28               	goto	l100
  3531  0626                     u620:
  3532  0626                     l1324:
  3533                           
  3534                           ;LCD.c: 26:         RA4 = 1;
  3535  0626  1605               	bsf	5,4	;volatile
  3536  0627  2E29               	goto	l101
  3537  0628                     l100:	
  3538                           ;LCD.c: 27:     else
  3539                           
  3540                           
  3541                           ;LCD.c: 28:         RA4 = 0;
  3542  0628  1205               	bcf	5,4	;volatile
  3543  0629                     l101:
  3544                           
  3545                           ;LCD.c: 30:     if (a & 8)
  3546  0629  1DF6               	btfss	Lcd_Port@a,3
  3547  062A  2E2C               	goto	u631
  3548  062B  2E2D               	goto	u630
  3549  062C                     u631:
  3550  062C  2E2F               	goto	l102
  3551  062D                     u630:
  3552  062D                     l1326:
  3553                           
  3554                           ;LCD.c: 31:         RA5 = 1;
  3555  062D  1685               	bsf	5,5	;volatile
  3556  062E  2E30               	goto	l104
  3557  062F                     l102:	
  3558                           ;LCD.c: 32:     else
  3559                           
  3560                           
  3561                           ;LCD.c: 33:         RA5 = 0;
  3562  062F  1285               	bcf	5,5	;volatile
  3563  0630                     l104:
  3564  0630  0008               	return
  3565  0631                     __end_of_Lcd_Port:
  3566                           
  3567                           	psect	text17
  3568  0631                     __ptext17:	
  3569 ;; *************** function _master *****************
  3570 ;; Defined at:
  3571 ;;		line 71 in file "main_master_p1.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;		None
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;		None
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3585 ;;      Params:         0       0       0       0       0
  3586 ;;      Locals:         0       0       0       0       0
  3587 ;;      Temps:          4       0       0       0       0
  3588 ;;      Totals:         4       0       0       0       0
  3589 ;;Total ram usage:        4 bytes
  3590 ;; Hardware stack levels used: 1
  3591 ;; Hardware stack levels required when called: 1
  3592 ;; This function calls:
  3593 ;;		_USART_read
  3594 ;;		_read_red
  3595 ;; This function is called by:
  3596 ;;		Interrupt level 1
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600  0631                     _master:	
  3601                           ;psect for function _master
  3602                           
  3603  0631                     i1l1708:
  3604                           
  3605                           ;main_master_p1.c: 73:     if(PIR1bits.RCIF){
  3606  0631  1283               	bcf	3,5	;RP0=0, select bank0
  3607  0632  1303               	bcf	3,6	;RP1=0, select bank0
  3608  0633  1E8C               	btfss	12,5	;volatile
  3609  0634  2E36               	goto	u117_21
  3610  0635  2E37               	goto	u117_20
  3611  0636                     u117_21:
  3612  0636  2E44               	goto	i1l56
  3613  0637                     u117_20:
  3614  0637                     i1l1710:
  3615                           
  3616                           ;main_master_p1.c: 74:         val = USART_read();
  3617  0637  120A  118A  2695  120A  118A  	fcall	_USART_read
  3618  063C  00F2               	movwf	??_master
  3619  063D  0872               	movf	??_master,w
  3620  063E  00F7               	movwf	_val
  3621  063F                     i1l1712:
  3622                           
  3623                           ;main_master_p1.c: 75:         read_red();
  3624  063F  120A  118A  2417  120A  118A  	fcall	_read_red
  3625  0644                     i1l56:
  3626  0644  0875               	movf	??_master+3,w
  3627  0645  008A               	movwf	10
  3628  0646  0874               	movf	??_master+2,w
  3629  0647  0084               	movwf	4
  3630  0648  0E73               	swapf	??_master+1,w
  3631  0649  0083               	movwf	3
  3632  064A  0EFE               	swapf	btemp,f
  3633  064B  0E7E               	swapf	btemp,w
  3634  064C  0009               	retfie
  3635  064D                     __end_of_master:
  3636                           
  3637                           	psect	intentry
  3638  0004                     __pintentry:	
  3639                           ;incstack = 0
  3640                           ; Regs used in _master: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3641                           
  3642  0004                     interrupt_function:
  3643  007E                     saved_w	set	btemp
  3644  0004  00FE               	movwf	btemp
  3645  0005  0E03               	swapf	3,w
  3646  0006  00F3               	movwf	??_master+1
  3647  0007  0804               	movf	4,w
  3648  0008  00F4               	movwf	??_master+2
  3649  0009  080A               	movf	10,w
  3650  000A  00F5               	movwf	??_master+3
  3651  000B  120A  118A  2E31   	ljmp	_master
  3652                           
  3653                           	psect	text18
  3654  0417                     __ptext18:	
  3655 ;; *************** function _read_red *****************
  3656 ;; Defined at:
  3657 ;;		line 106 in file "main_master_p1.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;		None
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;		None
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      void 
  3664 ;; Registers used:
  3665 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3671 ;;      Params:         0       0       0       0       0
  3672 ;;      Locals:         0       0       0       0       0
  3673 ;;      Temps:          2       0       0       0       0
  3674 ;;      Totals:         2       0       0       0       0
  3675 ;;Total ram usage:        2 bytes
  3676 ;; Hardware stack levels used: 1
  3677 ;; This function calls:
  3678 ;;		Nothing
  3679 ;; This function is called by:
  3680 ;;		_master
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684  0417                     _read_red:	
  3685                           ;psect for function _read_red
  3686                           
  3687  0417                     i1l1520:	
  3688                           ;incstack = 0
  3689                           ; Regs used in _read_red: [wreg-fsr0h+status,2+status,0]
  3690                           
  3691                           
  3692                           ;main_master_p1.c: 107:     switch(val & 224){
  3693  0417  2C4F               	goto	i1l1534
  3694  0418                     i1l1522:
  3695                           
  3696                           ;main_master_p1.c: 109:             mov = val & 31;
  3697  0418  0877               	movf	_val,w
  3698  0419  391F               	andlw	31
  3699  041A  00F0               	movwf	??_read_red
  3700  041B  01F1               	clrf	??_read_red+1
  3701  041C  0870               	movf	??_read_red,w
  3702  041D  1283               	bcf	3,5	;RP0=0, select bank0
  3703  041E  1303               	bcf	3,6	;RP1=0, select bank0
  3704  041F  00C3               	movwf	_mov
  3705  0420  0871               	movf	??_read_red+1,w
  3706  0421  00C4               	movwf	_mov+1
  3707                           
  3708                           ;main_master_p1.c: 110:             break;
  3709  0422  2C66               	goto	i1l76
  3710  0423                     i1l1524:
  3711                           
  3712                           ;main_master_p1.c: 112:             temp = val & 31;
  3713  0423  0877               	movf	_val,w
  3714  0424  391F               	andlw	31
  3715  0425  00F0               	movwf	??_read_red
  3716  0426  01F1               	clrf	??_read_red+1
  3717  0427  0870               	movf	??_read_red,w
  3718  0428  1283               	bcf	3,5	;RP0=0, select bank0
  3719  0429  1303               	bcf	3,6	;RP1=0, select bank0
  3720  042A  00DD               	movwf	_temp
  3721  042B  0871               	movf	??_read_red+1,w
  3722  042C  00DE               	movwf	_temp+1
  3723                           
  3724                           ;main_master_p1.c: 113:             break;
  3725  042D  2C66               	goto	i1l76
  3726  042E                     i1l1526:
  3727                           
  3728                           ;main_master_p1.c: 115:             lux = val & 31;
  3729  042E  0877               	movf	_val,w
  3730  042F  391F               	andlw	31
  3731  0430  00F0               	movwf	??_read_red
  3732  0431  01F1               	clrf	??_read_red+1
  3733  0432  0870               	movf	??_read_red,w
  3734  0433  1283               	bcf	3,5	;RP0=0, select bank0
  3735  0434  1303               	bcf	3,6	;RP1=0, select bank0
  3736  0435  00C1               	movwf	_lux
  3737  0436  0871               	movf	??_read_red+1,w
  3738  0437  00C2               	movwf	_lux+1
  3739                           
  3740                           ;main_master_p1.c: 116:             break;
  3741  0438  2C66               	goto	i1l76
  3742  0439                     i1l1528:
  3743                           
  3744                           ;main_master_p1.c: 118:             hrs = val & 31;
  3745  0439  0877               	movf	_val,w
  3746  043A  391F               	andlw	31
  3747  043B  00F0               	movwf	??_read_red
  3748  043C  01F1               	clrf	??_read_red+1
  3749  043D  0870               	movf	??_read_red,w
  3750  043E  1283               	bcf	3,5	;RP0=0, select bank0
  3751  043F  1303               	bcf	3,6	;RP1=0, select bank0
  3752  0440  00DB               	movwf	_hrs
  3753  0441  0871               	movf	??_read_red+1,w
  3754  0442  00DC               	movwf	_hrs+1
  3755                           
  3756                           ;main_master_p1.c: 119:             break;
  3757  0443  2C66               	goto	i1l76
  3758  0444                     i1l1530:
  3759                           
  3760                           ;main_master_p1.c: 121:             mins = val & 31;
  3761  0444  0877               	movf	_val,w
  3762  0445  391F               	andlw	31
  3763  0446  00F0               	movwf	??_read_red
  3764  0447  01F1               	clrf	??_read_red+1
  3765  0448  0870               	movf	??_read_red,w
  3766  0449  1283               	bcf	3,5	;RP0=0, select bank0
  3767  044A  1303               	bcf	3,6	;RP1=0, select bank0
  3768  044B  00D9               	movwf	_mins
  3769  044C  0871               	movf	??_read_red+1,w
  3770  044D  00DA               	movwf	_mins+1
  3771                           
  3772                           ;main_master_p1.c: 122:             break;
  3773  044E  2C66               	goto	i1l76
  3774  044F                     i1l1534:
  3775  044F  0877               	movf	_val,w
  3776  0450  39E0               	andlw	224
  3777  0451  00F0               	movwf	??_read_red
  3778  0452  01F1               	clrf	??_read_red+1
  3779                           
  3780                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3781                           ; Switch size 1, requested type "simple"
  3782                           ; Number of cases is 1, Range of values is 0 to 0
  3783                           ; switch strategies available:
  3784                           ; Name         Instructions Cycles
  3785                           ; simple_byte            4     3 (average)
  3786                           ; direct_byte           11     8 (fixed)
  3787                           ; jumptable            260     6 (fixed)
  3788                           ;	Chosen strategy is simple_byte
  3789  0453  0871               	movf	??_read_red+1,w
  3790  0454  3A00               	xorlw	0	; case 0
  3791  0455  1903               	skipnz
  3792  0456  2C58               	goto	i1l2232
  3793  0457  2C44               	goto	i1l1530
  3794  0458                     i1l2232:
  3795                           
  3796                           ; Switch size 1, requested type "simple"
  3797                           ; Number of cases is 4, Range of values is 128 to 224
  3798                           ; switch strategies available:
  3799                           ; Name         Instructions Cycles
  3800                           ; simple_byte           13     7 (average)
  3801                           ; jumptable            263     9 (fixed)
  3802                           ;	Chosen strategy is simple_byte
  3803  0458  0870               	movf	??_read_red,w
  3804  0459  3A80               	xorlw	128	; case 128
  3805  045A  1903               	skipnz
  3806  045B  2C18               	goto	i1l1522
  3807  045C  3A20               	xorlw	32	; case 160
  3808  045D  1903               	skipnz
  3809  045E  2C23               	goto	i1l1524
  3810  045F  3A60               	xorlw	96	; case 192
  3811  0460  1903               	skipnz
  3812  0461  2C2E               	goto	i1l1526
  3813  0462  3A20               	xorlw	32	; case 224
  3814  0463  1903               	skipnz
  3815  0464  2C39               	goto	i1l1528
  3816  0465  2C44               	goto	i1l1530
  3817  0466                     i1l76:
  3818  0466  0008               	return
  3819  0467                     __end_of_read_red:
  3820                           
  3821                           	psect	text19
  3822  0695                     __ptext19:	
  3823 ;; *************** function _USART_read *****************
  3824 ;; Defined at:
  3825 ;;		line 30 in file "USART.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;		None
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;		None
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  1    wreg      unsigned char 
  3832 ;; Registers used:
  3833 ;;		wreg
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3839 ;;      Params:         0       0       0       0       0
  3840 ;;      Locals:         0       0       0       0       0
  3841 ;;      Temps:          0       0       0       0       0
  3842 ;;      Totals:         0       0       0       0       0
  3843 ;;Total ram usage:        0 bytes
  3844 ;; Hardware stack levels used: 1
  3845 ;; This function calls:
  3846 ;;		Nothing
  3847 ;; This function is called by:
  3848 ;;		_master
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852  0695                     _USART_read:	
  3853                           ;psect for function _USART_read
  3854                           
  3855  0695                     i1l1014:	
  3856                           ;incstack = 0
  3857                           ; Regs used in _USART_read: [wreg]
  3858                           
  3859                           
  3860                           ;USART.c: 32:     return RCREG;
  3861  0695  1283               	bcf	3,5	;RP0=0, select bank0
  3862  0696  1303               	bcf	3,6	;RP1=0, select bank0
  3863  0697  081A               	movf	26,w	;volatile
  3864  0698                     i1l166:
  3865  0698  0008               	return
  3866  0699                     __end_of_USART_read:
  3867  007E                     btemp	set	126	;btemp
  3868  007E                     wtemp0	set	126
  3869                           
  3870                           	psect	idloc
  3871                           
  3872                           ;Config register IDLOC0 @ 0x2000
  3873                           ;	unspecified, using default values
  3874  2000                     	org	8192
  3875  2000  3FFF               	dw	16383
  3876                           
  3877                           ;Config register IDLOC1 @ 0x2001
  3878                           ;	unspecified, using default values
  3879  2001                     	org	8193
  3880  2001  3FFF               	dw	16383
  3881                           
  3882                           ;Config register IDLOC2 @ 0x2002
  3883                           ;	unspecified, using default values
  3884  2002                     	org	8194
  3885  2002  3FFF               	dw	16383
  3886                           
  3887                           ;Config register IDLOC3 @ 0x2003
  3888                           ;	unspecified, using default values
  3889  2003                     	org	8195
  3890  2003  3FFF               	dw	16383
  3891                           
  3892                           	psect	config
  3893                           
  3894                           ;Config register CONFIG1 @ 0x2007
  3895                           ;	Oscillator Selection bits
  3896                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3897                           ;	Watchdog Timer Enable bit
  3898                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3899                           ;	Power-up Timer Enable bit
  3900                           ;	PWRTE = OFF, PWRT disabled
  3901                           ;	RE3/MCLR pin function select bit
  3902                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3903                           ;	Code Protection bit
  3904                           ;	CP = OFF, Program memory code protection is disabled
  3905                           ;	Data Code Protection bit
  3906                           ;	CPD = OFF, Data memory code protection is disabled
  3907                           ;	Brown Out Reset Selection bits
  3908                           ;	BOREN = OFF, BOR disabled
  3909                           ;	Internal External Switchover bit
  3910                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3911                           ;	Fail-Safe Clock Monitor Enabled bit
  3912                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3913                           ;	Low Voltage Programming Enable bit
  3914                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3915                           ;	In-Circuit Debugger Mode bit
  3916                           ;	DEBUG = 0x1, unprogrammed default
  3917  2007                     	org	8199
  3918  2007  20D4               	dw	8404
  3919                           
  3920                           ;Config register CONFIG2 @ 0x2008
  3921                           ;	Brown-out Reset Selection bit
  3922                           ;	BOR4V = BOR21V, Brown-out Reset set to 2.1V
  3923                           ;	Flash Program Memory Self Write Enable bits
  3924                           ;	WRT = OFF, Write protection off
  3925  2008                     	org	8200
  3926  2008  3EFF               	dw	16127

Data Sizes:
    Strings     43
    Constant    10
    Data        6
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       8
    BANK0            80     33      63
    BANK1            80      0      20
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_2(CODE[20]), STR_1(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> srow(BANK1[20]), frow(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 20
		 -> srow(BANK1[20]), frow(BANK0[20]), 


Critical Paths under _main in COMMON

    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _setup->_int_osc_MHz
    _USART_set->___lldiv
    _Lcd_Init->_Lcd_Port
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _master in COMMON

    _master->_read_red

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_USART_set
    _USART_set->___lldiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd

Critical Paths under _master in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _master in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _master in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _master in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    4617
                                             32 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    20      7    2717
                                             13 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     316
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              7 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              6 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     672
                           _Lcd_Init
                          _USART_set
                        _int_osc_MHz
 ---------------------------------------------------------------------------------
 (2) _int_osc_MHz                                          3     3      0      31
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _USART_set                                           16    12      4     434
                                             13 BANK0     16    12      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              6 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     207
                                              2 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     4      0     420
                                              4 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     218
                                              0 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     689
                                              2 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     119
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0     119
                                              0 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              6 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _master                                               4     4      0       0
                                              2 COMMON     4     4      0
                         _USART_read
                           _read_red
 ---------------------------------------------------------------------------------
 (6) _read_red                                             2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _USART_read                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _setup
     _Lcd_Init
       _Lcd_Cmd
       _Lcd_Port
     _USART_set
       ___lldiv
     _int_osc_MHz
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _master (ROOT)
   _USART_read
   _read_red

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      14       7       25.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      3F       5       78.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       8       1       57.1%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5B      12        0.0%
ABS                  0      0      5B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Sat Sep 24 14:07:16 2022

                       pc 0002                        l79 05E9                        l96 0618  
                      l97 061B                        l98 0621                        l99 0622  
                      fsr 0004       ___wmul@multiplicand 0022                       l100 0628  
                     l101 0629                       l102 062F                       l110 0686  
                     l104 0630                       l122 0526                       l107 0665  
                     l116 03BF                       l141 04E8                       l119 0416  
                     l303 05AC                       l128 060E                       l305 05C4  
                     l146 04E9                       l163 02FF                       l264 0069  
                     l282 0143                       l339 0367                       l299 021E  
                     l575 04AC                       l585 0562                       l756 0679  
                     _RA0 0028                       _RA1 0029                       _RA2 002A  
                     _RA3 002B                       _RA4 002C                       _RA5 002D  
                     u600 0614                       u601 0613                       u610 061F  
                     u611 061E                       u620 0626                       u700 035F  
                     u621 0625                       u701 035E                       u630 062D  
                     u710 02A9                       u631 062C                       u640 0312  
                     u720 02C2                       u641 0311                       u810 0471  
                     u731 02D4                       u715 02A4                       u811 0470  
                     u660 0326                       u732 02D5                       u661 0325  
                     u733 02DA                       u725 02BD                       u734 02DB  
                     u830 0483                       u655 0317                       u735 02E0  
                     u831 0482                       u680 0341                       u736 02E1  
                     u681 0340                       u825 0475                       u850 0494  
                     u675 0328                       u851 0493                       u685 033D  
                     u845 0484                       u870 04A8                       u695 0351  
                     u871 04A7                       u855 0490                       u865 049C  
                     _hrs 005B                       _val 0077                       _mov 0043  
                     _lux 0041                       fsr0 0004                       indf 0000  
                    l2000 00BD                      l2010 00F8                      l2002 00C1  
                    l2100 0386                      l2012 00FC                      l2110 03B1  
                    l2102 038C                      l2030 0131                      l2014 0100  
                    l2006 00D1                      l1320 0614                      l2112 03B7  
                    l2104 0395                      l2120 0603                      l2040 015E  
                    l2032 0137                      l2024 010B                      l2016 0104  
                    l2008 00F0                      l1322 061F                      l2106 039B  
                    l2114 05ED                      l1410 0290                      l2050 0179  
                    l2042 0162                      l2034 013D                      l2018 0109  
                    l2130 0255                      l2122 021F                      l1324 0626  
                    l2108 03AC                      l2116 05F0                      l1340 0312  
                    l1420 02F8                      l1412 0296                      l2060 019E  
                    l2052 0180                      l2044 0168                      l2036 014E  
                    l2028 0127                      l2140 0289                      l2132 0265  
                    l2124 0224                      l1326 062D                      l1318 0610  
                    l2118 05FB                      l1350 0341                      l1342 0315  
                    l1422 02FB                      l1414 0299                      l2230 04DA  
                    l2062 01A2                      l2054 0184                      l2070 01BF  
                    l2046 016F                      l2038 015A                      l2134 026F  
                    l2126 0229                      l1352 034F                      l1344 0322  
                    l1424 02FE                      l1416 02F4                      l2072 01C4  
                    l2064 01AE                      l2048 0173                      l2056 0191  
                    l2080 0208                      l2136 0275                      l2128 0241  
                    l1354 0350                      l1346 0326                      l1338 0300  
                    l1418 02F5                      l2074 01F4                      l2066 01B4  
                    l2058 0197                      l2082 021A                      l2226 007C  
                    l2138 0284                      l1356 0359                      l1348 032F  
                    l2076 01FB                      l2068 01BB                      l2228 00E5  
                    l2094 036B                      l1358 035F                      l2078 01FF  
                    l2096 0370                      l1480 047B                      l1472 0467  
                    l2098 0381                      l1490 049B                      l1482 047F  
                    l1474 046B                      l1900 0519                      l1492 04A2  
                    l1484 0483                      l1476 0471                      l1830 0650  
                    l1902 051C                      l1486 0494                      l1478 0474  
                    l1494 04A8                      l1910 0670                      l1832 0651  
                    l1904 0523                      l1840 04AE                      l1488 049A  
                    l1920 05A2                      l1912 0676                      l1834 0657  
                    l1850 04C9                      l1842 04AF                      l1922 05A6  
                    l1914 0678                      l1906 0669                      l1836 065A  
                    l1860 03C0                      l1844 04B6                      l1940 053D  
                    l1932 0527                      l1924 05B3                      l1908 066A  
                    l1838 0662                      l1870 03E6                      l1862 03C6  
                    l1846 04BD                      l1854 04D0                      l1942 0541  
                    l1934 052F                      l1950 055E                      l1926 05BA  
                    l1918 059E                      l1880 0404                      l1872 03EC  
                    l1864 03D1                      l1848 04C4                      l1960 05CF  
                    l1944 054B                      l1936 0532                      l1928 05C0  
                    l1890 04F8                      l1882 040A                      l1874 03F2  
                    l1866 03DF                      l1970 05E8                      l1962 05D2  
                    l1954 05C5                      l1946 0551                      l1938 0539  
                    l1892 0506                      l1884 0410                      l1876 03F8  
                    l1868 03E5                      l1964 05D3                      l1956 05CB  
                    l1948 0558                      l1980 0059                      l1974 067A  
                    l1894 0509                      l1886 04ED                      l1878 03FE  
                    l1966 05D8                      l1958 05CE                      l1990 006E  
                    l1982 0060                      l1896 0510                      l1888 04F7  
                    l1968 05E7                      l1992 0081                      l1984 0065  
                    l1976 004E                      l1898 0513                      l1994 0091  
                    l1986 006A                      l1978 0053                      l1996 0095  
                    l1998 00AA                      STR_1 0573                      STR_2 058A  
                    u1200 0670                      u1201 066F                      u1210 0676  
                    u1211 0675                      u1220 05A6                      u1221 05A5  
                    u1310 055E                      u1311 055D                      u1400 014E  
                    u1320 0059                      u1305 0552                      u1401 014D  
                    u1321 0058                      u1250 05C0                      u1410 0162  
                    u1330 0091                      u1251 05BF                      u1235 05AD  
                    u1411 0161                      u1331 0090                      u1500 0370  
                    u1260 052F                      u1420 0168                      u1340 00D1  
                    u1501 036F                      u1261 052E                      u1245 05B4  
                    u1421 0167                      u1405 014A                      u1341 00D0  
                    u1430 0179                      u1350 0100                      u1431 0178  
                    u1351 00FF                      u1520 039B                      u1280 0541  
                    u1440 0190                      u1360 0126                      u1521 039A  
                    u1281 0540                      u1441 018F                      u1361 0125  
                    u1290 054B                      u1450 0197                      u1370 0131  
                    u1515 0378                      u1195 04FB                      u1291 054A  
                    u1275 0533                      u1451 0196                      u1371 0130  
                    u1540 060E                      u1460 01AE                      u1380 0137  
                    u1541 060D                      u1461 01AD                      u1381 0136  
                    u1365 0122                      u1470 01B4                      u1390 013D  
                    u1550 0284                      u1607 065E                      u1535 03A3  
                    u1295 0547                      u1471 01B3                      u1391 013C  
                    u1551 0283                      u1480 0208                      u1481 0207  
                    u1490 021A                      u1491 0219                      u1555 0280  
                    u1567 03CC                      u1577 03DB                      u1587 050D  
                    u1597 0520                      i1l56 0644                      i1l76 0466  
       ?_Lcd_Write_String 0070                      _main 021F                      _frow 0045  
                    _mins 0059                      _temp 005D                      btemp 007E  
                    _srow 00A0                      start 000E        ??_Lcd_Write_String 0024  
         __end_of_Lcd_Cmd 0666                     ?_main 0070                     _ANSEL 0188  
         __end_of___lldiv 0368           __end_of___lwdiv 04AD                     i1l166 0698  
         __end_of___lwmod 0563                     _RCREG 001A                     _SPBRG 0099  
                   _PORTB 0006                     _TRISA 0085                     _TRISB 0086  
         int_osc_MHz@freq 0076           __end_of_dpowers 0573           __end_of_isdigit 067A  
                   _setup 05C5              ?_int_osc_MHz 0070                     pclath 000A  
                   status 0003                     wtemp0 007E           __end_of_sprintf 021F  
        __end_of_Lcd_Init 0417          __end_of_Lcd_Port 0631               ?_USART_read 0070  
         __initialization 0011              __end_of_main 0290                    ??_main 0040  
                  ?_setup 0070                    _ANSELH 0189                    i1l1014 0695  
                  i1l2232 0458                    i1l1520 0417                    i1l1530 0444  
                  i1l1522 0418                    i1l1524 0423                    i1l1526 042E  
                  i1l1534 044F                    i1l1710 0637                    i1l1528 0439  
                  i1l1712 063F                    i1l1708 0631                    u117_20 0637  
                  u117_21 0636                 ??_Lcd_Cmd 0020                    _SPBRGH 009A  
                  ___wmul 059E                 ??___lldiv 0076                 ??___lwdiv 0076  
               ??___lwmod 002B                    _master 0631          __end_of_read_red 0467  
       __end_of_USART_set 0300                 ??_isdigit 0076                    saved_w 007E  
               ??_sprintf 0034           Lcd_Set_Cursor@a 0025           Lcd_Set_Cursor@b 0022  
         Lcd_Set_Cursor@y 0027           Lcd_Set_Cursor@z 0026   __end_of__initialization 0047  
       __end_of_Lcd_Clear 0687            __pcstackCOMMON 0070              __pidataBANK0 068F  
           __end_of_setup 05EA            _Lcd_Set_Cursor 0368                 ?_Lcd_Init 0070  
               ?_Lcd_Port 0070              sprintf@width 003C                   ??_setup 0077  
              __pbssBANK0 0041                __pbssBANK1 00A0                __pmaintext 021F  
                 ?___wmul 0020                __pintentry 0004                   ?_master 0070  
  __end_of_Lcd_Set_Cursor 03C0                ??_Lcd_Init 0022                ??_Lcd_Port 0076  
              __stringtab 0563            _Lcd_Write_Char 04EA                   _Lcd_Cmd 064D  
               ?_read_red 0070              ??_USART_read 0070                   ___lldiv 0300  
                 ___lwdiv 0467                   ___lwmod 0527           ?_Lcd_Set_Cursor 0022  
                 __ptext1 004B                   __ptext2 0666                   __ptext3 059E  
                 __ptext4 0527                   __ptext5 0467                   __ptext6 05C5  
                 __ptext7 04AD                   __ptext8 0290                   __ptext9 0300  
                 _dpowers 0569                   _isdigit 0666                   _sprintf 004B  
                 clrloop0 0688        __end_of_USART_read 0699    __end_of_Lcd_Write_Char 0527  
    end_of_initialization 0047                ??_read_red 0070           ___lldiv@divisor 0020  
         ___lldiv@counter 002C                 _RCSTAbits 0018                 Lcd_Port@a 0076  
               _USART_set 0290           ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0027  
       Lcd_Write_String@i 0025                 _TXSTAbits 0098                 _Lcd_Clear 067A  
          __end_of___wmul 05C5          _Lcd_Write_String 05EA               _BAUDCTLbits 0187  
          __end_of_master 064D       start_initialization 0011                ?_USART_set 002D  
       USART_set@baudrate 002D                ?_Lcd_Clear 0070                  ??___wmul 0076  
             __pdataBANK0 0059           Lcd_Write_Char@a 0023                  ??_master 0072  
         Lcd_Write_Char@y 0022               __pbssCOMMON 0077                 ___latbits 0002  
           __pcstackBANK0 0020             ??_int_osc_MHz 0020                  ?_Lcd_Cmd 0070  
             sprintf@flag 003B               sprintf@prec 0038          ___lwdiv@dividend 0022  
        ??_Lcd_Set_Cursor 0023                  ?___lldiv 0020                  ?___lwdiv 0020  
                ?___lwmod 0027                 __pstrings 0563                  ?_isdigit 0070  
             ??_USART_set 0031          ___lwdiv@quotient 0024                  ?_sprintf 002D  
       interrupt_function 0004            ___wmul@product 0024                 clear_ram0 0687  
                _PIE1bits 008C       __end_of_int_osc_MHz 04EA                  Lcd_Cmd@a 0021  
                _PIR1bits 000C               ??_Lcd_Clear 0077               __stringbase 0568  
       ___wmul@multiplier 0020          ??_Lcd_Write_Char 0020                  _Lcd_Init 03C0  
                _Lcd_Port 060F  __end_of_Lcd_Write_String 060F        __end_of__stringtab 0569  
             _isdigit$842 0020                sprintf@val 0039           ___lwdiv@divisor 0020  
         ___lwdiv@counter 0026                  __ptext10 03C0                  __ptext11 05EA  
                __ptext12 04EA                  __ptext13 0368                  __ptext14 067A  
                __ptext15 064D                  __ptext16 060F                  __ptext17 0631  
                __ptext18 0417                  __ptext19 0695               _int_osc_MHz 04AD  
                _read_red 0417                _INTCONbits 000B                  isdigit@c 0021  
      Lcd_Write_Char@temp 0021                  intlevel1 0000                 sprintf@ap 0037  
               sprintf@sp 003E          ___lwmod@dividend 0029          ___lldiv@dividend 0024  
               stringcode 0563                _OSCCONbits 008F        Lcd_Set_Cursor@temp 0028  
                sprintf@c 003F                  sprintf@f 002D          ___lldiv@quotient 0028  
         ___lwmod@divisor 0027           ___lwmod@counter 002C                  stringdir 0563  
                stringtab 0563                _USART_read 0695  
