

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Mon Sep 19 12:14:35 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    17                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 2.40
    40                           ; Generated 17/11/2021 GMT
    41                           ; 
    42                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F887 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0088                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0094                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009E                     	;# 
   136  009F                     	;# 
   137  0105                     	;# 
   138  0107                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  0185                     	;# 
   147  0187                     	;# 
   148  0188                     	;# 
   149  0189                     	;# 
   150  018C                     	;# 
   151  018D                     	;# 
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000E                     	;# 
   168  000F                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0013                     	;# 
   173  0014                     	;# 
   174  0015                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  001D                     	;# 
   185  001E                     	;# 
   186  001F                     	;# 
   187  0081                     	;# 
   188  0085                     	;# 
   189  0086                     	;# 
   190  0087                     	;# 
   191  0088                     	;# 
   192  0089                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  008F                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0093                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0094                     	;# 
   204  0095                     	;# 
   205  0096                     	;# 
   206  0097                     	;# 
   207  0098                     	;# 
   208  0099                     	;# 
   209  009A                     	;# 
   210  009B                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009E                     	;# 
   214  009F                     	;# 
   215  0105                     	;# 
   216  0107                     	;# 
   217  0108                     	;# 
   218  0109                     	;# 
   219  010C                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  010F                     	;# 
   224  0185                     	;# 
   225  0187                     	;# 
   226  0188                     	;# 
   227  0189                     	;# 
   228  018C                     	;# 
   229  018D                     	;# 
   230  0000                     	;# 
   231  0001                     	;# 
   232  0002                     	;# 
   233  0003                     	;# 
   234  0004                     	;# 
   235  0005                     	;# 
   236  0006                     	;# 
   237  0007                     	;# 
   238  0008                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  000E                     	;# 
   246  000F                     	;# 
   247  0010                     	;# 
   248  0011                     	;# 
   249  0012                     	;# 
   250  0013                     	;# 
   251  0014                     	;# 
   252  0015                     	;# 
   253  0015                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001B                     	;# 
   261  001C                     	;# 
   262  001D                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  0081                     	;# 
   266  0085                     	;# 
   267  0086                     	;# 
   268  0087                     	;# 
   269  0088                     	;# 
   270  0089                     	;# 
   271  008C                     	;# 
   272  008D                     	;# 
   273  008E                     	;# 
   274  008F                     	;# 
   275  0090                     	;# 
   276  0091                     	;# 
   277  0092                     	;# 
   278  0093                     	;# 
   279  0093                     	;# 
   280  0093                     	;# 
   281  0094                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009A                     	;# 
   288  009B                     	;# 
   289  009C                     	;# 
   290  009D                     	;# 
   291  009E                     	;# 
   292  009F                     	;# 
   293  0105                     	;# 
   294  0107                     	;# 
   295  0108                     	;# 
   296  0109                     	;# 
   297  010C                     	;# 
   298  010C                     	;# 
   299  010D                     	;# 
   300  010E                     	;# 
   301  010F                     	;# 
   302  0185                     	;# 
   303  0187                     	;# 
   304  0188                     	;# 
   305  0189                     	;# 
   306  018C                     	;# 
   307  018D                     	;# 
   308  0000                     	;# 
   309  0001                     	;# 
   310  0002                     	;# 
   311  0003                     	;# 
   312  0004                     	;# 
   313  0005                     	;# 
   314  0006                     	;# 
   315  0007                     	;# 
   316  0008                     	;# 
   317  0009                     	;# 
   318  000A                     	;# 
   319  000B                     	;# 
   320  000C                     	;# 
   321  000D                     	;# 
   322  000E                     	;# 
   323  000E                     	;# 
   324  000F                     	;# 
   325  0010                     	;# 
   326  0011                     	;# 
   327  0012                     	;# 
   328  0013                     	;# 
   329  0014                     	;# 
   330  0015                     	;# 
   331  0015                     	;# 
   332  0016                     	;# 
   333  0017                     	;# 
   334  0018                     	;# 
   335  0019                     	;# 
   336  001A                     	;# 
   337  001B                     	;# 
   338  001B                     	;# 
   339  001C                     	;# 
   340  001D                     	;# 
   341  001E                     	;# 
   342  001F                     	;# 
   343  0081                     	;# 
   344  0085                     	;# 
   345  0086                     	;# 
   346  0087                     	;# 
   347  0088                     	;# 
   348  0089                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  008F                     	;# 
   353  0090                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0093                     	;# 
   358  0093                     	;# 
   359  0094                     	;# 
   360  0095                     	;# 
   361  0096                     	;# 
   362  0097                     	;# 
   363  0098                     	;# 
   364  0099                     	;# 
   365  009A                     	;# 
   366  009B                     	;# 
   367  009C                     	;# 
   368  009D                     	;# 
   369  009E                     	;# 
   370  009F                     	;# 
   371  0105                     	;# 
   372  0107                     	;# 
   373  0108                     	;# 
   374  0109                     	;# 
   375  010C                     	;# 
   376  010C                     	;# 
   377  010D                     	;# 
   378  010E                     	;# 
   379  010F                     	;# 
   380  0185                     	;# 
   381  0187                     	;# 
   382  0188                     	;# 
   383  0189                     	;# 
   384  018C                     	;# 
   385  018D                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  000E                     	;# 
   402  000F                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0013                     	;# 
   407  0014                     	;# 
   408  0015                     	;# 
   409  0015                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001B                     	;# 
   417  001C                     	;# 
   418  001D                     	;# 
   419  001E                     	;# 
   420  001F                     	;# 
   421  0081                     	;# 
   422  0085                     	;# 
   423  0086                     	;# 
   424  0087                     	;# 
   425  0088                     	;# 
   426  0089                     	;# 
   427  008C                     	;# 
   428  008D                     	;# 
   429  008E                     	;# 
   430  008F                     	;# 
   431  0090                     	;# 
   432  0091                     	;# 
   433  0092                     	;# 
   434  0093                     	;# 
   435  0093                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0095                     	;# 
   439  0096                     	;# 
   440  0097                     	;# 
   441  0098                     	;# 
   442  0099                     	;# 
   443  009A                     	;# 
   444  009B                     	;# 
   445  009C                     	;# 
   446  009D                     	;# 
   447  009E                     	;# 
   448  009F                     	;# 
   449  0105                     	;# 
   450  0107                     	;# 
   451  0108                     	;# 
   452  0109                     	;# 
   453  010C                     	;# 
   454  010C                     	;# 
   455  010D                     	;# 
   456  010E                     	;# 
   457  010F                     	;# 
   458  0185                     	;# 
   459  0187                     	;# 
   460  0188                     	;# 
   461  0189                     	;# 
   462  018C                     	;# 
   463  018D                     	;# 
   464                           
   465                           	psect	idataBANK0
   466  0664                     __pidataBANK0:
   467                           
   468                           ;initializer for _mins
   469  0664  340F               	retlw	15
   470  0665  3400               	retlw	0
   471                           
   472                           ;initializer for _hrs
   473  0666  340F               	retlw	15
   474  0667  3400               	retlw	0
   475                           
   476                           ;initializer for _temp
   477  0668  3418               	retlw	24
   478  0669  3400               	retlw	0
   479                           
   480                           	psect	strings
   481  053A                     __pstrings:
   482  053A                     stringtab:
   483  053A                     __stringtab:
   484  053A                     stringcode:	
   485                           ;	String table - string pointers are 1 byte each
   486                           
   487  053A                     stringdir:
   488  053A  3005               	movlw	high stringdir
   489  053B  008A               	movwf	10
   490  053C  0804               	movf	4,w
   491  053D  0A84               	incf	4,f
   492  053E  0782               	addwf	2,f
   493  053F                     __stringbase:
   494  053F  3400               	retlw	0
   495  0540                     __end_of__stringtab:
   496  0540                     _dpowers:
   497  0540  3401               	retlw	1
   498  0541  3400               	retlw	0
   499  0542  340A               	retlw	10
   500  0543  3400               	retlw	0
   501  0544  3464               	retlw	100
   502  0545  3400               	retlw	0
   503  0546  34E8               	retlw	232
   504  0547  3403               	retlw	3
   505  0548  3410               	retlw	16
   506  0549  3427               	retlw	39
   507  054A                     __end_of_dpowers:
   508  001A                     _RCREG	set	26
   509  0018                     _RCSTAbits	set	24
   510  000B                     _INTCONbits	set	11
   511  000C                     _PIR1bits	set	12
   512  0029                     _RA1	set	41
   513  0028                     _RA0	set	40
   514  002D                     _RA5	set	45
   515  002C                     _RA4	set	44
   516  002B                     _RA3	set	43
   517  002A                     _RA2	set	42
   518  008C                     _PIE1bits	set	140
   519  0099                     _SPBRG	set	153
   520  009A                     _SPBRGH	set	154
   521  0098                     _TXSTAbits	set	152
   522  008F                     _OSCCONbits	set	143
   523  0086                     _TRISB	set	134
   524  0085                     _TRISA	set	133
   525  0187                     _BAUDCTLbits	set	391
   526  0189                     _ANSELH	set	393
   527  0188                     _ANSEL	set	392
   528  054A                     STR_1:
   529  054A  3425               	retlw	37	;'%'
   530  054B  3430               	retlw	48	;'0'
   531  054C  3432               	retlw	50	;'2'
   532  054D  3464               	retlw	100	;'d'
   533  054E  343A               	retlw	58	;':'
   534  054F  3425               	retlw	37	;'%'
   535  0550  3430               	retlw	48	;'0'
   536  0551  3432               	retlw	50	;'2'
   537  0552  3464               	retlw	100	;'d'
   538  0553  3420               	retlw	32	;' '
   539  0554  3420               	retlw	32	;' '
   540  0555  3420               	retlw	32	;' '
   541  0556  3420               	retlw	32	;' '
   542  0557  344C               	retlw	76	;'L'
   543  0558  3475               	retlw	117	;'u'
   544  0559  347A               	retlw	122	;'z'
   545  055A  343A               	retlw	58	;':'
   546  055B  3420               	retlw	32	;' '
   547  055C  3425               	retlw	37	;'%'
   548  055D  3432               	retlw	50	;'2'
   549  055E  3464               	retlw	100	;'d'
   550  055F  3400               	retlw	0
   551  0560                     STR_2:
   552  0560  344D               	retlw	77	;'M'
   553  0561  346F               	retlw	111	;'o'
   554  0562  3476               	retlw	118	;'v'
   555  0563  343A               	retlw	58	;':'
   556  0564  3420               	retlw	32	;' '
   557  0565  3425               	retlw	37	;'%'
   558  0566  3464               	retlw	100	;'d'
   559  0567  3420               	retlw	32	;' '
   560  0568  3420               	retlw	32	;' '
   561  0569  3454               	retlw	84	;'T'
   562  056A  3465               	retlw	101	;'e'
   563  056B  346D               	retlw	109	;'m'
   564  056C  3470               	retlw	112	;'p'
   565  056D  343A               	retlw	58	;':'
   566  056E  3420               	retlw	32	;' '
   567  056F  3425               	retlw	37	;'%'
   568  0570  3432               	retlw	50	;'2'
   569  0571  3464               	retlw	100	;'d'
   570  0572  3400               	retlw	0
   571                           
   572                           	psect	cinit
   573  0011                     start_initialization:	
   574                           ; #config settings
   575                           
   576  0011                     __initialization:
   577                           
   578                           ; Initialize objects allocated to BANK0
   579  0011  120A  118A  2664  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   580  0016  00EA               	movwf	__pdataBANK0& (0+127)
   581  0017  120A  118A  2665  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   582  001C  00EB               	movwf	(__pdataBANK0+1)& (0+127)
   583  001D  120A  118A  2666  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   584  0022  00EC               	movwf	(__pdataBANK0+2)& (0+127)
   585  0023  120A  118A  2667  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   586  0028  00ED               	movwf	(__pdataBANK0+3)& (0+127)
   587  0029  120A  118A  2668  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   588  002E  00EE               	movwf	(__pdataBANK0+4)& (0+127)
   589  002F  120A  118A  2669  120A  118A  	fcall	__pidataBANK0+5	;fetch initializer
   590  0034  00EF               	movwf	(__pdataBANK0+5)& (0+127)
   591                           
   592                           ; Clear objects allocated to BANK0
   593  0035  1383               	bcf	3,7	;select IRP bank0
   594  0036  3020               	movlw	low __pbssBANK0
   595  0037  0084               	movwf	4
   596  0038  304A               	movlw	low (__pbssBANK0+42)
   597  0039  120A  118A  265C  120A  118A  	fcall	clear_ram0
   598                           
   599                           ; Clear objects allocated to COMMON
   600  003E  01F7               	clrf	__pbssCOMMON& (0+127)
   601  003F                     end_of_initialization:	
   602                           ;End of C runtime variable initialization code
   603                           
   604  003F                     __end_of__initialization:
   605  003F  0183               	clrf	3
   606  0040  120A  118A  2AEF   	ljmp	_main	;jump to C main() function
   607                           
   608                           	psect	bssCOMMON
   609  0077                     __pbssCOMMON:
   610  0077                     _val:
   611  0077                     	ds	1
   612                           
   613                           	psect	bssBANK0
   614  0020                     __pbssBANK0:
   615  0020                     _mov:
   616  0020                     	ds	2
   617  0022                     _srow:
   618  0022                     	ds	20
   619  0036                     _frow:
   620  0036                     	ds	20
   621                           
   622                           	psect	dataBANK0
   623  006A                     __pdataBANK0:
   624  006A                     _mins:
   625  006A                     	ds	2
   626  006C                     _hrs:
   627  006C                     	ds	2
   628  006E                     _temp:
   629  006E                     	ds	2
   630                           
   631                           	psect	clrtext
   632  065C                     clear_ram0:	
   633                           ;	Called with FSR containing the base address, and
   634                           ;	W with the last address+1
   635                           
   636  065C  0064               	clrwdt	;clear the watchdog before getting into this loop
   637  065D                     clrloop0:
   638  065D  0180               	clrf	0	;clear RAM location pointed to by FSR
   639  065E  0A84               	incf	4,f	;increment pointer
   640  065F  0604               	xorwf	4,w	;XOR with final address
   641  0660  1903               	btfsc	3,2	;have we reached the end yet?
   642  0661  3400               	retlw	0	;all done for this memory range, return
   643  0662  0604               	xorwf	4,w	;XOR again to restore value
   644  0663  2E5D               	goto	clrloop0	;do the next byte
   645                           
   646                           	psect	cstackBANK1
   647  00A0                     __pcstackBANK1:
   648  00A0                     ??_main:
   649                           
   650                           ; 1 bytes @ 0x0
   651  00A0                     	ds	1
   652                           
   653                           	psect	cstackCOMMON
   654  0070                     __pcstackCOMMON:
   655  0070                     ?_isdigit:
   656  0070                     ?_USART_read:	
   657                           ; 1 bit 
   658                           
   659  0070                     ??_USART_read:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_read_red:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ??_read_red:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_setup:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_Lcd_Clear:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_Lcd_Write_String:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_int_osc_MHz:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_Lcd_Init:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ?_master:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_main:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ?_Lcd_Port:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ?_Lcd_Cmd:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ?_Lcd_Write_Char:	
   696                           ; 1 bytes @ 0x0
   697                           
   698                           
   699                           ; 1 bytes @ 0x0
   700  0070                     	ds	2
   701  0072                     ??_master:
   702                           
   703                           ; 1 bytes @ 0x2
   704  0072                     	ds	4
   705  0076                     ??_isdigit:
   706  0076                     ??_Lcd_Port:	
   707                           ; 1 bytes @ 0x6
   708                           
   709  0076                     ??___wmul:	
   710                           ; 1 bytes @ 0x6
   711                           
   712  0076                     ??___lldiv:	
   713                           ; 1 bytes @ 0x6
   714                           
   715  0076                     ??___lwdiv:	
   716                           ; 1 bytes @ 0x6
   717                           
   718  0076                     Lcd_Port@a:	
   719                           ; 1 bytes @ 0x6
   720                           
   721  0076                     int_osc_MHz@freq:	
   722                           ; 1 bytes @ 0x6
   723                           
   724                           
   725                           ; 1 bytes @ 0x6
   726  0076                     	ds	1
   727  0077                     ??_setup:
   728  0077                     ??_Lcd_Clear:	
   729                           ; 1 bytes @ 0x7
   730                           
   731                           
   732                           	psect	cstackBANK0
   733  004A                     __pcstackBANK0:	
   734                           ; 1 bytes @ 0x7
   735                           
   736  004A                     ??_int_osc_MHz:
   737  004A                     ??_Lcd_Cmd:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  004A                     ??_Lcd_Write_Char:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  004A                     ?___wmul:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  004A                     ?___lwdiv:	
   747                           ; 2 bytes @ 0x0
   748                           
   749  004A                     ?___lldiv:	
   750                           ; 2 bytes @ 0x0
   751                           
   752  004A                     _isdigit$840:	
   753                           ; 4 bytes @ 0x0
   754                           
   755  004A                     ___wmul@multiplier:	
   756                           ; 1 bytes @ 0x0
   757                           
   758  004A                     ___lwdiv@divisor:	
   759                           ; 2 bytes @ 0x0
   760                           
   761  004A                     ___lldiv@divisor:	
   762                           ; 2 bytes @ 0x0
   763                           
   764                           
   765                           ; 4 bytes @ 0x0
   766  004A                     	ds	1
   767  004B                     Lcd_Cmd@a:
   768  004B                     Lcd_Write_Char@temp:	
   769                           ; 1 bytes @ 0x1
   770                           
   771  004B                     isdigit@c:	
   772                           ; 1 bytes @ 0x1
   773                           
   774                           
   775                           ; 1 bytes @ 0x1
   776  004B                     	ds	1
   777  004C                     ?_Lcd_Set_Cursor:
   778  004C                     ??_Lcd_Init:	
   779                           ; 1 bytes @ 0x2
   780                           
   781  004C                     Lcd_Set_Cursor@b:	
   782                           ; 1 bytes @ 0x2
   783                           
   784  004C                     Lcd_Write_Char@y:	
   785                           ; 1 bytes @ 0x2
   786                           
   787  004C                     ___wmul@multiplicand:	
   788                           ; 1 bytes @ 0x2
   789                           
   790  004C                     ___lwdiv@dividend:	
   791                           ; 2 bytes @ 0x2
   792                           
   793                           
   794                           ; 2 bytes @ 0x2
   795  004C                     	ds	1
   796  004D                     ??_Lcd_Set_Cursor:
   797  004D                     Lcd_Write_Char@a:	
   798                           ; 1 bytes @ 0x3
   799                           
   800                           
   801                           ; 1 bytes @ 0x3
   802  004D                     	ds	1
   803  004E                     ??_Lcd_Write_String:
   804  004E                     ___wmul@product:	
   805                           ; 1 bytes @ 0x4
   806                           
   807  004E                     ___lwdiv@quotient:	
   808                           ; 2 bytes @ 0x4
   809                           
   810  004E                     ___lldiv@dividend:	
   811                           ; 2 bytes @ 0x4
   812                           
   813                           
   814                           ; 4 bytes @ 0x4
   815  004E                     	ds	1
   816  004F                     Lcd_Set_Cursor@a:
   817  004F                     Lcd_Write_String@i:	
   818                           ; 1 bytes @ 0x5
   819                           
   820                           
   821                           ; 2 bytes @ 0x5
   822  004F                     	ds	1
   823  0050                     Lcd_Set_Cursor@z:
   824  0050                     ___lwdiv@counter:	
   825                           ; 1 bytes @ 0x6
   826                           
   827                           
   828                           ; 1 bytes @ 0x6
   829  0050                     	ds	1
   830  0051                     ?___lwmod:
   831  0051                     Lcd_Set_Cursor@y:	
   832                           ; 2 bytes @ 0x7
   833                           
   834  0051                     Lcd_Write_String@a:	
   835                           ; 1 bytes @ 0x7
   836                           
   837  0051                     ___lwmod@divisor:	
   838                           ; 1 bytes @ 0x7
   839                           
   840                           
   841                           ; 2 bytes @ 0x7
   842  0051                     	ds	1
   843  0052                     Lcd_Set_Cursor@temp:
   844  0052                     ___lldiv@quotient:	
   845                           ; 1 bytes @ 0x8
   846                           
   847                           
   848                           ; 4 bytes @ 0x8
   849  0052                     	ds	1
   850  0053                     ___lwmod@dividend:
   851                           
   852                           ; 2 bytes @ 0x9
   853  0053                     	ds	2
   854  0055                     ??___lwmod:
   855                           
   856                           ; 1 bytes @ 0xB
   857  0055                     	ds	1
   858  0056                     ___lldiv@counter:
   859  0056                     ___lwmod@counter:	
   860                           ; 1 bytes @ 0xC
   861                           
   862                           
   863                           ; 1 bytes @ 0xC
   864  0056                     	ds	1
   865  0057                     ?_USART_set:
   866  0057                     ?_sprintf:	
   867                           ; 1 bytes @ 0xD
   868                           
   869  0057                     sprintf@f:	
   870                           ; 2 bytes @ 0xD
   871                           
   872  0057                     USART_set@baudrate:	
   873                           ; 1 bytes @ 0xD
   874                           
   875                           
   876                           ; 4 bytes @ 0xD
   877  0057                     	ds	4
   878  005B                     ??_USART_set:
   879                           
   880                           ; 1 bytes @ 0x11
   881  005B                     	ds	3
   882  005E                     ??_sprintf:
   883                           
   884                           ; 1 bytes @ 0x14
   885  005E                     	ds	3
   886  0061                     sprintf@ap:
   887                           
   888                           ; 1 bytes @ 0x17
   889  0061                     	ds	1
   890  0062                     sprintf@prec:
   891                           
   892                           ; 1 bytes @ 0x18
   893  0062                     	ds	1
   894  0063                     sprintf@val:
   895                           
   896                           ; 2 bytes @ 0x19
   897  0063                     	ds	2
   898  0065                     sprintf@flag:
   899                           
   900                           ; 1 bytes @ 0x1B
   901  0065                     	ds	1
   902  0066                     sprintf@width:
   903                           
   904                           ; 2 bytes @ 0x1C
   905  0066                     	ds	2
   906  0068                     sprintf@sp:
   907                           
   908                           ; 1 bytes @ 0x1E
   909  0068                     	ds	1
   910  0069                     sprintf@c:
   911                           
   912                           ; 1 bytes @ 0x1F
   913  0069                     	ds	1
   914                           
   915                           	psect	maintext
   916  02EF                     __pmaintext:	
   917 ;;
   918 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   919 ;;
   920 ;; *************** function _main *****************
   921 ;; Defined at:
   922 ;;		line 83 in file "main_master_p1.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;		None
   925 ;; Auto vars:     Size  Location     Type
   926 ;;		None
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      void 
   929 ;; Registers used:
   930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : B00/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   936 ;;      Params:         0       0       0       0       0
   937 ;;      Locals:         0       0       0       0       0
   938 ;;      Temps:          0       0       1       0       0
   939 ;;      Totals:         0       0       1       0       0
   940 ;;Total ram usage:        1 bytes
   941 ;; Hardware stack levels required when called: 6
   942 ;; This function calls:
   943 ;;		_Lcd_Clear
   944 ;;		_Lcd_Set_Cursor
   945 ;;		_Lcd_Write_String
   946 ;;		_setup
   947 ;;		_sprintf
   948 ;; This function is called by:
   949 ;;		Startup code after reset
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953  02EF                     _main:	
   954                           ;psect for function _main
   955                           
   956  02EF                     l2099:	
   957                           ;incstack = 0
   958                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   959                           
   960                           
   961                           ;main_master_p1.c: 84:     setup();
   962  02EF  120A  118A  259A  120A  118A  	fcall	_setup
   963  02F4                     l2101:
   964                           
   965                           ;main_master_p1.c: 85:     Lcd_Clear();
   966  02F4  120A  118A  264F  120A  118A  	fcall	_Lcd_Clear
   967  02F9                     l2103:
   968                           
   969                           ;main_master_p1.c: 87:         sprintf(frow, "%02d:%02d    Luz: %2d", hrs,mins,95);
   970  02F9  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   971  02FA  1683               	bsf	3,5	;RP0=1, select bank1
   972  02FB  1303               	bcf	3,6	;RP1=0, select bank1
   973  02FC  00A0               	movwf	??_main^(0+128)
   974  02FD  0820               	movf	??_main^(0+128),w
   975  02FE  1283               	bcf	3,5	;RP0=0, select bank0
   976  02FF  1303               	bcf	3,6	;RP1=0, select bank0
   977  0300  00D7               	movwf	sprintf@f
   978  0301  086D               	movf	_hrs+1,w
   979  0302  00D9               	movwf	?_sprintf+2
   980  0303  086C               	movf	_hrs,w
   981  0304  00D8               	movwf	?_sprintf+1
   982  0305  086B               	movf	_mins+1,w
   983  0306  00DB               	movwf	?_sprintf+4
   984  0307  086A               	movf	_mins,w
   985  0308  00DA               	movwf	?_sprintf+3
   986  0309  305F               	movlw	95
   987  030A  00DC               	movwf	?_sprintf+5
   988  030B  3000               	movlw	0
   989  030C  00DD               	movwf	?_sprintf+6
   990  030D  3036               	movlw	(low (_frow| 0))& (0+255)
   991  030E  120A  118A  2043  120A  118A  	fcall	_sprintf
   992  0313                     l2105:
   993                           
   994                           ;main_master_p1.c: 88:         sprintf(srow, "Mov: %d  Temp: %2d",mov,temp);
   995  0313  3021               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   996  0314  1683               	bsf	3,5	;RP0=1, select bank1
   997  0315  1303               	bcf	3,6	;RP1=0, select bank1
   998  0316  00A0               	movwf	??_main^(0+128)
   999  0317  0820               	movf	??_main^(0+128),w
  1000  0318  1283               	bcf	3,5	;RP0=0, select bank0
  1001  0319  1303               	bcf	3,6	;RP1=0, select bank0
  1002  031A  00D7               	movwf	sprintf@f
  1003  031B  0821               	movf	_mov+1,w
  1004  031C  00D9               	movwf	?_sprintf+2
  1005  031D  0820               	movf	_mov,w
  1006  031E  00D8               	movwf	?_sprintf+1
  1007  031F  086F               	movf	_temp+1,w
  1008  0320  00DB               	movwf	?_sprintf+4
  1009  0321  086E               	movf	_temp,w
  1010  0322  00DA               	movwf	?_sprintf+3
  1011  0323  3022               	movlw	(low (_srow| 0))& (0+255)
  1012  0324  120A  118A  2043  120A  118A  	fcall	_sprintf
  1013  0329                     l2107:
  1014                           
  1015                           ;main_master_p1.c: 89:         Lcd_Set_Cursor(1,1);
  1016  0329  1283               	bcf	3,5	;RP0=0, select bank0
  1017  032A  1303               	bcf	3,6	;RP1=0, select bank0
  1018  032B  01CC               	clrf	Lcd_Set_Cursor@b
  1019  032C  0ACC               	incf	Lcd_Set_Cursor@b,f
  1020  032D  3001               	movlw	1
  1021  032E  120A  118A  234D  120A  118A  	fcall	_Lcd_Set_Cursor
  1022                           
  1023                           ;main_master_p1.c: 90:         Lcd_Write_String(frow);
  1024  0333  3036               	movlw	(low (_frow| 0))& (0+255)
  1025  0334  120A  118A  25BF  120A  118A  	fcall	_Lcd_Write_String
  1026  0339                     l2109:
  1027                           
  1028                           ;main_master_p1.c: 91:         Lcd_Set_Cursor(2,1);
  1029  0339  1283               	bcf	3,5	;RP0=0, select bank0
  1030  033A  1303               	bcf	3,6	;RP1=0, select bank0
  1031  033B  01CC               	clrf	Lcd_Set_Cursor@b
  1032  033C  0ACC               	incf	Lcd_Set_Cursor@b,f
  1033  033D  3002               	movlw	2
  1034  033E  120A  118A  234D  120A  118A  	fcall	_Lcd_Set_Cursor
  1035  0343                     l2111:
  1036                           
  1037                           ;main_master_p1.c: 92:         Lcd_Write_String(srow);
  1038  0343  3022               	movlw	(low (_srow| 0))& (0+255)
  1039  0344  120A  118A  25BF  120A  118A  	fcall	_Lcd_Write_String
  1040  0349  2AF9               	goto	l2103
  1041  034A  120A  118A  280E   	ljmp	start
  1042  034D                     __end_of_main:
  1043                           
  1044                           	psect	text1
  1045  0043                     __ptext1:	
  1046 ;; *************** function _sprintf *****************
  1047 ;; Defined at:
  1048 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  sp              1    wreg     PTR unsigned char 
  1051 ;;		 -> srow(20), frow(20), 
  1052 ;;  f               1   13[BANK0 ] PTR const unsigned char 
  1053 ;;		 -> STR_2(19), STR_1(22), 
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  1056 ;;		 -> srow(20), frow(20), 
  1057 ;;  tmpval          4    0        struct .
  1058 ;;  width           2   28[BANK0 ] int 
  1059 ;;  val             2   25[BANK0 ] unsigned int 
  1060 ;;  cp              2    0        PTR const unsigned char 
  1061 ;;  len             2    0        unsigned int 
  1062 ;;  c               1   31[BANK0 ] unsigned char 
  1063 ;;  flag            1   27[BANK0 ] unsigned char 
  1064 ;;  prec            1   24[BANK0 ] char 
  1065 ;;  ap              1   23[BANK0 ] PTR void [1]
  1066 ;;		 -> ?_sprintf(2), 
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  2   13[BANK0 ] int 
  1069 ;; Registers used:
  1070 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1076 ;;      Params:         0       7       0       0       0
  1077 ;;      Locals:         0       9       0       0       0
  1078 ;;      Temps:          0       3       0       0       0
  1079 ;;      Totals:         0      19       0       0       0
  1080 ;;Total ram usage:       19 bytes
  1081 ;; Hardware stack levels used: 1
  1082 ;; Hardware stack levels required when called: 3
  1083 ;; This function calls:
  1084 ;;		___lwdiv
  1085 ;;		___lwmod
  1086 ;;		___wmul
  1087 ;;		_isdigit
  1088 ;; This function is called by:
  1089 ;;		_main
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093  0043                     _sprintf:	
  1094                           ;psect for function _sprintf
  1095                           
  1096                           
  1097                           ;incstack = 0
  1098                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1099                           ;sprintf@sp stored from wreg
  1100  0043  1283               	bcf	3,5	;RP0=0, select bank0
  1101  0044  1303               	bcf	3,6	;RP1=0, select bank0
  1102  0045  00E8               	movwf	sprintf@sp
  1103  0046                     l1953:
  1104                           
  1105                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1106  0046  3058               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1107  0047  00DE               	movwf	??_sprintf
  1108  0048  085E               	movf	??_sprintf,w
  1109  0049  00E1               	movwf	sprintf@ap
  1110                           
  1111                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1112  004A  2A00               	goto	l2057
  1113  004B                     l1955:
  1114                           
  1115                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1116  004B  3025               	movlw	37
  1117  004C  0669               	xorwf	sprintf@c,w
  1118  004D  1903               	btfsc	3,2
  1119  004E  2850               	goto	u1301
  1120  004F  2851               	goto	u1300
  1121  0050                     u1301:
  1122  0050  285D               	goto	l1961
  1123  0051                     u1300:
  1124  0051                     l1957:
  1125                           
  1126                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1127  0051  0869               	movf	sprintf@c,w
  1128  0052  00DE               	movwf	??_sprintf
  1129  0053  0868               	movf	sprintf@sp,w
  1130  0054  0084               	movwf	4
  1131  0055  085E               	movf	??_sprintf,w
  1132  0056  1383               	bcf	3,7	;select IRP bank0
  1133  0057  0080               	movwf	0
  1134  0058                     l1959:
  1135  0058  3001               	movlw	1
  1136  0059  00DE               	movwf	??_sprintf
  1137  005A  085E               	movf	??_sprintf,w
  1138  005B  07E8               	addwf	sprintf@sp,f
  1139                           
  1140                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 559:    continue;
  1141  005C  2A00               	goto	l2057
  1142  005D                     l1961:
  1143                           
  1144                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1145  005D  01E6               	clrf	sprintf@width
  1146  005E  01E7               	clrf	sprintf@width+1
  1147                           
  1148                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1149  005F  01E5               	clrf	sprintf@flag
  1150  0060  2866               	goto	l1967
  1151  0061                     l257:	
  1152                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 596:    case '0':
  1153                           
  1154                           
  1155                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  1156  0061  1565               	bsf	sprintf@flag,2
  1157  0062                     l1963:
  1158                           
  1159                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 598:     f++;
  1160  0062  3001               	movlw	1
  1161  0063  00DE               	movwf	??_sprintf
  1162  0064  085E               	movf	??_sprintf,w
  1163  0065  07D7               	addwf	sprintf@f,f
  1164  0066                     l1967:	
  1165                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  1166                           
  1167  0066  0857               	movf	sprintf@f,w
  1168  0067  0084               	movwf	4
  1169  0068  120A  118A  253A  120A  118A  	fcall	stringdir
  1170  006D  00DE               	movwf	??_sprintf
  1171  006E  01DF               	clrf	??_sprintf+1
  1172                           
  1173                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1174                           ; Switch size 1, requested type "simple"
  1175                           ; Number of cases is 1, Range of values is 0 to 0
  1176                           ; switch strategies available:
  1177                           ; Name         Instructions Cycles
  1178                           ; simple_byte            4     3 (average)
  1179                           ; direct_byte           11     8 (fixed)
  1180                           ; jumptable            260     6 (fixed)
  1181                           ;	Chosen strategy is simple_byte
  1182  006F  085F               	movf	??_sprintf+1,w
  1183  0070  3A00               	xorlw	0	; case 0
  1184  0071  1903               	skipnz
  1185  0072  2874               	goto	l2197
  1186  0073  2879               	goto	l1969
  1187  0074                     l2197:
  1188                           
  1189                           ; Switch size 1, requested type "simple"
  1190                           ; Number of cases is 1, Range of values is 48 to 48
  1191                           ; switch strategies available:
  1192                           ; Name         Instructions Cycles
  1193                           ; simple_byte            4     3 (average)
  1194                           ; direct_byte           14    11 (fixed)
  1195                           ; jumptable            263     9 (fixed)
  1196                           ;	Chosen strategy is simple_byte
  1197  0074  085E               	movf	??_sprintf,w
  1198  0075  3A30               	xorlw	48	; case 48
  1199  0076  1903               	skipnz
  1200  0077  2861               	goto	l257
  1201  0078  2879               	goto	l1969
  1202  0079                     l1969:
  1203                           
  1204                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1205  0079  0857               	movf	sprintf@f,w
  1206  007A  0084               	movwf	4
  1207  007B  120A  118A  253A  120A  118A  	fcall	stringdir
  1208  0080  120A  118A  263B  120A  118A  	fcall	_isdigit
  1209  0085  1C03               	btfss	3,0
  1210  0086  2888               	goto	u1311
  1211  0087  2889               	goto	u1310
  1212  0088                     u1311:
  1213  0088  28C9               	goto	l1983
  1214  0089                     u1310:
  1215  0089                     l1971:
  1216                           
  1217                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1218  0089  1283               	bcf	3,5	;RP0=0, select bank0
  1219  008A  1303               	bcf	3,6	;RP1=0, select bank0
  1220  008B  01E6               	clrf	sprintf@width
  1221  008C  01E7               	clrf	sprintf@width+1
  1222  008D                     l1973:
  1223                           
  1224                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1225  008D  300A               	movlw	10
  1226  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1227  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1228  0090  00CA               	movwf	___wmul@multiplier
  1229  0091  3000               	movlw	0
  1230  0092  00CB               	movwf	___wmul@multiplier+1
  1231  0093  0867               	movf	sprintf@width+1,w
  1232  0094  00CD               	movwf	___wmul@multiplicand+1
  1233  0095  0866               	movf	sprintf@width,w
  1234  0096  00CC               	movwf	___wmul@multiplicand
  1235  0097  120A  118A  2573  120A  118A  	fcall	___wmul
  1236  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1237  009D  1303               	bcf	3,6	;RP1=0, select bank0
  1238  009E  084B               	movf	?___wmul+1,w
  1239  009F  00E7               	movwf	sprintf@width+1
  1240  00A0  084A               	movf	?___wmul,w
  1241  00A1  00E6               	movwf	sprintf@width
  1242  00A2                     l1975:
  1243                           
  1244                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1245  00A2  0857               	movf	sprintf@f,w
  1246  00A3  0084               	movwf	4
  1247  00A4  120A  118A  253A  120A  118A  	fcall	stringdir
  1248  00A9  3ED0               	addlw	208
  1249  00AA  00DE               	movwf	??_sprintf
  1250  00AB  30FF               	movlw	255
  1251  00AC  1803               	skipnc
  1252  00AD  3000               	movlw	0
  1253  00AE  00DF               	movwf	??_sprintf+1
  1254  00AF  085E               	movf	??_sprintf,w
  1255  00B0  07E6               	addwf	sprintf@width,f
  1256  00B1  1803               	skipnc
  1257  00B2  0AE7               	incf	sprintf@width+1,f
  1258  00B3  085F               	movf	??_sprintf+1,w
  1259  00B4  07E7               	addwf	sprintf@width+1,f
  1260  00B5                     l1977:
  1261  00B5  3001               	movlw	1
  1262  00B6  00DE               	movwf	??_sprintf
  1263  00B7  085E               	movf	??_sprintf,w
  1264  00B8  07D7               	addwf	sprintf@f,f
  1265  00B9                     l1979:
  1266                           
  1267                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1268  00B9  0857               	movf	sprintf@f,w
  1269  00BA  0084               	movwf	4
  1270  00BB  120A  118A  253A  120A  118A  	fcall	stringdir
  1271  00C0  120A  118A  263B  120A  118A  	fcall	_isdigit
  1272  00C5  1803               	btfsc	3,0
  1273  00C6  28C8               	goto	u1321
  1274  00C7  28C9               	goto	u1320
  1275  00C8                     u1321:
  1276  00C8  288D               	goto	l1973
  1277  00C9                     u1320:
  1278  00C9                     l1983:
  1279  00C9  3001               	movlw	1
  1280  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  1281  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  1282  00CC  07D7               	addwf	sprintf@f,f
  1283  00CD  30FF               	movlw	-1
  1284  00CE  0757               	addwf	sprintf@f,w
  1285  00CF  0084               	movwf	4
  1286  00D0  120A  118A  253A  120A  118A  	fcall	stringdir
  1287  00D5  00E9               	movwf	sprintf@c
  1288  00D6  00DE               	movwf	??_sprintf
  1289  00D7  01DF               	clrf	??_sprintf+1
  1290                           
  1291                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1292                           ; Switch size 1, requested type "simple"
  1293                           ; Number of cases is 1, Range of values is 0 to 0
  1294                           ; switch strategies available:
  1295                           ; Name         Instructions Cycles
  1296                           ; simple_byte            4     3 (average)
  1297                           ; direct_byte           11     8 (fixed)
  1298                           ; jumptable            260     6 (fixed)
  1299                           ;	Chosen strategy is simple_byte
  1300  00D8  085F               	movf	??_sprintf+1,w
  1301  00D9  3A00               	xorlw	0	; case 0
  1302  00DA  1903               	skipnz
  1303  00DB  28DD               	goto	l2199
  1304  00DC  2A00               	goto	l2057
  1305  00DD                     l2199:
  1306                           
  1307                           ; Switch size 1, requested type "simple"
  1308                           ; Number of cases is 3, Range of values is 0 to 105
  1309                           ; switch strategies available:
  1310                           ; Name         Instructions Cycles
  1311                           ; simple_byte           10     6 (average)
  1312                           ; jumptable            260     6 (fixed)
  1313                           ;	Chosen strategy is simple_byte
  1314  00DD  085E               	movf	??_sprintf,w
  1315  00DE  3A00               	xorlw	0	; case 0
  1316  00DF  1903               	skipnz
  1317  00E0  2A12               	goto	l2059
  1318  00E1  3A64               	xorlw	100	; case 100
  1319  00E2  1903               	skipnz
  1320  00E3  28E8               	goto	l1985
  1321  00E4  3A0D               	xorlw	13	; case 105
  1322  00E5  1903               	skipnz
  1323  00E6  28E8               	goto	l1985
  1324  00E7  2A00               	goto	l2057
  1325  00E8                     l1985:
  1326                           
  1327                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1328  00E8  0861               	movf	sprintf@ap,w
  1329  00E9  0084               	movwf	4
  1330  00EA  1383               	bcf	3,7	;select IRP bank0
  1331  00EB  0800               	movf	0,w
  1332  00EC  00E3               	movwf	sprintf@val
  1333  00ED  0A84               	incf	4,f
  1334  00EE  0800               	movf	0,w
  1335  00EF  00E4               	movwf	sprintf@val+1
  1336  00F0                     l1987:
  1337  00F0  3002               	movlw	2
  1338  00F1  00DE               	movwf	??_sprintf
  1339  00F2  085E               	movf	??_sprintf,w
  1340  00F3  07E1               	addwf	sprintf@ap,f
  1341  00F4                     l1989:
  1342                           
  1343                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1344  00F4  1FE4               	btfss	sprintf@val+1,7
  1345  00F5  28F7               	goto	u1331
  1346  00F6  28F8               	goto	u1330
  1347  00F7                     u1331:
  1348  00F7  2901               	goto	l1995
  1349  00F8                     u1330:
  1350  00F8                     l1991:
  1351                           
  1352                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1353  00F8  3003               	movlw	3
  1354  00F9  00DE               	movwf	??_sprintf
  1355  00FA  085E               	movf	??_sprintf,w
  1356  00FB  04E5               	iorwf	sprintf@flag,f
  1357  00FC                     l1993:
  1358                           
  1359                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1360  00FC  09E3               	comf	sprintf@val,f
  1361  00FD  09E4               	comf	sprintf@val+1,f
  1362  00FE  0AE3               	incf	sprintf@val,f
  1363  00FF  1903               	skipnz
  1364  0100  0AE4               	incf	sprintf@val+1,f
  1365  0101                     l1995:
  1366                           
  1367                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1368  0101  01E9               	clrf	sprintf@c
  1369  0102  0AE9               	incf	sprintf@c,f
  1370  0103                     l2001:
  1371                           
  1372                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1373  0103  0869               	movf	sprintf@c,w
  1374  0104  00DE               	movwf	??_sprintf
  1375  0105  075E               	addwf	??_sprintf,w
  1376  0106  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1377  0107  0084               	movwf	4
  1378  0108  120A  118A  253A  120A  118A  	fcall	stringdir
  1379  010D  00DF               	movwf	??_sprintf+1
  1380  010E  120A  118A  253A  120A  118A  	fcall	stringdir
  1381  0113  00E0               	movwf	??_sprintf+2
  1382  0114  0860               	movf	??_sprintf+2,w
  1383  0115  0264               	subwf	sprintf@val+1,w
  1384  0116  1D03               	skipz
  1385  0117  291A               	goto	u1345
  1386  0118  085F               	movf	??_sprintf+1,w
  1387  0119  0263               	subwf	sprintf@val,w
  1388  011A                     u1345:
  1389  011A  1803               	skipnc
  1390  011B  291D               	goto	u1341
  1391  011C  291E               	goto	u1340
  1392  011D                     u1341:
  1393  011D  291F               	goto	l2005
  1394  011E                     u1340:
  1395  011E  2929               	goto	l2007
  1396  011F                     l2005:
  1397  011F  3001               	movlw	1
  1398  0120  00DE               	movwf	??_sprintf
  1399  0121  085E               	movf	??_sprintf,w
  1400  0122  07E9               	addwf	sprintf@c,f
  1401  0123  3005               	movlw	5
  1402  0124  0669               	xorwf	sprintf@c,w
  1403  0125  1D03               	btfss	3,2
  1404  0126  2928               	goto	u1351
  1405  0127  2929               	goto	u1350
  1406  0128                     u1351:
  1407  0128  2903               	goto	l2001
  1408  0129                     u1350:
  1409  0129                     l2007:
  1410                           
  1411                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1412  0129  0866               	movf	sprintf@width,w
  1413  012A  0467               	iorwf	sprintf@width+1,w
  1414  012B  1903               	btfsc	3,2
  1415  012C  292E               	goto	u1361
  1416  012D  292F               	goto	u1360
  1417  012E                     u1361:
  1418  012E  293B               	goto	l275
  1419  012F                     u1360:
  1420  012F                     l2009:
  1421  012F  0865               	movf	sprintf@flag,w
  1422  0130  3903               	andlw	3
  1423  0131  1903               	btfsc	3,2
  1424  0132  2934               	goto	u1371
  1425  0133  2935               	goto	u1370
  1426  0134                     u1371:
  1427  0134  293B               	goto	l275
  1428  0135                     u1370:
  1429  0135                     l2011:
  1430                           
  1431                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1432  0135  30FF               	movlw	255
  1433  0136  07E6               	addwf	sprintf@width,f
  1434  0137  1803               	skipnc
  1435  0138  0AE7               	incf	sprintf@width+1,f
  1436  0139  30FF               	movlw	255
  1437  013A  07E7               	addwf	sprintf@width+1,f
  1438  013B                     l275:
  1439                           
  1440                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1441  013B  0867               	movf	sprintf@width+1,w
  1442  013C  3A80               	xorlw	128
  1443  013D  3C80               	sublw	128
  1444  013E  1D03               	skipz
  1445  013F  2942               	goto	u1385
  1446  0140  0866               	movf	sprintf@width,w
  1447  0141  0269               	subwf	sprintf@c,w
  1448  0142                     u1385:
  1449  0142  1803               	skipnc
  1450  0143  2945               	goto	u1381
  1451  0144  2946               	goto	u1380
  1452  0145                     u1381:
  1453  0145  2952               	goto	l2015
  1454  0146                     u1380:
  1455  0146                     l2013:
  1456                           
  1457                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1458  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1459  0147  1303               	bcf	3,6	;RP1=0, select bank0
  1460  0148  0869               	movf	sprintf@c,w
  1461  0149  00DE               	movwf	??_sprintf
  1462  014A  01DF               	clrf	??_sprintf+1
  1463  014B  085E               	movf	??_sprintf,w
  1464  014C  02E6               	subwf	sprintf@width,f
  1465  014D  085F               	movf	??_sprintf+1,w
  1466  014E  1C03               	skipc
  1467  014F  03E7               	decf	sprintf@width+1,f
  1468  0150  02E7               	subwf	sprintf@width+1,f
  1469  0151  2956               	goto	l2017
  1470  0152                     l2015:
  1471                           
  1472                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1473  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1474  0153  1303               	bcf	3,6	;RP1=0, select bank0
  1475  0154  01E6               	clrf	sprintf@width
  1476  0155  01E7               	clrf	sprintf@width+1
  1477  0156                     l2017:
  1478                           
  1479                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1480  0156  1D65               	btfss	sprintf@flag,2
  1481  0157  2959               	goto	u1391
  1482  0158  295A               	goto	u1390
  1483  0159                     u1391:
  1484  0159  2989               	goto	l2033
  1485  015A                     u1390:
  1486  015A                     l2019:
  1487                           
  1488                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1489  015A  0865               	movf	sprintf@flag,w
  1490  015B  3903               	andlw	3
  1491  015C  1903               	btfsc	3,2
  1492  015D  295F               	goto	u1401
  1493  015E  2960               	goto	u1400
  1494  015F                     u1401:
  1495  015F  296B               	goto	l2025
  1496  0160                     u1400:
  1497  0160                     l2021:
  1498                           
  1499                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1500  0160  302D               	movlw	45
  1501  0161  00DE               	movwf	??_sprintf
  1502  0162  0868               	movf	sprintf@sp,w
  1503  0163  0084               	movwf	4
  1504  0164  085E               	movf	??_sprintf,w
  1505  0165  1383               	bcf	3,7	;select IRP bank0
  1506  0166  0080               	movwf	0
  1507  0167                     l2023:
  1508  0167  3001               	movlw	1
  1509  0168  00DE               	movwf	??_sprintf
  1510  0169  085E               	movf	??_sprintf,w
  1511  016A  07E8               	addwf	sprintf@sp,f
  1512  016B                     l2025:
  1513                           
  1514                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1515  016B  0866               	movf	sprintf@width,w
  1516  016C  0467               	iorwf	sprintf@width+1,w
  1517  016D  1903               	btfsc	3,2
  1518  016E  2970               	goto	u1411
  1519  016F  2971               	goto	u1410
  1520  0170                     u1411:
  1521  0170  29B7               	goto	l2047
  1522  0171                     u1410:
  1523  0171                     l2027:
  1524                           
  1525                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1526  0171  3030               	movlw	48
  1527  0172  00DE               	movwf	??_sprintf
  1528  0173  0868               	movf	sprintf@sp,w
  1529  0174  0084               	movwf	4
  1530  0175  085E               	movf	??_sprintf,w
  1531  0176  1383               	bcf	3,7	;select IRP bank0
  1532  0177  0080               	movwf	0
  1533  0178                     l2029:
  1534  0178  3001               	movlw	1
  1535  0179  00DE               	movwf	??_sprintf
  1536  017A  085E               	movf	??_sprintf,w
  1537  017B  07E8               	addwf	sprintf@sp,f
  1538  017C                     l2031:
  1539  017C  30FF               	movlw	255
  1540  017D  07E6               	addwf	sprintf@width,f
  1541  017E  1803               	skipnc
  1542  017F  0AE7               	incf	sprintf@width+1,f
  1543  0180  30FF               	movlw	255
  1544  0181  07E7               	addwf	sprintf@width+1,f
  1545  0182  0866               	movf	sprintf@width,w
  1546  0183  0467               	iorwf	sprintf@width+1,w
  1547  0184  1D03               	btfss	3,2
  1548  0185  2987               	goto	u1421
  1549  0186  2988               	goto	u1420
  1550  0187                     u1421:
  1551  0187  2971               	goto	l2027
  1552  0188                     u1420:
  1553  0188  29B7               	goto	l2047
  1554  0189                     l2033:
  1555                           
  1556                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1557  0189  0866               	movf	sprintf@width,w
  1558  018A  0467               	iorwf	sprintf@width+1,w
  1559  018B  1903               	btfsc	3,2
  1560  018C  298E               	goto	u1431
  1561  018D  298F               	goto	u1430
  1562  018E                     u1431:
  1563  018E  29A6               	goto	l2041
  1564  018F                     u1430:
  1565  018F                     l2035:
  1566                           
  1567                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1568  018F  3020               	movlw	32
  1569  0190  00DE               	movwf	??_sprintf
  1570  0191  0868               	movf	sprintf@sp,w
  1571  0192  0084               	movwf	4
  1572  0193  085E               	movf	??_sprintf,w
  1573  0194  1383               	bcf	3,7	;select IRP bank0
  1574  0195  0080               	movwf	0
  1575  0196                     l2037:
  1576  0196  3001               	movlw	1
  1577  0197  00DE               	movwf	??_sprintf
  1578  0198  085E               	movf	??_sprintf,w
  1579  0199  07E8               	addwf	sprintf@sp,f
  1580  019A                     l2039:
  1581  019A  30FF               	movlw	255
  1582  019B  07E6               	addwf	sprintf@width,f
  1583  019C  1803               	skipnc
  1584  019D  0AE7               	incf	sprintf@width+1,f
  1585  019E  30FF               	movlw	255
  1586  019F  07E7               	addwf	sprintf@width+1,f
  1587  01A0  0866               	movf	sprintf@width,w
  1588  01A1  0467               	iorwf	sprintf@width+1,w
  1589  01A2  1D03               	btfss	3,2
  1590  01A3  29A5               	goto	u1441
  1591  01A4  29A6               	goto	u1440
  1592  01A5                     u1441:
  1593  01A5  298F               	goto	l2035
  1594  01A6                     u1440:
  1595  01A6                     l2041:
  1596                           
  1597                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1598  01A6  0865               	movf	sprintf@flag,w
  1599  01A7  3903               	andlw	3
  1600  01A8  1903               	btfsc	3,2
  1601  01A9  29AB               	goto	u1451
  1602  01AA  29AC               	goto	u1450
  1603  01AB                     u1451:
  1604  01AB  29B7               	goto	l2047
  1605  01AC                     u1450:
  1606  01AC                     l2043:
  1607                           
  1608                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1609  01AC  302D               	movlw	45
  1610  01AD  00DE               	movwf	??_sprintf
  1611  01AE  0868               	movf	sprintf@sp,w
  1612  01AF  0084               	movwf	4
  1613  01B0  085E               	movf	??_sprintf,w
  1614  01B1  1383               	bcf	3,7	;select IRP bank0
  1615  01B2  0080               	movwf	0
  1616  01B3                     l2045:
  1617  01B3  3001               	movlw	1
  1618  01B4  00DE               	movwf	??_sprintf
  1619  01B5  085E               	movf	??_sprintf,w
  1620  01B6  07E8               	addwf	sprintf@sp,f
  1621  01B7                     l2047:
  1622                           
  1623                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1624  01B7  0869               	movf	sprintf@c,w
  1625  01B8  00DE               	movwf	??_sprintf
  1626  01B9  085E               	movf	??_sprintf,w
  1627  01BA  00E2               	movwf	sprintf@prec
  1628                           
  1629                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1630  01BB  29F7               	goto	l2055
  1631  01BC                     l2049:
  1632                           
  1633                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1634  01BC  300A               	movlw	10
  1635  01BD  00D1               	movwf	___lwmod@divisor
  1636  01BE  3000               	movlw	0
  1637  01BF  00D2               	movwf	___lwmod@divisor+1
  1638  01C0  0862               	movf	sprintf@prec,w
  1639  01C1  00DE               	movwf	??_sprintf
  1640  01C2  075E               	addwf	??_sprintf,w
  1641  01C3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1642  01C4  0084               	movwf	4
  1643  01C5  120A  118A  253A  120A  118A  	fcall	stringdir
  1644  01CA  00CA               	movwf	___lwdiv@divisor
  1645  01CB  120A  118A  253A  120A  118A  	fcall	stringdir
  1646  01D0  00CB               	movwf	___lwdiv@divisor+1
  1647  01D1  0864               	movf	sprintf@val+1,w
  1648  01D2  00CD               	movwf	___lwdiv@dividend+1
  1649  01D3  0863               	movf	sprintf@val,w
  1650  01D4  00CC               	movwf	___lwdiv@dividend
  1651  01D5  120A  118A  23FC  120A  118A  	fcall	___lwdiv
  1652  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  1653  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  1654  01DC  084B               	movf	?___lwdiv+1,w
  1655  01DD  00D4               	movwf	___lwmod@dividend+1
  1656  01DE  084A               	movf	?___lwdiv,w
  1657  01DF  00D3               	movwf	___lwmod@dividend
  1658  01E0  120A  118A  24FE  120A  118A  	fcall	___lwmod
  1659  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1660  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1661  01E7  0851               	movf	?___lwmod,w
  1662  01E8  3E30               	addlw	48
  1663  01E9  00DF               	movwf	??_sprintf+1
  1664  01EA  085F               	movf	??_sprintf+1,w
  1665  01EB  00E9               	movwf	sprintf@c
  1666  01EC                     l2051:
  1667                           
  1668                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1669  01EC  0869               	movf	sprintf@c,w
  1670  01ED  00DE               	movwf	??_sprintf
  1671  01EE  0868               	movf	sprintf@sp,w
  1672  01EF  0084               	movwf	4
  1673  01F0  085E               	movf	??_sprintf,w
  1674  01F1  1383               	bcf	3,7	;select IRP bank0
  1675  01F2  0080               	movwf	0
  1676  01F3                     l2053:
  1677  01F3  3001               	movlw	1
  1678  01F4  00DE               	movwf	??_sprintf
  1679  01F5  085E               	movf	??_sprintf,w
  1680  01F6  07E8               	addwf	sprintf@sp,f
  1681  01F7                     l2055:
  1682                           
  1683                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1684  01F7  30FF               	movlw	255
  1685  01F8  00DE               	movwf	??_sprintf
  1686  01F9  085E               	movf	??_sprintf,w
  1687  01FA  07E2               	addwf	sprintf@prec,f
  1688  01FB  0A62               	incf	sprintf@prec,w
  1689  01FC  1D03               	btfss	3,2
  1690  01FD  29FF               	goto	u1461
  1691  01FE  2A00               	goto	u1460
  1692  01FF                     u1461:
  1693  01FF  29BC               	goto	l2049
  1694  0200                     u1460:
  1695  0200                     l2057:
  1696                           
  1697                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1698  0200  3001               	movlw	1
  1699  0201  07D7               	addwf	sprintf@f,f
  1700  0202  30FF               	movlw	-1
  1701  0203  0757               	addwf	sprintf@f,w
  1702  0204  0084               	movwf	4
  1703  0205  120A  118A  253A  120A  118A  	fcall	stringdir
  1704  020A  00DE               	movwf	??_sprintf
  1705  020B  085E               	movf	??_sprintf,w
  1706  020C  00E9               	movwf	sprintf@c
  1707  020D  0869               	movf	sprintf@c,w
  1708  020E  1D03               	btfss	3,2
  1709  020F  2A11               	goto	u1471
  1710  0210  2A12               	goto	u1470
  1711  0211                     u1471:
  1712  0211  284B               	goto	l1955
  1713  0212                     u1470:
  1714  0212                     l2059:
  1715                           
  1716                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1717  0212  0868               	movf	sprintf@sp,w
  1718  0213  0084               	movwf	4
  1719  0214  1383               	bcf	3,7	;select IRP bank0
  1720  0215  0180               	clrf	0
  1721  0216                     l292:
  1722  0216  0008               	return
  1723  0217                     __end_of_sprintf:
  1724                           
  1725                           	psect	text2
  1726  063B                     __ptext2:	
  1727 ;; *************** function _isdigit *****************
  1728 ;; Defined at:
  1729 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\isdigit.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;  c               1    wreg     unsigned char 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  c               1    1[BANK0 ] unsigned char 
  1734 ;; Return value:  Size  Location     Type
  1735 ;;		None               void
  1736 ;; Registers used:
  1737 ;;		wreg, status,2, status,0
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1743 ;;      Params:         0       0       0       0       0
  1744 ;;      Locals:         0       2       0       0       0
  1745 ;;      Temps:          0       0       0       0       0
  1746 ;;      Totals:         0       2       0       0       0
  1747 ;;Total ram usage:        2 bytes
  1748 ;; Hardware stack levels used: 1
  1749 ;; Hardware stack levels required when called: 2
  1750 ;; This function calls:
  1751 ;;		Nothing
  1752 ;; This function is called by:
  1753 ;;		_sprintf
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757  063B                     _isdigit:	
  1758                           ;psect for function _isdigit
  1759                           
  1760                           
  1761                           ;incstack = 0
  1762                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1763                           ;isdigit@c stored from wreg
  1764  063B  1283               	bcf	3,5	;RP0=0, select bank0
  1765  063C  1303               	bcf	3,6	;RP1=0, select bank0
  1766  063D  00CB               	movwf	isdigit@c
  1767  063E                     l1883:
  1768  063E  01CA               	clrf	_isdigit$840
  1769  063F                     l1885:
  1770  063F  303A               	movlw	58
  1771  0640  024B               	subwf	isdigit@c,w
  1772  0641  1803               	skipnc
  1773  0642  2E44               	goto	u1181
  1774  0643  2E45               	goto	u1180
  1775  0644                     u1181:
  1776  0644  2E4D               	goto	l1891
  1777  0645                     u1180:
  1778  0645                     l1887:
  1779  0645  3030               	movlw	48
  1780  0646  024B               	subwf	isdigit@c,w
  1781  0647  1C03               	skipc
  1782  0648  2E4A               	goto	u1191
  1783  0649  2E4B               	goto	u1190
  1784  064A                     u1191:
  1785  064A  2E4D               	goto	l1891
  1786  064B                     u1190:
  1787  064B                     l1889:
  1788  064B  01CA               	clrf	_isdigit$840
  1789  064C  0ACA               	incf	_isdigit$840,f
  1790  064D                     l1891:
  1791  064D  0C4A               	rrf	_isdigit$840,w
  1792  064E                     l749:
  1793  064E  0008               	return
  1794  064F                     __end_of_isdigit:
  1795                           
  1796                           	psect	text3
  1797  0573                     __ptext3:	
  1798 ;; *************** function ___wmul *****************
  1799 ;; Defined at:
  1800 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1803 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  product         2    4[BANK0 ] unsigned int 
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  2    0[BANK0 ] unsigned int 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1815 ;;      Params:         0       4       0       0       0
  1816 ;;      Locals:         0       2       0       0       0
  1817 ;;      Temps:          0       0       0       0       0
  1818 ;;      Totals:         0       6       0       0       0
  1819 ;;Total ram usage:        6 bytes
  1820 ;; Hardware stack levels used: 1
  1821 ;; Hardware stack levels required when called: 2
  1822 ;; This function calls:
  1823 ;;		Nothing
  1824 ;; This function is called by:
  1825 ;;		_sprintf
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829  0573                     ___wmul:	
  1830                           ;psect for function ___wmul
  1831                           
  1832  0573                     l1895:	
  1833                           ;incstack = 0
  1834                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1835                           
  1836  0573  1283               	bcf	3,5	;RP0=0, select bank0
  1837  0574  1303               	bcf	3,6	;RP1=0, select bank0
  1838  0575  01CE               	clrf	___wmul@product
  1839  0576  01CF               	clrf	___wmul@product+1
  1840  0577                     l1897:
  1841  0577  1C4A               	btfss	___wmul@multiplier,0
  1842  0578  2D7A               	goto	u1201
  1843  0579  2D7B               	goto	u1200
  1844  057A                     u1201:
  1845  057A  2D81               	goto	l296
  1846  057B                     u1200:
  1847  057B                     l1899:
  1848  057B  084C               	movf	___wmul@multiplicand,w
  1849  057C  07CE               	addwf	___wmul@product,f
  1850  057D  1803               	skipnc
  1851  057E  0ACF               	incf	___wmul@product+1,f
  1852  057F  084D               	movf	___wmul@multiplicand+1,w
  1853  0580  07CF               	addwf	___wmul@product+1,f
  1854  0581                     l296:
  1855  0581  3001               	movlw	1
  1856  0582                     u1215:
  1857  0582  1003               	clrc
  1858  0583  0DCC               	rlf	___wmul@multiplicand,f
  1859  0584  0DCD               	rlf	___wmul@multiplicand+1,f
  1860  0585  3EFF               	addlw	-1
  1861  0586  1D03               	skipz
  1862  0587  2D82               	goto	u1215
  1863  0588                     l1901:
  1864  0588  3001               	movlw	1
  1865  0589                     u1225:
  1866  0589  1003               	clrc
  1867  058A  0CCB               	rrf	___wmul@multiplier+1,f
  1868  058B  0CCA               	rrf	___wmul@multiplier,f
  1869  058C  3EFF               	addlw	-1
  1870  058D  1D03               	skipz
  1871  058E  2D89               	goto	u1225
  1872  058F                     l1903:
  1873  058F  084A               	movf	___wmul@multiplier,w
  1874  0590  044B               	iorwf	___wmul@multiplier+1,w
  1875  0591  1D03               	btfss	3,2
  1876  0592  2D94               	goto	u1231
  1877  0593  2D95               	goto	u1230
  1878  0594                     u1231:
  1879  0594  2D77               	goto	l1897
  1880  0595                     u1230:
  1881  0595                     l1905:
  1882  0595  084F               	movf	___wmul@product+1,w
  1883  0596  00CB               	movwf	?___wmul+1
  1884  0597  084E               	movf	___wmul@product,w
  1885  0598  00CA               	movwf	?___wmul
  1886  0599                     l298:
  1887  0599  0008               	return
  1888  059A                     __end_of___wmul:
  1889                           
  1890                           	psect	text4
  1891  04FE                     __ptext4:	
  1892 ;; *************** function ___lwmod *****************
  1893 ;; Defined at:
  1894 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwmod.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  divisor         2    7[BANK0 ] unsigned int 
  1897 ;;  dividend        2    9[BANK0 ] unsigned int 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  counter         1   12[BANK0 ] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  2    7[BANK0 ] unsigned int 
  1902 ;; Registers used:
  1903 ;;		wreg, status,2, status,0
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1909 ;;      Params:         0       4       0       0       0
  1910 ;;      Locals:         0       1       0       0       0
  1911 ;;      Temps:          0       1       0       0       0
  1912 ;;      Totals:         0       6       0       0       0
  1913 ;;Total ram usage:        6 bytes
  1914 ;; Hardware stack levels used: 1
  1915 ;; Hardware stack levels required when called: 2
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_sprintf
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923  04FE                     ___lwmod:	
  1924                           ;psect for function ___lwmod
  1925                           
  1926  04FE                     l1909:	
  1927                           ;incstack = 0
  1928                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1929                           
  1930  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  1931  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0500  0851               	movf	___lwmod@divisor,w
  1933  0501  0452               	iorwf	___lwmod@divisor+1,w
  1934  0502  1903               	btfsc	3,2
  1935  0503  2D05               	goto	u1241
  1936  0504  2D06               	goto	u1240
  1937  0505                     u1241:
  1938  0505  2D35               	goto	l1927
  1939  0506                     u1240:
  1940  0506                     l1911:
  1941  0506  01D6               	clrf	___lwmod@counter
  1942  0507  0AD6               	incf	___lwmod@counter,f
  1943  0508  2D14               	goto	l1917
  1944  0509                     l1913:
  1945  0509  3001               	movlw	1
  1946  050A                     u1255:
  1947  050A  1003               	clrc
  1948  050B  0DD1               	rlf	___lwmod@divisor,f
  1949  050C  0DD2               	rlf	___lwmod@divisor+1,f
  1950  050D  3EFF               	addlw	-1
  1951  050E  1D03               	skipz
  1952  050F  2D0A               	goto	u1255
  1953  0510                     l1915:
  1954  0510  3001               	movlw	1
  1955  0511  00D5               	movwf	??___lwmod
  1956  0512  0855               	movf	??___lwmod,w
  1957  0513  07D6               	addwf	___lwmod@counter,f
  1958  0514                     l1917:
  1959  0514  1FD2               	btfss	___lwmod@divisor+1,7
  1960  0515  2D17               	goto	u1261
  1961  0516  2D18               	goto	u1260
  1962  0517                     u1261:
  1963  0517  2D09               	goto	l1913
  1964  0518                     u1260:
  1965  0518                     l1919:
  1966  0518  0852               	movf	___lwmod@divisor+1,w
  1967  0519  0254               	subwf	___lwmod@dividend+1,w
  1968  051A  1D03               	skipz
  1969  051B  2D1E               	goto	u1275
  1970  051C  0851               	movf	___lwmod@divisor,w
  1971  051D  0253               	subwf	___lwmod@dividend,w
  1972  051E                     u1275:
  1973  051E  1C03               	skipc
  1974  051F  2D21               	goto	u1271
  1975  0520  2D22               	goto	u1270
  1976  0521                     u1271:
  1977  0521  2D28               	goto	l1923
  1978  0522                     u1270:
  1979  0522                     l1921:
  1980  0522  0851               	movf	___lwmod@divisor,w
  1981  0523  02D3               	subwf	___lwmod@dividend,f
  1982  0524  0852               	movf	___lwmod@divisor+1,w
  1983  0525  1C03               	skipc
  1984  0526  03D4               	decf	___lwmod@dividend+1,f
  1985  0527  02D4               	subwf	___lwmod@dividend+1,f
  1986  0528                     l1923:
  1987  0528  3001               	movlw	1
  1988  0529                     u1285:
  1989  0529  1003               	clrc
  1990  052A  0CD2               	rrf	___lwmod@divisor+1,f
  1991  052B  0CD1               	rrf	___lwmod@divisor,f
  1992  052C  3EFF               	addlw	-1
  1993  052D  1D03               	skipz
  1994  052E  2D29               	goto	u1285
  1995  052F                     l1925:
  1996  052F  3001               	movlw	1
  1997  0530  02D6               	subwf	___lwmod@counter,f
  1998  0531  1D03               	btfss	3,2
  1999  0532  2D34               	goto	u1291
  2000  0533  2D35               	goto	u1290
  2001  0534                     u1291:
  2002  0534  2D18               	goto	l1919
  2003  0535                     u1290:
  2004  0535                     l1927:
  2005  0535  0854               	movf	___lwmod@dividend+1,w
  2006  0536  00D2               	movwf	?___lwmod+1
  2007  0537  0853               	movf	___lwmod@dividend,w
  2008  0538  00D1               	movwf	?___lwmod
  2009  0539                     l578:
  2010  0539  0008               	return
  2011  053A                     __end_of___lwmod:
  2012                           
  2013                           	psect	text5
  2014  03FC                     __ptext5:	
  2015 ;; *************** function ___lwdiv *****************
  2016 ;; Defined at:
  2017 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;  divisor         2    0[BANK0 ] unsigned int 
  2020 ;;  dividend        2    2[BANK0 ] unsigned int 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  quotient        2    4[BANK0 ] unsigned int 
  2023 ;;  counter         1    6[BANK0 ] unsigned char 
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  2    0[BANK0 ] unsigned int 
  2026 ;; Registers used:
  2027 ;;		wreg, status,2, status,0
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2033 ;;      Params:         0       4       0       0       0
  2034 ;;      Locals:         0       3       0       0       0
  2035 ;;      Temps:          1       0       0       0       0
  2036 ;;      Totals:         1       7       0       0       0
  2037 ;;Total ram usage:        8 bytes
  2038 ;; Hardware stack levels used: 1
  2039 ;; Hardware stack levels required when called: 2
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_sprintf
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047  03FC                     ___lwdiv:	
  2048                           ;psect for function ___lwdiv
  2049                           
  2050  03FC                     l1457:	
  2051                           ;incstack = 0
  2052                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2053                           
  2054  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  2055  03FD  1303               	bcf	3,6	;RP1=0, select bank0
  2056  03FE  01CE               	clrf	___lwdiv@quotient
  2057  03FF  01CF               	clrf	___lwdiv@quotient+1
  2058  0400                     l1459:
  2059  0400  084A               	movf	___lwdiv@divisor,w
  2060  0401  044B               	iorwf	___lwdiv@divisor+1,w
  2061  0402  1903               	btfsc	3,2
  2062  0403  2C05               	goto	u801
  2063  0404  2C06               	goto	u800
  2064  0405                     u801:
  2065  0405  2C3D               	goto	l1479
  2066  0406                     u800:
  2067  0406                     l1461:
  2068  0406  01D0               	clrf	___lwdiv@counter
  2069  0407  0AD0               	incf	___lwdiv@counter,f
  2070  0408  2C14               	goto	l1467
  2071  0409                     l1463:
  2072  0409  3001               	movlw	1
  2073  040A                     u815:
  2074  040A  1003               	clrc
  2075  040B  0DCA               	rlf	___lwdiv@divisor,f
  2076  040C  0DCB               	rlf	___lwdiv@divisor+1,f
  2077  040D  3EFF               	addlw	-1
  2078  040E  1D03               	skipz
  2079  040F  2C0A               	goto	u815
  2080  0410                     l1465:
  2081  0410  3001               	movlw	1
  2082  0411  00F6               	movwf	??___lwdiv
  2083  0412  0876               	movf	??___lwdiv,w
  2084  0413  07D0               	addwf	___lwdiv@counter,f
  2085  0414                     l1467:
  2086  0414  1FCB               	btfss	___lwdiv@divisor+1,7
  2087  0415  2C17               	goto	u821
  2088  0416  2C18               	goto	u820
  2089  0417                     u821:
  2090  0417  2C09               	goto	l1463
  2091  0418                     u820:
  2092  0418                     l1469:
  2093  0418  3001               	movlw	1
  2094  0419                     u835:
  2095  0419  1003               	clrc
  2096  041A  0DCE               	rlf	___lwdiv@quotient,f
  2097  041B  0DCF               	rlf	___lwdiv@quotient+1,f
  2098  041C  3EFF               	addlw	-1
  2099  041D  1D03               	skipz
  2100  041E  2C19               	goto	u835
  2101  041F  084B               	movf	___lwdiv@divisor+1,w
  2102  0420  024D               	subwf	___lwdiv@dividend+1,w
  2103  0421  1D03               	skipz
  2104  0422  2C25               	goto	u845
  2105  0423  084A               	movf	___lwdiv@divisor,w
  2106  0424  024C               	subwf	___lwdiv@dividend,w
  2107  0425                     u845:
  2108  0425  1C03               	skipc
  2109  0426  2C28               	goto	u841
  2110  0427  2C29               	goto	u840
  2111  0428                     u841:
  2112  0428  2C30               	goto	l1475
  2113  0429                     u840:
  2114  0429                     l1471:
  2115  0429  084A               	movf	___lwdiv@divisor,w
  2116  042A  02CC               	subwf	___lwdiv@dividend,f
  2117  042B  084B               	movf	___lwdiv@divisor+1,w
  2118  042C  1C03               	skipc
  2119  042D  03CD               	decf	___lwdiv@dividend+1,f
  2120  042E  02CD               	subwf	___lwdiv@dividend+1,f
  2121  042F                     l1473:
  2122  042F  144E               	bsf	___lwdiv@quotient,0
  2123  0430                     l1475:
  2124  0430  3001               	movlw	1
  2125  0431                     u855:
  2126  0431  1003               	clrc
  2127  0432  0CCB               	rrf	___lwdiv@divisor+1,f
  2128  0433  0CCA               	rrf	___lwdiv@divisor,f
  2129  0434  3EFF               	addlw	-1
  2130  0435  1D03               	skipz
  2131  0436  2C31               	goto	u855
  2132  0437                     l1477:
  2133  0437  3001               	movlw	1
  2134  0438  02D0               	subwf	___lwdiv@counter,f
  2135  0439  1D03               	btfss	3,2
  2136  043A  2C3C               	goto	u861
  2137  043B  2C3D               	goto	u860
  2138  043C                     u861:
  2139  043C  2C18               	goto	l1469
  2140  043D                     u860:
  2141  043D                     l1479:
  2142  043D  084F               	movf	___lwdiv@quotient+1,w
  2143  043E  00CB               	movwf	?___lwdiv+1
  2144  043F  084E               	movf	___lwdiv@quotient,w
  2145  0440  00CA               	movwf	?___lwdiv
  2146  0441                     l568:
  2147  0441  0008               	return
  2148  0442                     __end_of___lwdiv:
  2149                           
  2150                           	psect	text6
  2151  059A                     __ptext6:	
  2152 ;; *************** function _setup *****************
  2153 ;; Defined at:
  2154 ;;		line 121 in file "main_master_p1.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2168 ;;      Params:         0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0
  2170 ;;      Temps:          0       0       0       0       0
  2171 ;;      Totals:         0       0       0       0       0
  2172 ;;Total ram usage:        0 bytes
  2173 ;; Hardware stack levels used: 1
  2174 ;; Hardware stack levels required when called: 5
  2175 ;; This function calls:
  2176 ;;		_Lcd_Init
  2177 ;;		_USART_set
  2178 ;;		_int_osc_MHz
  2179 ;; This function is called by:
  2180 ;;		_main
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184  059A                     _setup:	
  2185                           ;psect for function _setup
  2186                           
  2187  059A                     l1931:	
  2188                           ;incstack = 0
  2189                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2190                           
  2191                           
  2192                           ;main_master_p1.c: 122:     int_osc_MHz(1);
  2193  059A  3001               	movlw	1
  2194  059B  120A  118A  2484  120A  118A  	fcall	_int_osc_MHz
  2195  05A0                     l1933:
  2196                           
  2197                           ;main_master_p1.c: 125:     ANSEL = 0;
  2198  05A0  1683               	bsf	3,5	;RP0=1, select bank3
  2199  05A1  1703               	bsf	3,6	;RP1=1, select bank3
  2200  05A2  0188               	clrf	8	;volatile
  2201  05A3                     l1935:
  2202                           
  2203                           ;main_master_p1.c: 126:     ANSELH = 0;
  2204  05A3  0189               	clrf	9	;volatile
  2205  05A4                     l1937:
  2206                           
  2207                           ;main_master_p1.c: 128:     TRISA = 0;
  2208  05A4  1683               	bsf	3,5	;RP0=1, select bank1
  2209  05A5  1303               	bcf	3,6	;RP1=0, select bank1
  2210  05A6  0185               	clrf	5	;volatile
  2211  05A7                     l1939:
  2212                           
  2213                           ;main_master_p1.c: 129:     TRISB = 0;
  2214  05A7  0186               	clrf	6	;volatile
  2215  05A8                     l1941:
  2216                           
  2217                           ;main_master_p1.c: 131:     Lcd_Init();
  2218  05A8  120A  118A  23A5  120A  118A  	fcall	_Lcd_Init
  2219  05AD                     l1943:
  2220                           
  2221                           ;main_master_p1.c: 132:     USART_set(9600);
  2222  05AD  3000               	movlw	0
  2223  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  2224  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  2225  05B0  00DA               	movwf	USART_set@baudrate+3
  2226  05B1  3000               	movlw	0
  2227  05B2  00D9               	movwf	USART_set@baudrate+2
  2228  05B3  3025               	movlw	37
  2229  05B4  00D8               	movwf	USART_set@baudrate+1
  2230  05B5  3080               	movlw	128
  2231  05B6  00D7               	movwf	USART_set@baudrate
  2232  05B7  120A  118A  2217  120A  118A  	fcall	_USART_set
  2233  05BC                     l1945:
  2234                           
  2235                           ;main_master_p1.c: 135:     INTCONbits.GIE = 1;
  2236  05BC  178B               	bsf	11,7	;volatile
  2237  05BD                     l1947:
  2238                           
  2239                           ;main_master_p1.c: 136:     INTCONbits.PEIE = 1;
  2240  05BD  170B               	bsf	11,6	;volatile
  2241  05BE                     l72:
  2242  05BE  0008               	return
  2243  05BF                     __end_of_setup:
  2244                           
  2245                           	psect	text7
  2246  0484                     __ptext7:	
  2247 ;; *************** function _int_osc_MHz *****************
  2248 ;; Defined at:
  2249 ;;		line 13 in file "osc.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  freq            1    wreg     unsigned char 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;  freq            1    6[COMMON] unsigned char 
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  1    wreg      void 
  2256 ;; Registers used:
  2257 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2263 ;;      Params:         0       0       0       0       0
  2264 ;;      Locals:         1       0       0       0       0
  2265 ;;      Temps:          0       2       0       0       0
  2266 ;;      Totals:         1       2       0       0       0
  2267 ;;Total ram usage:        3 bytes
  2268 ;; Hardware stack levels used: 1
  2269 ;; Hardware stack levels required when called: 2
  2270 ;; This function calls:
  2271 ;;		Nothing
  2272 ;; This function is called by:
  2273 ;;		_setup
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277  0484                     _int_osc_MHz:	
  2278                           ;psect for function _int_osc_MHz
  2279                           
  2280                           
  2281                           ;incstack = 0
  2282                           ; Regs used in _int_osc_MHz: [wreg-fsr0h+status,2+status,0]
  2283                           ;int_osc_MHz@freq stored from wreg
  2284  0484  00F6               	movwf	int_osc_MHz@freq
  2285  0485                     l1817:
  2286                           
  2287                           ;osc.c: 14:     switch(freq){
  2288  0485  2CA7               	goto	l1831
  2289  0486                     l1819:
  2290                           
  2291                           ;osc.c: 16:             OSCCONbits.IRCF = 0b100;
  2292  0486  1683               	bsf	3,5	;RP0=1, select bank1
  2293  0487  1303               	bcf	3,6	;RP1=0, select bank1
  2294  0488  080F               	movf	15,w	;volatile
  2295  0489  398F               	andlw	-113
  2296  048A  3840               	iorlw	64
  2297  048B  008F               	movwf	15	;volatile
  2298                           
  2299                           ;osc.c: 17:             break;
  2300  048C  2CBF               	goto	l134
  2301  048D                     l1821:
  2302                           
  2303                           ;osc.c: 19:             OSCCONbits.IRCF = 0b101;
  2304  048D  1683               	bsf	3,5	;RP0=1, select bank1
  2305  048E  1303               	bcf	3,6	;RP1=0, select bank1
  2306  048F  080F               	movf	15,w	;volatile
  2307  0490  398F               	andlw	-113
  2308  0491  3850               	iorlw	80
  2309  0492  008F               	movwf	15	;volatile
  2310                           
  2311                           ;osc.c: 20:             break;
  2312  0493  2CBF               	goto	l134
  2313  0494                     l1823:
  2314                           
  2315                           ;osc.c: 22:             OSCCONbits.IRCF = 0b110;
  2316  0494  1683               	bsf	3,5	;RP0=1, select bank1
  2317  0495  1303               	bcf	3,6	;RP1=0, select bank1
  2318  0496  080F               	movf	15,w	;volatile
  2319  0497  398F               	andlw	-113
  2320  0498  3860               	iorlw	96
  2321  0499  008F               	movwf	15	;volatile
  2322                           
  2323                           ;osc.c: 23:             break;
  2324  049A  2CBF               	goto	l134
  2325  049B                     l1825:
  2326                           
  2327                           ;osc.c: 25:             OSCCONbits.IRCF = 0b111;
  2328  049B  3070               	movlw	112
  2329  049C  1683               	bsf	3,5	;RP0=1, select bank1
  2330  049D  1303               	bcf	3,6	;RP1=0, select bank1
  2331  049E  048F               	iorwf	15,f	;volatile
  2332                           
  2333                           ;osc.c: 26:             break;
  2334  049F  2CBF               	goto	l134
  2335  04A0                     l1827:
  2336                           
  2337                           ;osc.c: 28:             OSCCONbits.IRCF = 0b110;
  2338  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  2339  04A1  1303               	bcf	3,6	;RP1=0, select bank1
  2340  04A2  080F               	movf	15,w	;volatile
  2341  04A3  398F               	andlw	-113
  2342  04A4  3860               	iorlw	96
  2343  04A5  008F               	movwf	15	;volatile
  2344                           
  2345                           ;osc.c: 29:             break;
  2346  04A6  2CBF               	goto	l134
  2347  04A7                     l1831:
  2348  04A7  0876               	movf	int_osc_MHz@freq,w
  2349  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2350  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2351  04AA  00CA               	movwf	??_int_osc_MHz
  2352  04AB  01CB               	clrf	??_int_osc_MHz+1
  2353                           
  2354                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2355                           ; Switch size 1, requested type "simple"
  2356                           ; Number of cases is 1, Range of values is 0 to 0
  2357                           ; switch strategies available:
  2358                           ; Name         Instructions Cycles
  2359                           ; simple_byte            4     3 (average)
  2360                           ; direct_byte           11     8 (fixed)
  2361                           ; jumptable            260     6 (fixed)
  2362                           ;	Chosen strategy is simple_byte
  2363  04AC  084B               	movf	??_int_osc_MHz+1,w
  2364  04AD  3A00               	xorlw	0	; case 0
  2365  04AE  1903               	skipnz
  2366  04AF  2CB1               	goto	l2201
  2367  04B0  2CA0               	goto	l1827
  2368  04B1                     l2201:
  2369                           
  2370                           ; Switch size 1, requested type "simple"
  2371                           ; Number of cases is 4, Range of values is 1 to 8
  2372                           ; switch strategies available:
  2373                           ; Name         Instructions Cycles
  2374                           ; simple_byte           13     7 (average)
  2375                           ; direct_byte           35    11 (fixed)
  2376                           ; jumptable            263     9 (fixed)
  2377                           ;	Chosen strategy is simple_byte
  2378  04B1  084A               	movf	??_int_osc_MHz,w
  2379  04B2  3A01               	xorlw	1	; case 1
  2380  04B3  1903               	skipnz
  2381  04B4  2C86               	goto	l1819
  2382  04B5  3A03               	xorlw	3	; case 2
  2383  04B6  1903               	skipnz
  2384  04B7  2C8D               	goto	l1821
  2385  04B8  3A06               	xorlw	6	; case 4
  2386  04B9  1903               	skipnz
  2387  04BA  2C94               	goto	l1823
  2388  04BB  3A0C               	xorlw	12	; case 8
  2389  04BC  1903               	skipnz
  2390  04BD  2C9B               	goto	l1825
  2391  04BE  2CA0               	goto	l1827
  2392  04BF                     l134:
  2393                           
  2394                           ;osc.c: 31:     OSCCONbits.SCS = 1;
  2395  04BF  140F               	bsf	15,0	;volatile
  2396  04C0                     l139:
  2397  04C0  0008               	return
  2398  04C1                     __end_of_int_osc_MHz:
  2399                           
  2400                           	psect	text8
  2401  0217                     __ptext8:	
  2402 ;; *************** function _USART_set *****************
  2403 ;; Defined at:
  2404 ;;		line 12 in file "USART.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  baudrate        4   13[BANK0 ] const unsigned long 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;		None
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      void 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0, pclath, cstack
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2418 ;;      Params:         0       4       0       0       0
  2419 ;;      Locals:         0       0       0       0       0
  2420 ;;      Temps:          0      12       0       0       0
  2421 ;;      Totals:         0      16       0       0       0
  2422 ;;Total ram usage:       16 bytes
  2423 ;; Hardware stack levels used: 1
  2424 ;; Hardware stack levels required when called: 3
  2425 ;; This function calls:
  2426 ;;		___lldiv
  2427 ;; This function is called by:
  2428 ;;		_setup
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432  0217                     _USART_set:	
  2433                           ;psect for function _USART_set
  2434                           
  2435  0217                     l1395:	
  2436                           ;incstack = 0
  2437                           ; Regs used in _USART_set: [wreg+status,2+status,0+pclath+cstack]
  2438                           
  2439                           
  2440                           ;USART.c: 12: void USART_set(const unsigned long int baudrate);USART.c: 13: {;USART.c: 1
      +                          5:     TXSTAbits.BRGH = 1;
  2441  0217  1683               	bsf	3,5	;RP0=1, select bank1
  2442  0218  1303               	bcf	3,6	;RP1=0, select bank1
  2443  0219  1518               	bsf	24,2	;volatile
  2444                           
  2445                           ;USART.c: 16:     BAUDCTLbits.BRG16 = 1;
  2446  021A  1683               	bsf	3,5	;RP0=1, select bank3
  2447  021B  1703               	bsf	3,6	;RP1=1, select bank3
  2448  021C  1587               	bsf	7,3	;volatile
  2449  021D                     l1397:
  2450                           
  2451                           ;USART.c: 17:     SPBRGH = 0;
  2452  021D  1683               	bsf	3,5	;RP0=1, select bank1
  2453  021E  1303               	bcf	3,6	;RP1=0, select bank1
  2454  021F  019A               	clrf	26	;volatile
  2455  0220                     l1399:
  2456                           
  2457                           ;USART.c: 18:     SPBRG = (1000000 - baudrate * 4) / (baudrate * 4);
  2458  0220  1283               	bcf	3,5	;RP0=0, select bank0
  2459  0221  1303               	bcf	3,6	;RP1=0, select bank0
  2460  0222  0857               	movf	USART_set@baudrate,w
  2461  0223  00DB               	movwf	??_USART_set
  2462  0224  0858               	movf	USART_set@baudrate+1,w
  2463  0225  00DC               	movwf	??_USART_set+1
  2464  0226  0859               	movf	USART_set@baudrate+2,w
  2465  0227  00DD               	movwf	??_USART_set+2
  2466  0228  085A               	movf	USART_set@baudrate+3,w
  2467  0229  00DE               	movwf	??_USART_set+3
  2468  022A  3002               	movlw	2
  2469  022B                     u705:
  2470  022B  1003               	clrc
  2471  022C  0DDB               	rlf	??_USART_set,f
  2472  022D  0DDC               	rlf	??_USART_set+1,f
  2473  022E  0DDD               	rlf	??_USART_set+2,f
  2474  022F  0DDE               	rlf	??_USART_set+3,f
  2475  0230                     u700:
  2476  0230  3EFF               	addlw	-1
  2477  0231  1D03               	skipz
  2478  0232  2A2B               	goto	u705
  2479  0233  085E               	movf	??_USART_set+3,w
  2480  0234  00CD               	movwf	___lldiv@divisor+3
  2481  0235  085D               	movf	??_USART_set+2,w
  2482  0236  00CC               	movwf	___lldiv@divisor+2
  2483  0237  085C               	movf	??_USART_set+1,w
  2484  0238  00CB               	movwf	___lldiv@divisor+1
  2485  0239  085B               	movf	??_USART_set,w
  2486  023A  00CA               	movwf	___lldiv@divisor
  2487  023B  0857               	movf	USART_set@baudrate,w
  2488  023C  00DF               	movwf	??_USART_set+4
  2489  023D  0858               	movf	USART_set@baudrate+1,w
  2490  023E  00E0               	movwf	??_USART_set+5
  2491  023F  0859               	movf	USART_set@baudrate+2,w
  2492  0240  00E1               	movwf	??_USART_set+6
  2493  0241  085A               	movf	USART_set@baudrate+3,w
  2494  0242  00E2               	movwf	??_USART_set+7
  2495  0243  3002               	movlw	2
  2496  0244                     u715:
  2497  0244  1003               	clrc
  2498  0245  0DDF               	rlf	??_USART_set+4,f
  2499  0246  0DE0               	rlf	??_USART_set+5,f
  2500  0247  0DE1               	rlf	??_USART_set+6,f
  2501  0248  0DE2               	rlf	??_USART_set+7,f
  2502  0249                     u710:
  2503  0249  3EFF               	addlw	-1
  2504  024A  1D03               	skipz
  2505  024B  2A44               	goto	u715
  2506  024C  3040               	movlw	64
  2507  024D  00E3               	movwf	??_USART_set+8
  2508  024E  3042               	movlw	66
  2509  024F  00E4               	movwf	??_USART_set+9
  2510  0250  300F               	movlw	15
  2511  0251  00E5               	movwf	??_USART_set+10
  2512  0252  3000               	movlw	0
  2513  0253  00E6               	movwf	??_USART_set+11
  2514  0254  085F               	movf	??_USART_set+4,w
  2515  0255  02E3               	subwf	??_USART_set+8,f
  2516  0256  0860               	movf	??_USART_set+5,w
  2517  0257  1C03               	skipc
  2518  0258  0F60               	incfsz	??_USART_set+5,w
  2519  0259  2A5B               	goto	u721
  2520  025A  2A5C               	goto	u722
  2521  025B                     u721:
  2522  025B  02E4               	subwf	??_USART_set+9,f
  2523  025C                     u722:
  2524  025C  0861               	movf	??_USART_set+6,w
  2525  025D  1C03               	skipc
  2526  025E  0F61               	incfsz	??_USART_set+6,w
  2527  025F  2A61               	goto	u723
  2528  0260  2A62               	goto	u724
  2529  0261                     u723:
  2530  0261  02E5               	subwf	??_USART_set+10,f
  2531  0262                     u724:
  2532  0262  0862               	movf	??_USART_set+7,w
  2533  0263  1C03               	skipc
  2534  0264  0F62               	incfsz	??_USART_set+7,w
  2535  0265  2A67               	goto	u725
  2536  0266  2A68               	goto	u726
  2537  0267                     u725:
  2538  0267  02E6               	subwf	??_USART_set+11,f
  2539  0268                     u726:
  2540  0268  0866               	movf	??_USART_set+11,w
  2541  0269  00D1               	movwf	___lldiv@dividend+3
  2542  026A  0865               	movf	??_USART_set+10,w
  2543  026B  00D0               	movwf	___lldiv@dividend+2
  2544  026C  0864               	movf	??_USART_set+9,w
  2545  026D  00CF               	movwf	___lldiv@dividend+1
  2546  026E  0863               	movf	??_USART_set+8,w
  2547  026F  00CE               	movwf	___lldiv@dividend
  2548  0270  120A  118A  2287  120A  118A  	fcall	___lldiv
  2549  0275  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0276  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0277  084A               	movf	?___lldiv,w
  2552  0278  1683               	bsf	3,5	;RP0=1, select bank1
  2553  0279  1303               	bcf	3,6	;RP1=0, select bank1
  2554  027A  0099               	movwf	25	;volatile
  2555  027B                     l1401:
  2556                           
  2557                           ;USART.c: 19:     TXSTAbits.SYNC = 0;
  2558  027B  1218               	bcf	24,4	;volatile
  2559  027C                     l1403:
  2560                           
  2561                           ;USART.c: 20:     RCSTAbits.SPEN = 1;
  2562  027C  1283               	bcf	3,5	;RP0=0, select bank0
  2563  027D  1303               	bcf	3,6	;RP1=0, select bank0
  2564  027E  1798               	bsf	24,7	;volatile
  2565  027F                     l1405:
  2566                           
  2567                           ;USART.c: 22:     PIE1bits.RCIE = 1;
  2568  027F  1683               	bsf	3,5	;RP0=1, select bank1
  2569  0280  1303               	bcf	3,6	;RP1=0, select bank1
  2570  0281  168C               	bsf	12,5	;volatile
  2571  0282                     l1407:
  2572                           
  2573                           ;USART.c: 25:     RCSTAbits.RX9 = 0;
  2574  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2575  0283  1303               	bcf	3,6	;RP1=0, select bank0
  2576  0284  1318               	bcf	24,6	;volatile
  2577  0285                     l1409:
  2578                           
  2579                           ;USART.c: 27:     RCSTAbits.CREN = 1;
  2580  0285  1618               	bsf	24,4	;volatile
  2581  0286                     l156:
  2582  0286  0008               	return
  2583  0287                     __end_of_USART_set:
  2584                           
  2585                           	psect	text9
  2586  0287                     __ptext9:	
  2587 ;; *************** function ___lldiv *****************
  2588 ;; Defined at:
  2589 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\__lldiv.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  divisor         4    0[BANK0 ] unsigned long 
  2592 ;;  dividend        4    4[BANK0 ] unsigned long 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  quotient        4    8[BANK0 ] unsigned long 
  2595 ;;  counter         1   12[BANK0 ] unsigned char 
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  4    0[BANK0 ] unsigned long 
  2598 ;; Registers used:
  2599 ;;		wreg, status,2, status,0
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2605 ;;      Params:         0       8       0       0       0
  2606 ;;      Locals:         0       5       0       0       0
  2607 ;;      Temps:          1       0       0       0       0
  2608 ;;      Totals:         1      13       0       0       0
  2609 ;;Total ram usage:       14 bytes
  2610 ;; Hardware stack levels used: 1
  2611 ;; Hardware stack levels required when called: 2
  2612 ;; This function calls:
  2613 ;;		Nothing
  2614 ;; This function is called by:
  2615 ;;		_USART_set
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619  0287                     ___lldiv:	
  2620                           ;psect for function ___lldiv
  2621                           
  2622  0287                     l1323:	
  2623                           ;incstack = 0
  2624                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2625                           
  2626  0287  3000               	movlw	0
  2627  0288  1283               	bcf	3,5	;RP0=0, select bank0
  2628  0289  1303               	bcf	3,6	;RP1=0, select bank0
  2629  028A  00D5               	movwf	___lldiv@quotient+3
  2630  028B  3000               	movlw	0
  2631  028C  00D4               	movwf	___lldiv@quotient+2
  2632  028D  3000               	movlw	0
  2633  028E  00D3               	movwf	___lldiv@quotient+1
  2634  028F  3000               	movlw	0
  2635  0290  00D2               	movwf	___lldiv@quotient
  2636  0291  084D               	movf	___lldiv@divisor+3,w
  2637  0292  044C               	iorwf	___lldiv@divisor+2,w
  2638  0293  044B               	iorwf	___lldiv@divisor+1,w
  2639  0294  044A               	iorwf	___lldiv@divisor,w
  2640  0295  1903               	skipnz
  2641  0296  2A98               	goto	u631
  2642  0297  2A99               	goto	u630
  2643  0298                     u631:
  2644  0298  2AE6               	goto	l1343
  2645  0299                     u630:
  2646  0299                     l1325:
  2647  0299  01D6               	clrf	___lldiv@counter
  2648  029A  0AD6               	incf	___lldiv@counter,f
  2649  029B  2AA9               	goto	l1329
  2650  029C                     l1327:
  2651  029C  3001               	movlw	1
  2652  029D  00F6               	movwf	??___lldiv
  2653  029E                     u645:
  2654  029E  1003               	clrc
  2655  029F  0DCA               	rlf	___lldiv@divisor,f
  2656  02A0  0DCB               	rlf	___lldiv@divisor+1,f
  2657  02A1  0DCC               	rlf	___lldiv@divisor+2,f
  2658  02A2  0DCD               	rlf	___lldiv@divisor+3,f
  2659  02A3  0BF6               	decfsz	??___lldiv,f
  2660  02A4  2A9E               	goto	u645
  2661  02A5  3001               	movlw	1
  2662  02A6  00F6               	movwf	??___lldiv
  2663  02A7  0876               	movf	??___lldiv,w
  2664  02A8  07D6               	addwf	___lldiv@counter,f
  2665  02A9                     l1329:
  2666  02A9  1FCD               	btfss	___lldiv@divisor+3,7
  2667  02AA  2AAC               	goto	u651
  2668  02AB  2AAD               	goto	u650
  2669  02AC                     u651:
  2670  02AC  2A9C               	goto	l1327
  2671  02AD                     u650:
  2672  02AD                     l1331:
  2673  02AD  3001               	movlw	1
  2674  02AE  00F6               	movwf	??___lldiv
  2675  02AF                     u665:
  2676  02AF  1003               	clrc
  2677  02B0  0DD2               	rlf	___lldiv@quotient,f
  2678  02B1  0DD3               	rlf	___lldiv@quotient+1,f
  2679  02B2  0DD4               	rlf	___lldiv@quotient+2,f
  2680  02B3  0DD5               	rlf	___lldiv@quotient+3,f
  2681  02B4  0BF6               	decfsz	??___lldiv,f
  2682  02B5  2AAF               	goto	u665
  2683  02B6                     l1333:
  2684  02B6  084D               	movf	___lldiv@divisor+3,w
  2685  02B7  0251               	subwf	___lldiv@dividend+3,w
  2686  02B8  1D03               	skipz
  2687  02B9  2AC4               	goto	u675
  2688  02BA  084C               	movf	___lldiv@divisor+2,w
  2689  02BB  0250               	subwf	___lldiv@dividend+2,w
  2690  02BC  1D03               	skipz
  2691  02BD  2AC4               	goto	u675
  2692  02BE  084B               	movf	___lldiv@divisor+1,w
  2693  02BF  024F               	subwf	___lldiv@dividend+1,w
  2694  02C0  1D03               	skipz
  2695  02C1  2AC4               	goto	u675
  2696  02C2  084A               	movf	___lldiv@divisor,w
  2697  02C3  024E               	subwf	___lldiv@dividend,w
  2698  02C4                     u675:
  2699  02C4  1C03               	skipc
  2700  02C5  2AC7               	goto	u671
  2701  02C6  2AC8               	goto	u670
  2702  02C7                     u671:
  2703  02C7  2AD7               	goto	l1339
  2704  02C8                     u670:
  2705  02C8                     l1335:
  2706  02C8  084A               	movf	___lldiv@divisor,w
  2707  02C9  02CE               	subwf	___lldiv@dividend,f
  2708  02CA  084B               	movf	___lldiv@divisor+1,w
  2709  02CB  1C03               	skipc
  2710  02CC  0F4B               	incfsz	___lldiv@divisor+1,w
  2711  02CD  02CF               	subwf	___lldiv@dividend+1,f
  2712  02CE  084C               	movf	___lldiv@divisor+2,w
  2713  02CF  1C03               	skipc
  2714  02D0  0F4C               	incfsz	___lldiv@divisor+2,w
  2715  02D1  02D0               	subwf	___lldiv@dividend+2,f
  2716  02D2  084D               	movf	___lldiv@divisor+3,w
  2717  02D3  1C03               	skipc
  2718  02D4  0F4D               	incfsz	___lldiv@divisor+3,w
  2719  02D5  02D1               	subwf	___lldiv@dividend+3,f
  2720  02D6                     l1337:
  2721  02D6  1452               	bsf	___lldiv@quotient,0
  2722  02D7                     l1339:
  2723  02D7  3001               	movlw	1
  2724  02D8                     u685:
  2725  02D8  1003               	clrc
  2726  02D9  0CCD               	rrf	___lldiv@divisor+3,f
  2727  02DA  0CCC               	rrf	___lldiv@divisor+2,f
  2728  02DB  0CCB               	rrf	___lldiv@divisor+1,f
  2729  02DC  0CCA               	rrf	___lldiv@divisor,f
  2730  02DD  3EFF               	addlw	-1
  2731  02DE  1D03               	skipz
  2732  02DF  2AD8               	goto	u685
  2733  02E0                     l1341:
  2734  02E0  3001               	movlw	1
  2735  02E1  02D6               	subwf	___lldiv@counter,f
  2736  02E2  1D03               	btfss	3,2
  2737  02E3  2AE5               	goto	u691
  2738  02E4  2AE6               	goto	u690
  2739  02E5                     u691:
  2740  02E5  2AAD               	goto	l1331
  2741  02E6                     u690:
  2742  02E6                     l1343:
  2743  02E6  0855               	movf	___lldiv@quotient+3,w
  2744  02E7  00CD               	movwf	?___lldiv+3
  2745  02E8  0854               	movf	___lldiv@quotient+2,w
  2746  02E9  00CC               	movwf	?___lldiv+2
  2747  02EA  0853               	movf	___lldiv@quotient+1,w
  2748  02EB  00CB               	movwf	?___lldiv+1
  2749  02EC  0852               	movf	___lldiv@quotient,w
  2750  02ED  00CA               	movwf	?___lldiv
  2751  02EE                     l332:
  2752  02EE  0008               	return
  2753  02EF                     __end_of___lldiv:
  2754                           
  2755                           	psect	text10
  2756  03A5                     __ptext10:	
  2757 ;; *************** function _Lcd_Init *****************
  2758 ;; Defined at:
  2759 ;;		line 68 in file "LCD.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;		None
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;		None
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		wreg, status,2, status,0, pclath, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2773 ;;      Params:         0       0       0       0       0
  2774 ;;      Locals:         0       0       0       0       0
  2775 ;;      Temps:          0       2       0       0       0
  2776 ;;      Totals:         0       2       0       0       0
  2777 ;;Total ram usage:        2 bytes
  2778 ;; Hardware stack levels used: 1
  2779 ;; Hardware stack levels required when called: 4
  2780 ;; This function calls:
  2781 ;;		_Lcd_Cmd
  2782 ;;		_Lcd_Port
  2783 ;; This function is called by:
  2784 ;;		_setup
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788  03A5                     _Lcd_Init:	
  2789                           ;psect for function _Lcd_Init
  2790                           
  2791  03A5                     l1837:	
  2792                           ;incstack = 0
  2793                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2794                           
  2795                           
  2796                           ;LCD.c: 69:     Lcd_Port(0x00);
  2797  03A5  3000               	movlw	0
  2798  03A6  120A  118A  25E4  120A  118A  	fcall	_Lcd_Port
  2799  03AB                     l1839:
  2800                           
  2801                           ;LCD.c: 70:     _delay((unsigned long)((20)*(1000000/4000.0)));
  2802  03AB  3007               	movlw	7
  2803  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  2804  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  2805  03AE  00CD               	movwf	??_Lcd_Init+1
  2806  03AF  307C               	movlw	124
  2807  03B0  00CC               	movwf	??_Lcd_Init
  2808  03B1                     u1537:
  2809  03B1  0BCC               	decfsz	??_Lcd_Init,f
  2810  03B2  2BB1               	goto	u1537
  2811  03B3  0BCD               	decfsz	??_Lcd_Init+1,f
  2812  03B4  2BB1               	goto	u1537
  2813  03B5  0000               	nop
  2814  03B6                     l1841:
  2815                           
  2816                           ;LCD.c: 71:     Lcd_Cmd(0x03);
  2817  03B6  3003               	movlw	3
  2818  03B7  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  2819                           
  2820                           ;LCD.c: 72:     _delay((unsigned long)((5)*(1000000/4000.0)));
  2821  03BC  30F9               	movlw	249
  2822  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  2823  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  2824  03BF  00CC               	movwf	??_Lcd_Init
  2825  03C0                     u1547:
  2826  03C0  2BC1               	nop2
  2827  03C1  0BCC               	decfsz	??_Lcd_Init,f
  2828  03C2  2BC0               	goto	u1547
  2829  03C3  2BC4               	nop2
  2830  03C4                     l1843:
  2831                           
  2832                           ;LCD.c: 73:     Lcd_Cmd(0x03);
  2833  03C4  3003               	movlw	3
  2834  03C5  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  2835  03CA                     l1845:
  2836                           
  2837                           ;LCD.c: 74:     _delay((unsigned long)((11)*(1000000/4000000.0)));
  2838  03CA  2BCB               	nop2	;2 cycle nop
  2839  03CB                     l1847:
  2840                           
  2841                           ;LCD.c: 75:     Lcd_Cmd(0x03);
  2842  03CB  3003               	movlw	3
  2843  03CC  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  2844  03D1                     l1849:
  2845                           
  2846                           ;LCD.c: 77:     Lcd_Cmd(0x02);
  2847  03D1  3002               	movlw	2
  2848  03D2  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  2849  03D7                     l1851:
  2850                           
  2851                           ;LCD.c: 78:     Lcd_Cmd(0x02);
  2852  03D7  3002               	movlw	2
  2853  03D8  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  2854  03DD                     l1853:
  2855                           
  2856                           ;LCD.c: 79:     Lcd_Cmd(0x08);
  2857  03DD  3008               	movlw	8
  2858  03DE  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  2859  03E3                     l1855:
  2860                           
  2861                           ;LCD.c: 80:     Lcd_Cmd(0x00);
  2862  03E3  3000               	movlw	0
  2863  03E4  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  2864  03E9                     l1857:
  2865                           
  2866                           ;LCD.c: 81:     Lcd_Cmd(0x0C);
  2867  03E9  300C               	movlw	12
  2868  03EA  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  2869  03EF                     l1859:
  2870                           
  2871                           ;LCD.c: 82:     Lcd_Cmd(0x00);
  2872  03EF  3000               	movlw	0
  2873  03F0  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  2874  03F5                     l1861:
  2875                           
  2876                           ;LCD.c: 83:     Lcd_Cmd(0x06);
  2877  03F5  3006               	movlw	6
  2878  03F6  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  2879  03FB                     l112:
  2880  03FB  0008               	return
  2881  03FC                     __end_of_Lcd_Init:
  2882                           
  2883                           	psect	text11
  2884  05BF                     __ptext11:	
  2885 ;; *************** function _Lcd_Write_String *****************
  2886 ;; Defined at:
  2887 ;;		line 101 in file "LCD.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  a               1    wreg     PTR unsigned char 
  2890 ;;		 -> srow(20), frow(20), 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  a               1    7[BANK0 ] PTR unsigned char 
  2893 ;;		 -> srow(20), frow(20), 
  2894 ;;  i               2    5[BANK0 ] int 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      void 
  2897 ;; Registers used:
  2898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2904 ;;      Params:         0       0       0       0       0
  2905 ;;      Locals:         0       3       0       0       0
  2906 ;;      Temps:          0       1       0       0       0
  2907 ;;      Totals:         0       4       0       0       0
  2908 ;;Total ram usage:        4 bytes
  2909 ;; Hardware stack levels used: 1
  2910 ;; Hardware stack levels required when called: 4
  2911 ;; This function calls:
  2912 ;;		_Lcd_Write_Char
  2913 ;; This function is called by:
  2914 ;;		_main
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918  05BF                     _Lcd_Write_String:	
  2919                           ;psect for function _Lcd_Write_String
  2920                           
  2921                           
  2922                           ;incstack = 0
  2923                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2924                           ;Lcd_Write_String@a stored from wreg
  2925  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  2926  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  2927  05C1  00D1               	movwf	Lcd_Write_String@a
  2928  05C2                     l2091:
  2929                           
  2930                           ;LCD.c: 102:     int i;;LCD.c: 103:     for (i = 0; a[i] != '\0'; i++)
  2931  05C2  01CF               	clrf	Lcd_Write_String@i
  2932  05C3  01D0               	clrf	Lcd_Write_String@i+1
  2933  05C4  2DD8               	goto	l2097
  2934  05C5                     l2093:
  2935                           
  2936                           ;LCD.c: 104:         Lcd_Write_Char(a[i]);
  2937  05C5  084F               	movf	Lcd_Write_String@i,w
  2938  05C6  0751               	addwf	Lcd_Write_String@a,w
  2939  05C7  00CE               	movwf	??_Lcd_Write_String
  2940  05C8  084E               	movf	??_Lcd_Write_String,w
  2941  05C9  0084               	movwf	4
  2942  05CA  0800               	movf	0,w
  2943  05CB  120A  118A  24C1  120A  118A  	fcall	_Lcd_Write_Char
  2944  05D0                     l2095:
  2945  05D0  3001               	movlw	1
  2946  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  2947  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  2948  05D3  07CF               	addwf	Lcd_Write_String@i,f
  2949  05D4  1803               	skipnc
  2950  05D5  0AD0               	incf	Lcd_Write_String@i+1,f
  2951  05D6  3000               	movlw	0
  2952  05D7  07D0               	addwf	Lcd_Write_String@i+1,f
  2953  05D8                     l2097:
  2954  05D8  084F               	movf	Lcd_Write_String@i,w
  2955  05D9  0751               	addwf	Lcd_Write_String@a,w
  2956  05DA  00CE               	movwf	??_Lcd_Write_String
  2957  05DB  084E               	movf	??_Lcd_Write_String,w
  2958  05DC  0084               	movwf	4
  2959  05DD  1383               	bcf	3,7	;select IRP bank0
  2960  05DE  0800               	movf	0,w
  2961  05DF  1D03               	btfss	3,2
  2962  05E0  2DE2               	goto	u1521
  2963  05E1  2DE3               	goto	u1520
  2964  05E2                     u1521:
  2965  05E2  2DC5               	goto	l2093
  2966  05E3                     u1520:
  2967  05E3                     l121:
  2968  05E3  0008               	return
  2969  05E4                     __end_of_Lcd_Write_String:
  2970                           
  2971                           	psect	text12
  2972  04C1                     __ptext12:	
  2973 ;; *************** function _Lcd_Write_Char *****************
  2974 ;; Defined at:
  2975 ;;		line 86 in file "LCD.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  a               1    wreg     unsigned char 
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  a               1    3[BANK0 ] unsigned char 
  2980 ;;  y               1    2[BANK0 ] unsigned char 
  2981 ;;  temp            1    1[BANK0 ] unsigned char 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		wreg, status,2, status,0, pclath, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2991 ;;      Params:         0       0       0       0       0
  2992 ;;      Locals:         0       3       0       0       0
  2993 ;;      Temps:          0       1       0       0       0
  2994 ;;      Totals:         0       4       0       0       0
  2995 ;;Total ram usage:        4 bytes
  2996 ;; Hardware stack levels used: 1
  2997 ;; Hardware stack levels required when called: 3
  2998 ;; This function calls:
  2999 ;;		_Lcd_Port
  3000 ;; This function is called by:
  3001 ;;		_Lcd_Write_String
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005  04C1                     _Lcd_Write_Char:	
  3006                           ;psect for function _Lcd_Write_Char
  3007                           
  3008                           
  3009                           ;incstack = 0
  3010                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3011                           ;Lcd_Write_Char@a stored from wreg
  3012  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  3013  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  3014  04C3  00CD               	movwf	Lcd_Write_Char@a
  3015  04C4                     l1863:
  3016                           
  3017                           ;LCD.c: 87:     char temp, y;;LCD.c: 88:     temp = a & 0x0F;
  3018  04C4  084D               	movf	Lcd_Write_Char@a,w
  3019  04C5  390F               	andlw	15
  3020  04C6  00CA               	movwf	??_Lcd_Write_Char
  3021  04C7  084A               	movf	??_Lcd_Write_Char,w
  3022  04C8  00CB               	movwf	Lcd_Write_Char@temp
  3023                           
  3024                           ;LCD.c: 89:     y = a & 0xF0;
  3025  04C9  084D               	movf	Lcd_Write_Char@a,w
  3026  04CA  39F0               	andlw	240
  3027  04CB  00CA               	movwf	??_Lcd_Write_Char
  3028  04CC  084A               	movf	??_Lcd_Write_Char,w
  3029  04CD  00CC               	movwf	Lcd_Write_Char@y
  3030  04CE                     l1865:
  3031                           
  3032                           ;LCD.c: 90:     RA0 = 1;
  3033  04CE  1405               	bsf	5,0	;volatile
  3034  04CF                     l1867:
  3035                           
  3036                           ;LCD.c: 91:     Lcd_Port(y >> 4);
  3037  04CF  084C               	movf	Lcd_Write_Char@y,w
  3038  04D0  00CA               	movwf	??_Lcd_Write_Char
  3039  04D1  3004               	movlw	4
  3040  04D2                     u1175:
  3041  04D2  1003               	clrc
  3042  04D3  0CCA               	rrf	??_Lcd_Write_Char,f
  3043  04D4  3EFF               	addlw	-1
  3044  04D5  1D03               	skipz
  3045  04D6  2CD2               	goto	u1175
  3046  04D7  084A               	movf	??_Lcd_Write_Char,w
  3047  04D8  120A  118A  25E4  120A  118A  	fcall	_Lcd_Port
  3048  04DD                     l1869:
  3049                           
  3050                           ;LCD.c: 92:     RA1 = 1;
  3051  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  3052  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  3053  04DF  1485               	bsf	5,1	;volatile
  3054  04E0                     l1871:
  3055                           
  3056                           ;LCD.c: 93:     _delay((unsigned long)((40)*(1000000/4000000.0)));
  3057  04E0  3002               	movlw	2
  3058  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  3059  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  3060  04E3  00CA               	movwf	??_Lcd_Write_Char
  3061  04E4                     u1557:
  3062  04E4  0BCA               	decfsz	??_Lcd_Write_Char,f
  3063  04E5  2CE4               	goto	u1557
  3064  04E6  0000               	nop
  3065  04E7                     l1873:
  3066                           
  3067                           ;LCD.c: 94:     RA1 = 0;
  3068  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  3069  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  3070  04E9  1085               	bcf	5,1	;volatile
  3071  04EA                     l1875:
  3072                           
  3073                           ;LCD.c: 95:     Lcd_Port(temp);
  3074  04EA  084B               	movf	Lcd_Write_Char@temp,w
  3075  04EB  120A  118A  25E4  120A  118A  	fcall	_Lcd_Port
  3076  04F0                     l1877:
  3077                           
  3078                           ;LCD.c: 96:     RA1 = 1;
  3079  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  3080  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  3081  04F2  1485               	bsf	5,1	;volatile
  3082  04F3                     l1879:
  3083                           
  3084                           ;LCD.c: 97:     _delay((unsigned long)((40)*(1000000/4000000.0)));
  3085  04F3  3002               	movlw	2
  3086  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  3087  04F5  1303               	bcf	3,6	;RP1=0, select bank0
  3088  04F6  00CA               	movwf	??_Lcd_Write_Char
  3089  04F7                     u1567:
  3090  04F7  0BCA               	decfsz	??_Lcd_Write_Char,f
  3091  04F8  2CF7               	goto	u1567
  3092  04F9  0000               	nop
  3093  04FA                     l1881:
  3094                           
  3095                           ;LCD.c: 98:     RA1 = 0;
  3096  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  3097  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  3098  04FC  1085               	bcf	5,1	;volatile
  3099  04FD                     l115:
  3100  04FD  0008               	return
  3101  04FE                     __end_of_Lcd_Write_Char:
  3102                           
  3103                           	psect	text13
  3104  034D                     __ptext13:	
  3105 ;; *************** function _Lcd_Set_Cursor *****************
  3106 ;; Defined at:
  3107 ;;		line 50 in file "LCD.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;  a               1    wreg     unsigned char 
  3110 ;;  b               1    2[BANK0 ] unsigned char 
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  a               1    5[BANK0 ] unsigned char 
  3113 ;;  temp            1    8[BANK0 ] unsigned char 
  3114 ;;  y               1    7[BANK0 ] unsigned char 
  3115 ;;  z               1    6[BANK0 ] unsigned char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, status,2, status,0, pclath, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3125 ;;      Params:         0       1       0       0       0
  3126 ;;      Locals:         0       4       0       0       0
  3127 ;;      Temps:          0       2       0       0       0
  3128 ;;      Totals:         0       7       0       0       0
  3129 ;;Total ram usage:        7 bytes
  3130 ;; Hardware stack levels used: 1
  3131 ;; Hardware stack levels required when called: 4
  3132 ;; This function calls:
  3133 ;;		_Lcd_Cmd
  3134 ;; This function is called by:
  3135 ;;		_main
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139  034D                     _Lcd_Set_Cursor:	
  3140                           ;psect for function _Lcd_Set_Cursor
  3141                           
  3142                           
  3143                           ;incstack = 0
  3144                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3145                           ;Lcd_Set_Cursor@a stored from wreg
  3146  034D  1283               	bcf	3,5	;RP0=0, select bank0
  3147  034E  1303               	bcf	3,6	;RP1=0, select bank0
  3148  034F  00CF               	movwf	Lcd_Set_Cursor@a
  3149  0350                     l2071:
  3150                           
  3151                           ;LCD.c: 50: void Lcd_Set_Cursor(char a, char b);LCD.c: 51: {;LCD.c: 52:     char temp, z
      +                          , y;;LCD.c: 53:     if (a == 1) {
  3152  0350  034F               	decf	Lcd_Set_Cursor@a,w
  3153  0351  1D03               	btfss	3,2
  3154  0352  2B54               	goto	u1481
  3155  0353  2B55               	goto	u1480
  3156  0354                     u1481:
  3157  0354  2B7A               	goto	l2081
  3158  0355                     u1480:
  3159  0355                     l2073:
  3160                           
  3161                           ;LCD.c: 54:         temp = 0x80 + b - 1;
  3162  0355  084C               	movf	Lcd_Set_Cursor@b,w
  3163  0356  3E7F               	addlw	127
  3164  0357  00CD               	movwf	??_Lcd_Set_Cursor
  3165  0358  084D               	movf	??_Lcd_Set_Cursor,w
  3166  0359  00D2               	movwf	Lcd_Set_Cursor@temp
  3167                           
  3168                           ;LCD.c: 55:         z = temp >> 4;
  3169  035A  0852               	movf	Lcd_Set_Cursor@temp,w
  3170  035B  00CD               	movwf	??_Lcd_Set_Cursor
  3171  035C  3004               	movlw	4
  3172  035D                     u1495:
  3173  035D  1003               	clrc
  3174  035E  0CCD               	rrf	??_Lcd_Set_Cursor,f
  3175  035F  3EFF               	addlw	-1
  3176  0360  1D03               	skipz
  3177  0361  2B5D               	goto	u1495
  3178  0362  084D               	movf	??_Lcd_Set_Cursor,w
  3179  0363  00CE               	movwf	??_Lcd_Set_Cursor+1
  3180  0364  084E               	movf	??_Lcd_Set_Cursor+1,w
  3181  0365  00D0               	movwf	Lcd_Set_Cursor@z
  3182  0366                     l2075:
  3183                           
  3184                           ;LCD.c: 56:         y = temp & 0x0F;
  3185  0366  0852               	movf	Lcd_Set_Cursor@temp,w
  3186  0367  390F               	andlw	15
  3187  0368  00CD               	movwf	??_Lcd_Set_Cursor
  3188  0369  084D               	movf	??_Lcd_Set_Cursor,w
  3189  036A  00D1               	movwf	Lcd_Set_Cursor@y
  3190  036B                     l2077:
  3191                           
  3192                           ;LCD.c: 57:         Lcd_Cmd(z);
  3193  036B  0850               	movf	Lcd_Set_Cursor@z,w
  3194  036C  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  3195  0371                     l2079:
  3196                           
  3197                           ;LCD.c: 58:         Lcd_Cmd(y);
  3198  0371  1283               	bcf	3,5	;RP0=0, select bank0
  3199  0372  1303               	bcf	3,6	;RP1=0, select bank0
  3200  0373  0851               	movf	Lcd_Set_Cursor@y,w
  3201  0374  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  3202                           
  3203                           ;LCD.c: 59:     } else if (a == 2) {
  3204  0379  2BA4               	goto	l109
  3205  037A                     l2081:
  3206  037A  3002               	movlw	2
  3207  037B  064F               	xorwf	Lcd_Set_Cursor@a,w
  3208  037C  1D03               	btfss	3,2
  3209  037D  2B7F               	goto	u1501
  3210  037E  2B80               	goto	u1500
  3211  037F                     u1501:
  3212  037F  2BA4               	goto	l109
  3213  0380                     u1500:
  3214  0380                     l2083:
  3215                           
  3216                           ;LCD.c: 60:         temp = 0xC0 + b - 1;
  3217  0380  084C               	movf	Lcd_Set_Cursor@b,w
  3218  0381  3EBF               	addlw	191
  3219  0382  00CD               	movwf	??_Lcd_Set_Cursor
  3220  0383  084D               	movf	??_Lcd_Set_Cursor,w
  3221  0384  00D2               	movwf	Lcd_Set_Cursor@temp
  3222                           
  3223                           ;LCD.c: 61:         z = temp >> 4;
  3224  0385  0852               	movf	Lcd_Set_Cursor@temp,w
  3225  0386  00CD               	movwf	??_Lcd_Set_Cursor
  3226  0387  3004               	movlw	4
  3227  0388                     u1515:
  3228  0388  1003               	clrc
  3229  0389  0CCD               	rrf	??_Lcd_Set_Cursor,f
  3230  038A  3EFF               	addlw	-1
  3231  038B  1D03               	skipz
  3232  038C  2B88               	goto	u1515
  3233  038D  084D               	movf	??_Lcd_Set_Cursor,w
  3234  038E  00CE               	movwf	??_Lcd_Set_Cursor+1
  3235  038F  084E               	movf	??_Lcd_Set_Cursor+1,w
  3236  0390  00D0               	movwf	Lcd_Set_Cursor@z
  3237  0391                     l2085:
  3238                           
  3239                           ;LCD.c: 62:         y = temp & 0x0F;
  3240  0391  0852               	movf	Lcd_Set_Cursor@temp,w
  3241  0392  390F               	andlw	15
  3242  0393  00CD               	movwf	??_Lcd_Set_Cursor
  3243  0394  084D               	movf	??_Lcd_Set_Cursor,w
  3244  0395  00D1               	movwf	Lcd_Set_Cursor@y
  3245  0396                     l2087:
  3246                           
  3247                           ;LCD.c: 63:         Lcd_Cmd(z);
  3248  0396  0850               	movf	Lcd_Set_Cursor@z,w
  3249  0397  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  3250  039C                     l2089:
  3251                           
  3252                           ;LCD.c: 64:         Lcd_Cmd(y);
  3253  039C  1283               	bcf	3,5	;RP0=0, select bank0
  3254  039D  1303               	bcf	3,6	;RP1=0, select bank0
  3255  039E  0851               	movf	Lcd_Set_Cursor@y,w
  3256  039F  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  3257  03A4                     l109:
  3258  03A4  0008               	return
  3259  03A5                     __end_of_Lcd_Set_Cursor:
  3260                           
  3261                           	psect	text14
  3262  064F                     __ptext14:	
  3263 ;; *************** function _Lcd_Clear *****************
  3264 ;; Defined at:
  3265 ;;		line 45 in file "LCD.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;		None
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;		None
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  1    wreg      void 
  3272 ;; Registers used:
  3273 ;;		wreg, status,2, status,0, pclath, cstack
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3279 ;;      Params:         0       0       0       0       0
  3280 ;;      Locals:         0       0       0       0       0
  3281 ;;      Temps:          0       0       0       0       0
  3282 ;;      Totals:         0       0       0       0       0
  3283 ;;Total ram usage:        0 bytes
  3284 ;; Hardware stack levels used: 1
  3285 ;; Hardware stack levels required when called: 4
  3286 ;; This function calls:
  3287 ;;		_Lcd_Cmd
  3288 ;; This function is called by:
  3289 ;;		_main
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293  064F                     _Lcd_Clear:	
  3294                           ;psect for function _Lcd_Clear
  3295                           
  3296  064F                     l1951:	
  3297                           ;incstack = 0
  3298                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3299                           
  3300                           
  3301                           ;LCD.c: 46:     Lcd_Cmd(0);
  3302  064F  3000               	movlw	0
  3303  0650  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  3304                           
  3305                           ;LCD.c: 47:     Lcd_Cmd(1);
  3306  0655  3001               	movlw	1
  3307  0656  120A  118A  2622  120A  118A  	fcall	_Lcd_Cmd
  3308  065B                     l103:
  3309  065B  0008               	return
  3310  065C                     __end_of_Lcd_Clear:
  3311                           
  3312                           	psect	text15
  3313  0622                     __ptext15:	
  3314 ;; *************** function _Lcd_Cmd *****************
  3315 ;; Defined at:
  3316 ;;		line 36 in file "LCD.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  a               1    wreg     unsigned char 
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  a               1    1[BANK0 ] unsigned char 
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  1    wreg      void 
  3323 ;; Registers used:
  3324 ;;		wreg, status,2, status,0, pclath, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3330 ;;      Params:         0       0       0       0       0
  3331 ;;      Locals:         0       1       0       0       0
  3332 ;;      Temps:          0       1       0       0       0
  3333 ;;      Totals:         0       2       0       0       0
  3334 ;;Total ram usage:        2 bytes
  3335 ;; Hardware stack levels used: 1
  3336 ;; Hardware stack levels required when called: 3
  3337 ;; This function calls:
  3338 ;;		_Lcd_Port
  3339 ;; This function is called by:
  3340 ;;		_Lcd_Clear
  3341 ;;		_Lcd_Set_Cursor
  3342 ;;		_Lcd_Init
  3343 ;;		_Lcd_Shift_Right
  3344 ;;		_Lcd_Shift_Left
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348  0622                     _Lcd_Cmd:	
  3349                           ;psect for function _Lcd_Cmd
  3350                           
  3351                           
  3352                           ;incstack = 0
  3353                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3354                           ;Lcd_Cmd@a stored from wreg
  3355  0622  1283               	bcf	3,5	;RP0=0, select bank0
  3356  0623  1303               	bcf	3,6	;RP1=0, select bank0
  3357  0624  00CB               	movwf	Lcd_Cmd@a
  3358  0625                     l1807:
  3359                           
  3360                           ;LCD.c: 36: void Lcd_Cmd(char a);LCD.c: 37: {;LCD.c: 38:     RA0 = 0;
  3361  0625  1005               	bcf	5,0	;volatile
  3362  0626                     l1809:
  3363                           
  3364                           ;LCD.c: 39:     Lcd_Port(a);
  3365  0626  084B               	movf	Lcd_Cmd@a,w
  3366  0627  120A  118A  25E4  120A  118A  	fcall	_Lcd_Port
  3367  062C                     l1811:
  3368                           
  3369                           ;LCD.c: 40:     RA1 = 1;
  3370  062C  1283               	bcf	3,5	;RP0=0, select bank0
  3371  062D  1303               	bcf	3,6	;RP1=0, select bank0
  3372  062E  1485               	bsf	5,1	;volatile
  3373  062F                     l1813:
  3374                           
  3375                           ;LCD.c: 41:     _delay((unsigned long)((4)*(1000000/4000.0)));
  3376  062F  30C7               	movlw	199
  3377  0630  1283               	bcf	3,5	;RP0=0, select bank0
  3378  0631  1303               	bcf	3,6	;RP1=0, select bank0
  3379  0632  00CA               	movwf	??_Lcd_Cmd
  3380  0633                     u1577:
  3381  0633  2E34               	nop2
  3382  0634  0BCA               	decfsz	??_Lcd_Cmd,f
  3383  0635  2E33               	goto	u1577
  3384  0636  2E37               	nop2
  3385  0637                     l1815:
  3386                           
  3387                           ;LCD.c: 42:     RA1 = 0;
  3388  0637  1283               	bcf	3,5	;RP0=0, select bank0
  3389  0638  1303               	bcf	3,6	;RP1=0, select bank0
  3390  0639  1085               	bcf	5,1	;volatile
  3391  063A                     l100:
  3392  063A  0008               	return
  3393  063B                     __end_of_Lcd_Cmd:
  3394                           
  3395                           	psect	text16
  3396  05E4                     __ptext16:	
  3397 ;; *************** function _Lcd_Port *****************
  3398 ;; Defined at:
  3399 ;;		line 13 in file "LCD.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;  a               1    wreg     unsigned char 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  a               1    6[COMMON] unsigned char 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3413 ;;      Params:         0       0       0       0       0
  3414 ;;      Locals:         1       0       0       0       0
  3415 ;;      Temps:          0       0       0       0       0
  3416 ;;      Totals:         1       0       0       0       0
  3417 ;;Total ram usage:        1 bytes
  3418 ;; Hardware stack levels used: 1
  3419 ;; Hardware stack levels required when called: 2
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_Lcd_Cmd
  3424 ;;		_Lcd_Init
  3425 ;;		_Lcd_Write_Char
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429  05E4                     _Lcd_Port:	
  3430                           ;psect for function _Lcd_Port
  3431                           
  3432                           
  3433                           ;incstack = 0
  3434                           ; Regs used in _Lcd_Port: [wreg]
  3435                           ;Lcd_Port@a stored from wreg
  3436  05E4  00F6               	movwf	Lcd_Port@a
  3437  05E5                     l1303:
  3438                           
  3439                           ;LCD.c: 13: void Lcd_Port(char a);LCD.c: 14: {;LCD.c: 15:     if (a & 1)
  3440  05E5  1C76               	btfss	Lcd_Port@a,0
  3441  05E6  2DE8               	goto	u591
  3442  05E7  2DE9               	goto	u590
  3443  05E8                     u591:
  3444  05E8  2DED               	goto	l89
  3445  05E9                     u590:
  3446  05E9                     l1305:
  3447                           
  3448                           ;LCD.c: 16:         RA2 = 1;
  3449  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  3450  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  3451  05EB  1505               	bsf	5,2	;volatile
  3452  05EC  2DF0               	goto	l90
  3453  05ED                     l89:	
  3454                           ;LCD.c: 17:     else
  3455                           
  3456                           
  3457                           ;LCD.c: 18:         RA2 = 0;
  3458  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  3459  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  3460  05EF  1105               	bcf	5,2	;volatile
  3461  05F0                     l90:
  3462                           
  3463                           ;LCD.c: 20:     if (a & 2)
  3464  05F0  1CF6               	btfss	Lcd_Port@a,1
  3465  05F1  2DF3               	goto	u601
  3466  05F2  2DF4               	goto	u600
  3467  05F3                     u601:
  3468  05F3  2DF6               	goto	l91
  3469  05F4                     u600:
  3470  05F4                     l1307:
  3471                           
  3472                           ;LCD.c: 21:         RA3 = 1;
  3473  05F4  1585               	bsf	5,3	;volatile
  3474  05F5  2DF7               	goto	l92
  3475  05F6                     l91:	
  3476                           ;LCD.c: 22:     else
  3477                           
  3478                           
  3479                           ;LCD.c: 23:         RA3 = 0;
  3480  05F6  1185               	bcf	5,3	;volatile
  3481  05F7                     l92:
  3482                           
  3483                           ;LCD.c: 25:     if (a & 4)
  3484  05F7  1D76               	btfss	Lcd_Port@a,2
  3485  05F8  2DFA               	goto	u611
  3486  05F9  2DFB               	goto	u610
  3487  05FA                     u611:
  3488  05FA  2DFD               	goto	l93
  3489  05FB                     u610:
  3490  05FB                     l1309:
  3491                           
  3492                           ;LCD.c: 26:         RA4 = 1;
  3493  05FB  1605               	bsf	5,4	;volatile
  3494  05FC  2DFE               	goto	l94
  3495  05FD                     l93:	
  3496                           ;LCD.c: 27:     else
  3497                           
  3498                           
  3499                           ;LCD.c: 28:         RA4 = 0;
  3500  05FD  1205               	bcf	5,4	;volatile
  3501  05FE                     l94:
  3502                           
  3503                           ;LCD.c: 30:     if (a & 8)
  3504  05FE  1DF6               	btfss	Lcd_Port@a,3
  3505  05FF  2E01               	goto	u621
  3506  0600  2E02               	goto	u620
  3507  0601                     u621:
  3508  0601  2E04               	goto	l95
  3509  0602                     u620:
  3510  0602                     l1311:
  3511                           
  3512                           ;LCD.c: 31:         RA5 = 1;
  3513  0602  1685               	bsf	5,5	;volatile
  3514  0603  2E05               	goto	l97
  3515  0604                     l95:	
  3516                           ;LCD.c: 32:     else
  3517                           
  3518                           
  3519                           ;LCD.c: 33:         RA5 = 0;
  3520  0604  1285               	bcf	5,5	;volatile
  3521  0605                     l97:
  3522  0605  0008               	return
  3523  0606                     __end_of_Lcd_Port:
  3524                           
  3525                           	psect	text17
  3526  0606                     __ptext17:	
  3527 ;; *************** function _master *****************
  3528 ;; Defined at:
  3529 ;;		line 71 in file "main_master_p1.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3543 ;;      Params:         0       0       0       0       0
  3544 ;;      Locals:         0       0       0       0       0
  3545 ;;      Temps:          4       0       0       0       0
  3546 ;;      Totals:         4       0       0       0       0
  3547 ;;Total ram usage:        4 bytes
  3548 ;; Hardware stack levels used: 1
  3549 ;; Hardware stack levels required when called: 1
  3550 ;; This function calls:
  3551 ;;		_USART_read
  3552 ;;		_read_red
  3553 ;; This function is called by:
  3554 ;;		Interrupt level 1
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558  0606                     _master:	
  3559                           ;psect for function _master
  3560                           
  3561  0606                     i1l1691:
  3562                           
  3563                           ;main_master_p1.c: 73:     if(PIR1bits.RCIF){
  3564  0606  1283               	bcf	3,5	;RP0=0, select bank0
  3565  0607  1303               	bcf	3,6	;RP1=0, select bank0
  3566  0608  1E8C               	btfss	12,5	;volatile
  3567  0609  2E0B               	goto	u116_21
  3568  060A  2E0C               	goto	u116_20
  3569  060B                     u116_21:
  3570  060B  2E19               	goto	i1l52
  3571  060C                     u116_20:
  3572  060C                     i1l1693:
  3573                           
  3574                           ;main_master_p1.c: 74:         val = USART_read();
  3575  060C  120A  118A  266A  120A  118A  	fcall	_USART_read
  3576  0611  00F2               	movwf	??_master
  3577  0612  0872               	movf	??_master,w
  3578  0613  00F7               	movwf	_val
  3579  0614                     i1l1695:
  3580                           
  3581                           ;main_master_p1.c: 75:         read_red();
  3582  0614  120A  118A  2442  120A  118A  	fcall	_read_red
  3583  0619                     i1l52:
  3584  0619  0875               	movf	??_master+3,w
  3585  061A  008A               	movwf	10
  3586  061B  0874               	movf	??_master+2,w
  3587  061C  0084               	movwf	4
  3588  061D  0E73               	swapf	??_master+1,w
  3589  061E  0083               	movwf	3
  3590  061F  0EFE               	swapf	btemp,f
  3591  0620  0E7E               	swapf	btemp,w
  3592  0621  0009               	retfie
  3593  0622                     __end_of_master:
  3594                           
  3595                           	psect	intentry
  3596  0004                     __pintentry:	
  3597                           ;incstack = 0
  3598                           ; Regs used in _master: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3599                           
  3600  0004                     interrupt_function:
  3601  007E                     saved_w	set	btemp
  3602  0004  00FE               	movwf	btemp
  3603  0005  0E03               	swapf	3,w
  3604  0006  00F3               	movwf	??_master+1
  3605  0007  0804               	movf	4,w
  3606  0008  00F4               	movwf	??_master+2
  3607  0009  080A               	movf	10,w
  3608  000A  00F5               	movwf	??_master+3
  3609  000B  120A  118A  2E06   	ljmp	_master
  3610                           
  3611                           	psect	text18
  3612  0442                     __ptext18:	
  3613 ;; *************** function _read_red *****************
  3614 ;; Defined at:
  3615 ;;		line 100 in file "main_master_p1.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;		None
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;		None
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      void 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3629 ;;      Params:         0       0       0       0       0
  3630 ;;      Locals:         0       0       0       0       0
  3631 ;;      Temps:          2       0       0       0       0
  3632 ;;      Totals:         2       0       0       0       0
  3633 ;;Total ram usage:        2 bytes
  3634 ;; Hardware stack levels used: 1
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_master
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642  0442                     _read_red:	
  3643                           ;psect for function _read_red
  3644                           
  3645  0442                     i1l1505:	
  3646                           ;incstack = 0
  3647                           ; Regs used in _read_red: [wreg-fsr0h+status,2+status,0]
  3648                           
  3649                           
  3650                           ;main_master_p1.c: 101:     switch(val & 224){
  3651  0442  2C6F               	goto	i1l1517
  3652  0443                     i1l1507:
  3653                           
  3654                           ;main_master_p1.c: 103:             mov = val & 31;
  3655  0443  0877               	movf	_val,w
  3656  0444  391F               	andlw	31
  3657  0445  00F0               	movwf	??_read_red
  3658  0446  01F1               	clrf	??_read_red+1
  3659  0447  0870               	movf	??_read_red,w
  3660  0448  1283               	bcf	3,5	;RP0=0, select bank0
  3661  0449  1303               	bcf	3,6	;RP1=0, select bank0
  3662  044A  00A0               	movwf	_mov
  3663  044B  0871               	movf	??_read_red+1,w
  3664  044C  00A1               	movwf	_mov+1
  3665                           
  3666                           ;main_master_p1.c: 104:             break;
  3667  044D  2C83               	goto	i1l69
  3668  044E                     i1l1509:
  3669                           
  3670                           ;main_master_p1.c: 106:             temp = val & 31;
  3671  044E  0877               	movf	_val,w
  3672  044F  391F               	andlw	31
  3673  0450  00F0               	movwf	??_read_red
  3674  0451  01F1               	clrf	??_read_red+1
  3675  0452  0870               	movf	??_read_red,w
  3676  0453  1283               	bcf	3,5	;RP0=0, select bank0
  3677  0454  1303               	bcf	3,6	;RP1=0, select bank0
  3678  0455  00EE               	movwf	_temp
  3679  0456  0871               	movf	??_read_red+1,w
  3680  0457  00EF               	movwf	_temp+1
  3681                           
  3682                           ;main_master_p1.c: 107:             break;
  3683  0458  2C83               	goto	i1l69
  3684  0459                     i1l1511:
  3685                           
  3686                           ;main_master_p1.c: 109:             hrs = val & 31;
  3687  0459  0877               	movf	_val,w
  3688  045A  391F               	andlw	31
  3689  045B  00F0               	movwf	??_read_red
  3690  045C  01F1               	clrf	??_read_red+1
  3691  045D  0870               	movf	??_read_red,w
  3692  045E  1283               	bcf	3,5	;RP0=0, select bank0
  3693  045F  1303               	bcf	3,6	;RP1=0, select bank0
  3694  0460  00EC               	movwf	_hrs
  3695  0461  0871               	movf	??_read_red+1,w
  3696  0462  00ED               	movwf	_hrs+1
  3697                           
  3698                           ;main_master_p1.c: 110:             break;
  3699  0463  2C83               	goto	i1l69
  3700  0464                     i1l1513:
  3701                           
  3702                           ;main_master_p1.c: 112:             mins = val & 31;
  3703  0464  0877               	movf	_val,w
  3704  0465  391F               	andlw	31
  3705  0466  00F0               	movwf	??_read_red
  3706  0467  01F1               	clrf	??_read_red+1
  3707  0468  0870               	movf	??_read_red,w
  3708  0469  1283               	bcf	3,5	;RP0=0, select bank0
  3709  046A  1303               	bcf	3,6	;RP1=0, select bank0
  3710  046B  00EA               	movwf	_mins
  3711  046C  0871               	movf	??_read_red+1,w
  3712  046D  00EB               	movwf	_mins+1
  3713                           
  3714                           ;main_master_p1.c: 113:             break;
  3715  046E  2C83               	goto	i1l69
  3716  046F                     i1l1517:
  3717  046F  0877               	movf	_val,w
  3718  0470  39E0               	andlw	224
  3719  0471  00F0               	movwf	??_read_red
  3720  0472  01F1               	clrf	??_read_red+1
  3721                           
  3722                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3723                           ; Switch size 1, requested type "simple"
  3724                           ; Number of cases is 1, Range of values is 0 to 0
  3725                           ; switch strategies available:
  3726                           ; Name         Instructions Cycles
  3727                           ; simple_byte            4     3 (average)
  3728                           ; direct_byte           11     8 (fixed)
  3729                           ; jumptable            260     6 (fixed)
  3730                           ;	Chosen strategy is simple_byte
  3731  0473  0871               	movf	??_read_red+1,w
  3732  0474  3A00               	xorlw	0	; case 0
  3733  0475  1903               	skipnz
  3734  0476  2C78               	goto	i1l2203
  3735  0477  2C64               	goto	i1l1513
  3736  0478                     i1l2203:
  3737                           
  3738                           ; Switch size 1, requested type "simple"
  3739                           ; Number of cases is 3, Range of values is 128 to 224
  3740                           ; switch strategies available:
  3741                           ; Name         Instructions Cycles
  3742                           ; simple_byte           10     6 (average)
  3743                           ; jumptable            263     9 (fixed)
  3744                           ;	Chosen strategy is simple_byte
  3745  0478  0870               	movf	??_read_red,w
  3746  0479  3A80               	xorlw	128	; case 128
  3747  047A  1903               	skipnz
  3748  047B  2C43               	goto	i1l1507
  3749  047C  3A20               	xorlw	32	; case 160
  3750  047D  1903               	skipnz
  3751  047E  2C4E               	goto	i1l1509
  3752  047F  3A40               	xorlw	64	; case 224
  3753  0480  1903               	skipnz
  3754  0481  2C59               	goto	i1l1511
  3755  0482  2C64               	goto	i1l1513
  3756  0483                     i1l69:
  3757  0483  0008               	return
  3758  0484                     __end_of_read_red:
  3759                           
  3760                           	psect	text19
  3761  066A                     __ptext19:	
  3762 ;; *************** function _USART_read *****************
  3763 ;; Defined at:
  3764 ;;		line 30 in file "USART.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;		None
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;		None
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      unsigned char 
  3771 ;; Registers used:
  3772 ;;		wreg
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3778 ;;      Params:         0       0       0       0       0
  3779 ;;      Locals:         0       0       0       0       0
  3780 ;;      Temps:          0       0       0       0       0
  3781 ;;      Totals:         0       0       0       0       0
  3782 ;;Total ram usage:        0 bytes
  3783 ;; Hardware stack levels used: 1
  3784 ;; This function calls:
  3785 ;;		Nothing
  3786 ;; This function is called by:
  3787 ;;		_master
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791  066A                     _USART_read:	
  3792                           ;psect for function _USART_read
  3793                           
  3794  066A                     i1l1007:	
  3795                           ;incstack = 0
  3796                           ; Regs used in _USART_read: [wreg]
  3797                           
  3798                           
  3799                           ;USART.c: 32:     return RCREG;
  3800  066A  1283               	bcf	3,5	;RP0=0, select bank0
  3801  066B  1303               	bcf	3,6	;RP1=0, select bank0
  3802  066C  081A               	movf	26,w	;volatile
  3803  066D                     i1l159:
  3804  066D  0008               	return
  3805  066E                     __end_of_USART_read:
  3806  007E                     btemp	set	126	;btemp
  3807  007E                     wtemp0	set	126
  3808                           
  3809                           	psect	idloc
  3810                           
  3811                           ;Config register IDLOC0 @ 0x2000
  3812                           ;	unspecified, using default values
  3813  2000                     	org	8192
  3814  2000  3FFF               	dw	16383
  3815                           
  3816                           ;Config register IDLOC1 @ 0x2001
  3817                           ;	unspecified, using default values
  3818  2001                     	org	8193
  3819  2001  3FFF               	dw	16383
  3820                           
  3821                           ;Config register IDLOC2 @ 0x2002
  3822                           ;	unspecified, using default values
  3823  2002                     	org	8194
  3824  2002  3FFF               	dw	16383
  3825                           
  3826                           ;Config register IDLOC3 @ 0x2003
  3827                           ;	unspecified, using default values
  3828  2003                     	org	8195
  3829  2003  3FFF               	dw	16383
  3830                           
  3831                           	psect	config
  3832                           
  3833                           ;Config register CONFIG1 @ 0x2007
  3834                           ;	Oscillator Selection bits
  3835                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3836                           ;	Watchdog Timer Enable bit
  3837                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3838                           ;	Power-up Timer Enable bit
  3839                           ;	PWRTE = OFF, PWRT disabled
  3840                           ;	RE3/MCLR pin function select bit
  3841                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3842                           ;	Code Protection bit
  3843                           ;	CP = OFF, Program memory code protection is disabled
  3844                           ;	Data Code Protection bit
  3845                           ;	CPD = OFF, Data memory code protection is disabled
  3846                           ;	Brown Out Reset Selection bits
  3847                           ;	BOREN = OFF, BOR disabled
  3848                           ;	Internal External Switchover bit
  3849                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3850                           ;	Fail-Safe Clock Monitor Enabled bit
  3851                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3852                           ;	Low Voltage Programming Enable bit
  3853                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3854                           ;	In-Circuit Debugger Mode bit
  3855                           ;	DEBUG = 0x1, unprogrammed default
  3856  2007                     	org	8199
  3857  2007  20D4               	dw	8404
  3858                           
  3859                           ;Config register CONFIG2 @ 0x2008
  3860                           ;	Brown-out Reset Selection bit
  3861                           ;	BOR4V = BOR21V, Brown-out Reset set to 2.1V
  3862                           ;	Flash Program Memory Self Write Enable bits
  3863                           ;	WRT = OFF, Write protection off
  3864  2008                     	org	8200
  3865  2008  3EFF               	dw	16127

Data Sizes:
    Strings     41
    Constant    10
    Data        6
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       8
    BANK0            80     32      80
    BANK1            80      1       1
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 22
		 -> STR_2(CODE[19]), STR_1(CODE[22]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> srow(BANK0[20]), frow(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 20
		 -> srow(BANK0[20]), frow(BANK0[20]), 


Critical Paths under _main in COMMON

    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _setup->_int_osc_MHz
    _USART_set->___lldiv
    _Lcd_Init->_Lcd_Port
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _master in COMMON

    _master->_read_red

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_USART_set
    _USART_set->___lldiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd

Critical Paths under _master in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _master in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _master in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _master in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    4617
                                              0 BANK1      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    20      7    2717
                                             13 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     316
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              7 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              6 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     672
                           _Lcd_Init
                          _USART_set
                        _int_osc_MHz
 ---------------------------------------------------------------------------------
 (2) _int_osc_MHz                                          3     3      0      31
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _USART_set                                           16    12      4     434
                                             13 BANK0     16    12      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              6 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     207
                                              2 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     4      0     420
                                              4 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     218
                                              0 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     689
                                              2 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     119
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0     119
                                              0 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              6 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _master                                               4     4      0       0
                                              2 COMMON     4     4      0
                         _USART_read
                           _read_red
 ---------------------------------------------------------------------------------
 (6) _read_red                                             2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _USART_read                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _setup
     _Lcd_Init
       _Lcd_Cmd
       _Lcd_Port
     _USART_set
       ___lldiv
     _int_osc_MHz
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _master (ROOT)
   _USART_read
   _read_red

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      1       1       7        1.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     20      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       8       1       57.1%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      59      12        0.0%
ABS                  0      0      59       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Mon Sep 19 12:14:35 2022

                       pc 0002                        l72 05BE                        l90 05F0  
                      l91 05F6                        l92 05F7                        l93 05FD  
                      l94 05FE                        l95 0604                        l97 0605  
                      l89 05ED                        fsr 0004       ___wmul@multiplicand 004C  
                     l100 063A                       l103 065B                       l112 03FB  
                     l121 05E3                       l115 04FD                       l109 03A4  
                     l134 04BF                       l139 04C0                       l332 02EE  
                     l156 0286                       l257 0061                       l275 013B  
                     l292 0216                       l296 0581                       l298 0599  
                     l568 0441                       l578 0539                       l749 064E  
                     _RA0 0028                       _RA1 0029                       _RA2 002A  
                     _RA3 002B                       _RA4 002C                       _RA5 002D  
                     u600 05F4                       u601 05F3                       u610 05FB  
                     u611 05FA                       u620 0602                       u700 0230  
                     u621 0601                       u630 0299                       u710 0249  
                     u631 0298                       u800 0406                       u721 025B  
                     u705 022B                       u801 0405                       u650 02AD  
                     u722 025C                       u651 02AC                       u723 0261  
                     u715 0244                       u724 0262                       u820 0418  
                     u645 029E                       u725 0267                       u821 0417  
                     u590 05E9                       u670 02C8                       u726 0268  
                     u591 05E8                       u671 02C7                       u815 040A  
                     u840 0429                       u665 02AF                       u841 0428  
                     u690 02E6                       u691 02E5                       u675 02C4  
                     u835 0419                       u860 043D                       u685 02D8  
                     u861 043C                       u845 0425                       u855 0431  
                     _hrs 006C                       _val 0077                       _mov 0020  
                     fsr0 0004                       indf 0000                      l2001 0103  
                    l2011 0135                      l2021 0160                      l2013 0146  
                    l2005 011F                      l2101 02F4                      l1311 0602  
                    l1303 05E5                      l2031 017C                      l2023 0167  
                    l2015 0152                      l2007 0129                      l2111 0343  
                    l2103 02F9                      l1305 05E9                      l1401 027B  
                    l2201 04B1                      l2041 01A6                      l2025 016B  
                    l2033 0189                      l2017 0156                      l2009 012F  
                    l2105 0313                      l1307 05F4                      l1331 02AD  
                    l1323 0287                      l1403 027C                      l2051 01EC  
                    l2043 01AC                      l2035 018F                      l2027 0171  
                    l2019 015A                      l2107 0329                      l1309 05FB  
                    l1341 02E0                      l1333 02B6                      l1325 0299  
                    l1405 027F                      l2053 01F3                      l2045 01B3  
                    l2037 0196                      l2029 0178                      l2109 0339  
                    l2071 0350                      l1335 02C8                      l1327 029C  
                    l1343 02E6                      l1407 0282                      l2055 01F7  
                    l2039 019A                      l2047 01B7                      l2073 0355  
                    l2081 037A                      l1337 02D6                      l1329 02A9  
                    l1409 0285                      l2049 01BC                      l2057 0200  
                    l2083 0380                      l2075 0366                      l2091 05C2  
                    l1339 02D7                      l2059 0212                      l2085 0391  
                    l2077 036B                      l2093 05C5                      l1461 0406  
                    l2087 0396                      l2079 0371                      l2095 05D0  
                    l1471 0429                      l1463 0409                      l2089 039C  
                    l2097 05D8                      l1473 042F                      l1465 0410  
                    l1457 03FC                      l1811 062C                      l1395 0217  
                    l1475 0430                      l1467 0414                      l1459 0400  
                    l2099 02EF                      l1813 062F                      l1397 021D  
                    l1821 048D                      l1477 0437                      l1469 0418  
                    l1901 0588                      l2197 0074                      l1815 0637  
                    l1807 0625                      l1399 0220                      l1823 0494  
                    l1831 04A7                      l1479 043D                      l1911 0506  
                    l1903 058F                      l2199 00DD                      l1809 0626  
                    l1841 03B6                      l1825 049B                      l1817 0485  
                    l1921 0522                      l1913 0509                      l1905 0595  
                    l1851 03D7                      l1843 03C4                      l1827 04A0  
                    l1819 0486                      l1931 059A                      l1923 0528  
                    l1915 0510                      l1861 03F5                      l1853 03DD  
                    l1845 03CA                      l1837 03A5                      l1941 05A8  
                    l1933 05A0                      l1925 052F                      l1917 0514  
                    l1909 04FE                      l1951 064F                      l1871 04E0  
                    l1863 04C4                      l1855 03E3                      l1847 03CB  
                    l1839 03AB                      l1943 05AD                      l1935 05A3  
                    l1919 0518                      l1927 0535                      l1881 04FA  
                    l1873 04E7                      l1865 04CE                      l1857 03E9  
                    l1849 03D1                      l1945 05BC                      l1937 05A4  
                    l1961 005D                      l1953 0046                      l1875 04EA  
                    l1867 04CF                      l1859 03EF                      l1947 05BD  
                    l1939 05A7                      l1891 064D                      l1883 063E  
                    l1971 0089                      l1963 0062                      l1955 004B  
                    l1877 04F0                      l1869 04DD                      l1885 063F  
                    l1973 008D                      l1957 0051                      l1879 04F3  
                    l1895 0573                      l1887 0645                      l1991 00F8  
                    l1975 00A2                      l1983 00C9                      l1967 0066  
                    l1959 0058                      l1897 0577                      l1889 064B  
                    l1993 00FC                      l1985 00E8                      l1977 00B5  
                    l1969 0079                      l1899 057B                      l1995 0101  
                    l1987 00F0                      l1979 00B9                      l1989 00F4  
                    STR_1 054A                      STR_2 0560                      u1200 057B  
                    u1201 057A                      u1300 0051                      u1301 0050  
                    u1230 0595                      u1310 0089                      u1231 0594  
                    u1215 0582                      u1311 0088                      u1240 0506  
                    u1400 0160                      u1320 00C9                      u1241 0505  
                    u1225 0589                      u1401 015F                      u1321 00C8  
                    u1410 0171                      u1330 00F8                      u1411 0170  
                    u1331 00F7                      u1500 0380                      u1260 0518  
                    u1180 0645                      u1420 0188                      u1340 011E  
                    u1501 037F                      u1261 0517                      u1181 0644  
                    u1421 0187                      u1341 011D                      u1270 0522  
                    u1190 064B                      u1430 018F                      u1350 0129  
                    u1175 04D2                      u1271 0521                      u1255 050A  
                    u1191 064A                      u1431 018E                      u1351 0128  
                    u1520 05E3                      u1440 01A6                      u1360 012F  
                    u1521 05E2                      u1441 01A5                      u1361 012E  
                    u1345 011A                      u1290 0535                      u1450 01AC  
                    u1370 0135                      u1515 0388                      u1291 0534  
                    u1275 051E                      u1451 01AB                      u1371 0134  
                    u1460 0200                      u1380 0146                      u1285 0529  
                    u1461 01FF                      u1381 0145                      u1470 0212  
                    u1390 015A                      u1471 0211                      u1391 0159  
                    u1480 0355                      u1481 0354                      u1537 03B1  
                    u1385 0142                      u1547 03C0                      u1557 04E4  
                    u1495 035D                      u1567 04F7                      u1577 0633  
                    i1l52 0619                      i1l69 0483         ?_Lcd_Write_String 0070  
                    _main 02EF                      _frow 0036                      _mins 006A  
                    _temp 006E                      btemp 007E                      _srow 0022  
                    start 000E        ??_Lcd_Write_String 004E           __end_of_Lcd_Cmd 063B  
                   ?_main 0070                     _ANSEL 0188           __end_of___lldiv 02EF  
         __end_of___lwdiv 0442                     i1l159 066D           __end_of___lwmod 053A  
                   _RCREG 001A                     _SPBRG 0099                     _TRISA 0085  
                   _TRISB 0086           int_osc_MHz@freq 0076           __end_of_dpowers 054A  
         __end_of_isdigit 064F                     _setup 059A              ?_int_osc_MHz 0070  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __end_of_sprintf 0217          __end_of_Lcd_Init 03FC          __end_of_Lcd_Port 0606  
             ?_USART_read 0070           __initialization 0011              __end_of_main 034D  
                  ??_main 00A0                    ?_setup 0070                    _ANSELH 0189  
                  i1l1007 066A                    i1l2203 0478                    i1l1511 0459  
                  i1l1513 0464                    i1l1505 0442                    i1l1507 0443  
                  i1l1509 044E                    i1l1517 046F                    i1l1691 0606  
                  i1l1693 060C                    i1l1695 0614                    u116_20 060C  
                  u116_21 060B                 ??_Lcd_Cmd 004A                    _SPBRGH 009A  
                  ___wmul 0573                 ??___lldiv 0076                 ??___lwdiv 0076  
               ??___lwmod 0055                    _master 0606          __end_of_read_red 0484  
       __end_of_USART_set 0287                 ??_isdigit 0076                    saved_w 007E  
               ??_sprintf 005E           Lcd_Set_Cursor@a 004F           Lcd_Set_Cursor@b 004C  
         Lcd_Set_Cursor@y 0051           Lcd_Set_Cursor@z 0050   __end_of__initialization 003F  
       __end_of_Lcd_Clear 065C            __pcstackCOMMON 0070              __pidataBANK0 0664  
           __end_of_setup 05BF            _Lcd_Set_Cursor 034D                 ?_Lcd_Init 0070  
               ?_Lcd_Port 0070              sprintf@width 0066                   ??_setup 0077  
              __pbssBANK0 0020                __pmaintext 02EF                   ?___wmul 004A  
              __pintentry 0004                   ?_master 0070    __end_of_Lcd_Set_Cursor 03A5  
              ??_Lcd_Init 004C                ??_Lcd_Port 0076                __stringtab 053A  
          _Lcd_Write_Char 04C1                   _Lcd_Cmd 0622                 ?_read_red 0070  
            ??_USART_read 0070                   ___lldiv 0287                   ___lwdiv 03FC  
                 ___lwmod 04FE           ?_Lcd_Set_Cursor 004C                   __ptext1 0043  
                 __ptext2 063B                   __ptext3 0573                   __ptext4 04FE  
                 __ptext5 03FC                   __ptext6 059A                   __ptext7 0484  
                 __ptext8 0217                   __ptext9 0287                   _dpowers 0540  
                 _isdigit 063B                   _sprintf 0043                   clrloop0 065D  
      __end_of_USART_read 066E    __end_of_Lcd_Write_Char 04FE      end_of_initialization 003F  
              ??_read_red 0070           ___lldiv@divisor 004A           ___lldiv@counter 0056  
               _RCSTAbits 0018                 Lcd_Port@a 0076                 _USART_set 0217  
         ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0051         Lcd_Write_String@i 004F  
               _TXSTAbits 0098                 _Lcd_Clear 064F            __end_of___wmul 059A  
        _Lcd_Write_String 05BF               _BAUDCTLbits 0187            __end_of_master 0622  
     start_initialization 0011                ?_USART_set 0057         USART_set@baudrate 0057  
              ?_Lcd_Clear 0070                  ??___wmul 0076               __pdataBANK0 006A  
         Lcd_Write_Char@a 004D                  ??_master 0072           Lcd_Write_Char@y 004C  
             __pbssCOMMON 0077                 ___latbits 0002             __pcstackBANK0 004A  
           __pcstackBANK1 00A0             ??_int_osc_MHz 004A                  ?_Lcd_Cmd 0070  
             sprintf@flag 0065               sprintf@prec 0062          ___lwdiv@dividend 004C  
        ??_Lcd_Set_Cursor 004D                  ?___lldiv 004A                  ?___lwdiv 004A  
                ?___lwmod 0051                 __pstrings 053A                  ?_isdigit 0070  
             ??_USART_set 005B          ___lwdiv@quotient 004E                  ?_sprintf 0057  
       interrupt_function 0004            ___wmul@product 004E                 clear_ram0 065C  
                _PIE1bits 008C       __end_of_int_osc_MHz 04C1                  Lcd_Cmd@a 004B  
                _PIR1bits 000C               ??_Lcd_Clear 0077               __stringbase 053F  
       ___wmul@multiplier 004A          ??_Lcd_Write_Char 004A                  _Lcd_Init 03A5  
                _Lcd_Port 05E4  __end_of_Lcd_Write_String 05E4        __end_of__stringtab 0540  
             _isdigit$840 004A                sprintf@val 0063           ___lwdiv@divisor 004A  
         ___lwdiv@counter 0050                  __ptext10 03A5                  __ptext11 05BF  
                __ptext12 04C1                  __ptext13 034D                  __ptext14 064F  
                __ptext15 0622                  __ptext16 05E4                  __ptext17 0606  
                __ptext18 0442                  __ptext19 066A               _int_osc_MHz 0484  
                _read_red 0442                _INTCONbits 000B                  isdigit@c 004B  
      Lcd_Write_Char@temp 004B                  intlevel1 0000                 sprintf@ap 0061  
               sprintf@sp 0068          ___lwmod@dividend 0053          ___lldiv@dividend 004E  
               stringcode 053A                _OSCCONbits 008F        Lcd_Set_Cursor@temp 0052  
                sprintf@c 0069                  sprintf@f 0057          ___lldiv@quotient 0052  
         ___lwmod@divisor 0051           ___lwmod@counter 0056                  stringdir 053A  
                stringtab 053A                _USART_read 066A  
